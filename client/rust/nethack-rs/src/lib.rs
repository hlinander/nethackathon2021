/* automatically generated by rust-bindgen 0.58.1 */
#![allow(warnings)]

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const VERSION_MAJOR: u32 = 3;
pub const VERSION_MINOR: u32 = 7;
pub const PATCHLEVEL: u32 = 0;
pub const EDITLEVEL: u32 = 32;
pub const NH_STATUS_RELEASED: u32 = 0;
pub const NH_STATUS_WIP: u32 = 1;
pub const NH_STATUS_BETA: u32 = 2;
pub const NH_STATUS_POSTRELEASE: u32 = 3;
pub const NH_DEVEL_STATUS: u32 = 1;
pub const COPYRIGHT_BANNER_A: &'static [u8; 29usize] = b"NetHack, Copyright 1985-2021\0";
pub const COPYRIGHT_BANNER_B: &'static [u8; 62usize] =
    b"         By Stichting Mathematisch Centrum and M. Stephenson.\0";
pub const COPYRIGHT_BANNER_D: &'static [u8; 34usize] = b"         See license for details.\0";
pub const VERSION_COMPATIBILITY: u32 = 50790400;
pub const DEFAULT_WINDOW_SYS: &'static [u8; 4usize] = b"tty\0";
pub const WIZARD_NAME: &'static [u8; 7usize] = b"wizard\0";
pub const SYSCF_FILE: &'static [u8; 8usize] = b"sysconf\0";
pub const GDBPATH: &'static [u8; 13usize] = b"/usr/bin/gdb\0";
pub const GREPPATH: &'static [u8; 10usize] = b"/bin/grep\0";
pub const LOGFILE: &'static [u8; 8usize] = b"logfile\0";
pub const XLOGFILE: &'static [u8; 9usize] = b"xlogfile\0";
pub const NEWS: &'static [u8; 5usize] = b"news\0";
pub const PANICLOG: &'static [u8; 9usize] = b"paniclog\0";
pub const PERSMAX: u32 = 3;
pub const POINTSMIN: u32 = 1;
pub const ENTRYMAX: u32 = 100;
pub const PERS_IS_UID: u32 = 0;
pub const HACKDIR: &'static [u8; 26usize] = b"/usr/games/lib/nethackdir\0";
pub const __GNUC_VA_LIST: u32 = 1;
pub const __GNUC__: u32 = 4;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &'static [u8; 1usize] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const RECORD: &'static [u8; 7usize] = b"record\0";
pub const HELP: &'static [u8; 5usize] = b"help\0";
pub const SHELP: &'static [u8; 3usize] = b"hh\0";
pub const KEYHELP: &'static [u8; 8usize] = b"keyhelp\0";
pub const DEBUGHELP: &'static [u8; 8usize] = b"wizhelp\0";
pub const RUMORFILE: &'static [u8; 7usize] = b"rumors\0";
pub const ORACLEFILE: &'static [u8; 8usize] = b"oracles\0";
pub const DATAFILE: &'static [u8; 5usize] = b"data\0";
pub const CMDHELPFILE: &'static [u8; 8usize] = b"cmdhelp\0";
pub const HISTORY: &'static [u8; 8usize] = b"history\0";
pub const LICENSE: &'static [u8; 8usize] = b"license\0";
pub const OPTIONFILE: &'static [u8; 8usize] = b"opthelp\0";
pub const OPTIONS_USED: &'static [u8; 8usize] = b"options\0";
pub const SYMBOLS: &'static [u8; 8usize] = b"symbols\0";
pub const EPITAPHFILE: &'static [u8; 8usize] = b"epitaph\0";
pub const ENGRAVEFILE: &'static [u8; 8usize] = b"engrave\0";
pub const BOGUSMONFILE: &'static [u8; 9usize] = b"bogusmon\0";
pub const TRIBUTEFILE: &'static [u8; 8usize] = b"tribute\0";
pub const LEV_EXT: &'static [u8; 5usize] = b".lua\0";
pub const LARGEST_INT: u32 = 32767;
pub const DUMPLOG_MSG_COUNT: u32 = 50;
pub const OPTIONS_FILE: &'static [u8; 8usize] = b"options\0";
pub const PORT_HELP: &'static [u8; 9usize] = b"porthelp\0";
pub const CONFIG_FILE: &'static [u8; 11usize] = b".nethackrc\0";
pub const CONFIG_TEMPLATE: &'static [u8; 20usize] = b".nethackrc.template\0";
pub const SYSCF_TEMPLATE: &'static [u8; 17usize] = b"sysconf.template\0";
pub const SYMBOLS_TEMPLATE: &'static [u8; 17usize] = b"symbols.template\0";
pub const GUIDEBOOK_FILE: &'static [u8; 14usize] = b"Guidebook.txt\0";
pub const INTERJECT_PANIC: u32 = 0;
pub const INTERJECTION_TYPES: u32 = 1;
pub const _DOMAIN: u32 = 1;
pub const _SING: u32 = 2;
pub const _OVERFLOW: u32 = 3;
pub const _UNDERFLOW: u32 = 4;
pub const _TLOSS: u32 = 5;
pub const _PLOSS: u32 = 6;
pub const _HUGE_ENUF : f64 = 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0 ;
pub const _DENORM: i32 = -2;
pub const _FINITE: i32 = -1;
pub const _INFCODE: u32 = 1;
pub const _NANCODE: u32 = 2;
pub const FP_INFINITE: u32 = 1;
pub const FP_NAN: u32 = 2;
pub const FP_NORMAL: i32 = -1;
pub const FP_SUBNORMAL: i32 = -2;
pub const FP_ZERO: u32 = 0;
pub const _C2: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: u32 = 2147483647;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const _FE_DIVBYZERO: u32 = 4;
pub const _FE_INEXACT: u32 = 32;
pub const _FE_INVALID: u32 = 1;
pub const _FE_OVERFLOW: u32 = 8;
pub const _FE_UNDERFLOW: u32 = 16;
pub const _D0_C: u32 = 3;
pub const _D1_C: u32 = 2;
pub const _D2_C: u32 = 1;
pub const _D3_C: u32 = 0;
pub const _DBIAS: u32 = 1022;
pub const _DOFF: u32 = 4;
pub const _F0_C: u32 = 1;
pub const _F1_C: u32 = 0;
pub const _FBIAS: u32 = 126;
pub const _FOFF: u32 = 7;
pub const _FRND: u32 = 1;
pub const _L0_C: u32 = 3;
pub const _L1_C: u32 = 2;
pub const _L2_C: u32 = 1;
pub const _L3_C: u32 = 0;
pub const _LBIAS: u32 = 1022;
pub const _LOFF: u32 = 4;
pub const _FP_LT: u32 = 1;
pub const _FP_EQ: u32 = 2;
pub const _FP_GT: u32 = 4;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const _P_WAIT: u32 = 0;
pub const _P_NOWAIT: u32 = 1;
pub const _OLD_P_OVERLAY: u32 = 2;
pub const _P_NOWAITO: u32 = 3;
pub const _P_DETACH: u32 = 4;
pub const _P_OVERLAY: u32 = 2;
pub const _WAIT_CHILD: u32 = 0;
pub const _WAIT_GRANDCHILD: u32 = 1;
pub const P_WAIT: u32 = 0;
pub const P_NOWAIT: u32 = 1;
pub const P_OVERLAY: u32 = 2;
pub const OLD_P_OVERLAY: u32 = 2;
pub const P_NOWAITO: u32 = 3;
pub const P_DETACH: u32 = 4;
pub const WAIT_CHILD: u32 = 0;
pub const WAIT_GRANDCHILD: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const TIME_UTC: u32 = 1;
pub const _S_IFMT: u32 = 61440;
pub const _S_IFDIR: u32 = 16384;
pub const _S_IFCHR: u32 = 8192;
pub const _S_IFIFO: u32 = 4096;
pub const _S_IFREG: u32 = 32768;
pub const _S_IREAD: u32 = 256;
pub const _S_IWRITE: u32 = 128;
pub const _S_IEXEC: u32 = 64;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFREG: u32 = 32768;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const FCMASK: u32 = 384;
pub const HLOCK: &'static [u8; 7usize] = b"NHPERM\0";
pub const _O_RDONLY: u32 = 0;
pub const _O_WRONLY: u32 = 1;
pub const _O_RDWR: u32 = 2;
pub const _O_APPEND: u32 = 8;
pub const _O_CREAT: u32 = 256;
pub const _O_TRUNC: u32 = 512;
pub const _O_EXCL: u32 = 1024;
pub const _O_TEXT: u32 = 16384;
pub const _O_BINARY: u32 = 32768;
pub const _O_WTEXT: u32 = 65536;
pub const _O_U16TEXT: u32 = 131072;
pub const _O_U8TEXT: u32 = 262144;
pub const _O_RAW: u32 = 32768;
pub const _O_NOINHERIT: u32 = 128;
pub const _O_TEMPORARY: u32 = 64;
pub const _O_SHORT_LIVED: u32 = 4096;
pub const _O_OBTAIN_DIR: u32 = 8192;
pub const _O_SEQUENTIAL: u32 = 32;
pub const _O_RANDOM: u32 = 16;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_APPEND: u32 = 8;
pub const O_CREAT: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_EXCL: u32 = 1024;
pub const O_TEXT: u32 = 16384;
pub const O_BINARY: u32 = 32768;
pub const O_RAW: u32 = 32768;
pub const O_TEMPORARY: u32 = 64;
pub const O_NOINHERIT: u32 = 128;
pub const O_SEQUENTIAL: u32 = 32;
pub const O_RANDOM: u32 = 16;
pub const _SH_DENYRW: u32 = 16;
pub const _SH_DENYWR: u32 = 32;
pub const _SH_DENYRD: u32 = 48;
pub const _SH_DENYNO: u32 = 64;
pub const _SH_SECURE: u32 = 128;
pub const SH_DENYRW: u32 = 16;
pub const SH_DENYWR: u32 = 32;
pub const SH_DENYRD: u32 = 48;
pub const SH_DENYNO: u32 = 64;
pub const _A_NORMAL: u32 = 0;
pub const _A_RDONLY: u32 = 1;
pub const _A_HIDDEN: u32 = 2;
pub const _A_SYSTEM: u32 = 4;
pub const _A_SUBDIR: u32 = 16;
pub const _A_ARCH: u32 = 32;
pub const MAX_LAN_USERNAME: u32 = 20;
pub const LUA_INT_INT: u32 = 1;
pub const LUA_INT_LONG: u32 = 2;
pub const LUA_INT_LONGLONG: u32 = 3;
pub const LUA_FLOAT_FLOAT: u32 = 1;
pub const LUA_FLOAT_DOUBLE: u32 = 2;
pub const LUA_FLOAT_LONGDOUBLE: u32 = 3;
pub const LUA_INT_TYPE: u32 = 3;
pub const LUA_FLOAT_TYPE: u32 = 2;
pub const LUA_PATH_SEP: &'static [u8; 2usize] = b";\0";
pub const LUA_PATH_MARK: &'static [u8; 2usize] = b"?\0";
pub const LUA_EXEC_DIR: &'static [u8; 2usize] = b"!\0";
pub const LUA_LDIR: &'static [u8; 7usize] = b"!\\lua\\\0";
pub const LUA_CDIR: &'static [u8; 3usize] = b"!\\\0";
pub const LUA_DIRSEP: &'static [u8; 2usize] = b"\\\0";
pub const LUA_NUMBER_FRMLEN: &'static [u8; 1usize] = b"\0";
pub const LUA_NUMBER_FMT: &'static [u8; 6usize] = b"%.14g\0";
pub const LUA_INTEGER_FRMLEN: &'static [u8; 3usize] = b"ll\0";
pub const LUAI_MAXSTACK: u32 = 1000000;
pub const LUA_IDSIZE: u32 = 60;
pub const LUA_VERSION_MAJOR: &'static [u8; 2usize] = b"5\0";
pub const LUA_VERSION_MINOR: &'static [u8; 2usize] = b"4\0";
pub const LUA_VERSION_RELEASE: &'static [u8; 2usize] = b"2\0";
pub const LUA_VERSION_NUM: u32 = 504;
pub const LUA_VERSION_RELEASE_NUM: u32 = 50400;
pub const LUA_VERSION: &'static [u8; 8usize] = b"Lua 5.4\0";
pub const LUA_RELEASE: &'static [u8; 10usize] = b"Lua 5.4.2\0";
pub const LUA_COPYRIGHT: &'static [u8; 52usize] =
    b"Lua 5.4.2  Copyright (C) 1994-2020 Lua.org, PUC-Rio\0";
pub const LUA_AUTHORS: &'static [u8; 48usize] =
    b"R. Ierusalimschy, L. H. de Figueiredo, W. Celes\0";
pub const LUA_SIGNATURE: &'static [u8; 5usize] = b"\x1BLua\0";
pub const LUA_MULTRET: i32 = -1;
pub const LUA_REGISTRYINDEX: i32 = -1001000;
pub const LUA_OK: u32 = 0;
pub const LUA_YIELD: u32 = 1;
pub const LUA_ERRRUN: u32 = 2;
pub const LUA_ERRSYNTAX: u32 = 3;
pub const LUA_ERRMEM: u32 = 4;
pub const LUA_ERRERR: u32 = 5;
pub const LUA_TNONE: i32 = -1;
pub const LUA_TNIL: u32 = 0;
pub const LUA_TBOOLEAN: u32 = 1;
pub const LUA_TLIGHTUSERDATA: u32 = 2;
pub const LUA_TNUMBER: u32 = 3;
pub const LUA_TSTRING: u32 = 4;
pub const LUA_TTABLE: u32 = 5;
pub const LUA_TFUNCTION: u32 = 6;
pub const LUA_TUSERDATA: u32 = 7;
pub const LUA_TTHREAD: u32 = 8;
pub const LUA_NUMTYPES: u32 = 9;
pub const LUA_MINSTACK: u32 = 20;
pub const LUA_RIDX_MAINTHREAD: u32 = 1;
pub const LUA_RIDX_GLOBALS: u32 = 2;
pub const LUA_RIDX_LAST: u32 = 2;
pub const LUA_OPADD: u32 = 0;
pub const LUA_OPSUB: u32 = 1;
pub const LUA_OPMUL: u32 = 2;
pub const LUA_OPMOD: u32 = 3;
pub const LUA_OPPOW: u32 = 4;
pub const LUA_OPDIV: u32 = 5;
pub const LUA_OPIDIV: u32 = 6;
pub const LUA_OPBAND: u32 = 7;
pub const LUA_OPBOR: u32 = 8;
pub const LUA_OPBXOR: u32 = 9;
pub const LUA_OPSHL: u32 = 10;
pub const LUA_OPSHR: u32 = 11;
pub const LUA_OPUNM: u32 = 12;
pub const LUA_OPBNOT: u32 = 13;
pub const LUA_OPEQ: u32 = 0;
pub const LUA_OPLT: u32 = 1;
pub const LUA_OPLE: u32 = 2;
pub const LUA_GCSTOP: u32 = 0;
pub const LUA_GCRESTART: u32 = 1;
pub const LUA_GCCOLLECT: u32 = 2;
pub const LUA_GCCOUNT: u32 = 3;
pub const LUA_GCCOUNTB: u32 = 4;
pub const LUA_GCSTEP: u32 = 5;
pub const LUA_GCSETPAUSE: u32 = 6;
pub const LUA_GCSETSTEPMUL: u32 = 7;
pub const LUA_GCISRUNNING: u32 = 9;
pub const LUA_GCGEN: u32 = 10;
pub const LUA_GCINC: u32 = 11;
pub const LUA_NUMTAGS: u32 = 9;
pub const LUA_HOOKCALL: u32 = 0;
pub const LUA_HOOKRET: u32 = 1;
pub const LUA_HOOKLINE: u32 = 2;
pub const LUA_HOOKCOUNT: u32 = 3;
pub const LUA_HOOKTAILCALL: u32 = 4;
pub const LUA_MASKCALL: u32 = 1;
pub const LUA_MASKRET: u32 = 2;
pub const LUA_MASKLINE: u32 = 4;
pub const LUA_MASKCOUNT: u32 = 8;
pub const LUA_VERSUFFIX: &'static [u8; 5usize] = b"_5_4\0";
pub const LUA_COLIBNAME: &'static [u8; 10usize] = b"coroutine\0";
pub const LUA_TABLIBNAME: &'static [u8; 6usize] = b"table\0";
pub const LUA_IOLIBNAME: &'static [u8; 3usize] = b"io\0";
pub const LUA_OSLIBNAME: &'static [u8; 3usize] = b"os\0";
pub const LUA_STRLIBNAME: &'static [u8; 7usize] = b"string\0";
pub const LUA_UTF8LIBNAME: &'static [u8; 5usize] = b"utf8\0";
pub const LUA_MATHLIBNAME: &'static [u8; 5usize] = b"math\0";
pub const LUA_DBLIBNAME: &'static [u8; 6usize] = b"debug\0";
pub const LUA_LOADLIBNAME: &'static [u8; 8usize] = b"package\0";
pub const LUA_GNAME: &'static [u8; 3usize] = b"_G\0";
pub const LUA_ERRFILE: u32 = 6;
pub const LUA_LOADED_TABLE: &'static [u8; 8usize] = b"_LOADED\0";
pub const LUA_PRELOAD_TABLE: &'static [u8; 9usize] = b"_PRELOAD\0";
pub const LUA_NOREF: i32 = -2;
pub const LUA_REFNIL: i32 = -1;
pub const LUA_FILEHANDLE: &'static [u8; 6usize] = b"FILE*\0";
pub const PORT_ID: &'static [u8; 8usize] = b"Windows\0";
pub const LOCKNAMEINIT: &'static [u8; 1usize] = b"\0";
pub const BONESINIT: &'static [u8; 15usize] = b"bonesnn.xxx.le\0";
pub const INDEXT: &'static [u8; 8usize] = b".xxxxxx\0";
pub const SAVEX: &'static [u8; 1usize] = b"\0";
pub const SAVE_EXTENSION: &'static [u8; 20usize] = b".NetHack-saved-game\0";
pub const SFI1_EXTERNALCOMP: u32 = 1;
pub const SFI1_RLECOMP: u32 = 2;
pub const SFI1_ZEROCOMP: u32 = 4;
pub const COLNO: u32 = 80;
pub const ROWNO: u32 = 21;
pub const MAXNROFROOMS: u32 = 40;
pub const MAX_SUBROOMS: u32 = 24;
pub const DOORMAX: u32 = 120;
pub const BUFSZ: u32 = 256;
pub const QBUFSZ: u32 = 128;
pub const TBUFSZ: u32 = 300;
pub const COLBUFSZ: u32 = 256;
pub const PL_NSIZ: u32 = 32;
pub const PL_CSIZ: u32 = 32;
pub const PL_FSIZ: u32 = 32;
pub const PL_PSIZ: u32 = 63;
pub const MAXDUNGEON: u32 = 16;
pub const MAXLEVEL: u32 = 32;
pub const MAXSTAIRS: u32 = 1;
pub const ALIGNWEIGHT: u32 = 4;
pub const MAXULEV: u32 = 30;
pub const MAXMONNO: u32 = 120;
pub const MHPMAX: u32 = 500;
pub const _CRT_WARN: u32 = 0;
pub const _CRT_ERROR: u32 = 1;
pub const _CRT_ASSERT: u32 = 2;
pub const _CRT_ERRCNT: u32 = 3;
pub const _CRTDBG_MODE_FILE: u32 = 1;
pub const _CRTDBG_MODE_DEBUG: u32 = 2;
pub const _CRTDBG_MODE_WNDW: u32 = 4;
pub const _CRTDBG_REPORT_MODE: i32 = -1;
pub const _CRT_RPTHOOK_INSTALL: u32 = 0;
pub const _CRT_RPTHOOK_REMOVE: u32 = 1;
pub const _HOOK_ALLOC: u32 = 1;
pub const _HOOK_REALLOC: u32 = 2;
pub const _HOOK_FREE: u32 = 3;
pub const _CRTDBG_ALLOC_MEM_DF: u32 = 1;
pub const _CRTDBG_DELAY_FREE_MEM_DF: u32 = 2;
pub const _CRTDBG_CHECK_ALWAYS_DF: u32 = 4;
pub const _CRTDBG_RESERVED_DF: u32 = 8;
pub const _CRTDBG_CHECK_CRT_DF: u32 = 16;
pub const _CRTDBG_LEAK_CHECK_DF: u32 = 32;
pub const _CRTDBG_CHECK_EVERY_16_DF: u32 = 1048576;
pub const _CRTDBG_CHECK_EVERY_128_DF: u32 = 8388608;
pub const _CRTDBG_CHECK_EVERY_1024_DF: u32 = 67108864;
pub const _CRTDBG_CHECK_DEFAULT_DF: u32 = 0;
pub const _CRTDBG_REPORT_FLAG: i32 = -1;
pub const _FREE_BLOCK: u32 = 0;
pub const _NORMAL_BLOCK: u32 = 1;
pub const _CRT_BLOCK: u32 = 2;
pub const _IGNORE_BLOCK: u32 = 3;
pub const _CLIENT_BLOCK: u32 = 4;
pub const _MAX_BLOCKS: u32 = 5;
pub const _UNKNOWN_BLOCK: i32 = -1;
pub const TELL: u32 = 1;
pub const NOTELL: u32 = 0;
pub const ON: u32 = 1;
pub const OFF: u32 = 0;
pub const BOLT_LIM: u32 = 8;
pub const MAX_CARR_CAP: u32 = 1000;
pub const DEF_NOTHING: u8 = 32u8;
pub const UNDEFINED_VALUE: u32 = 0;
pub const IRON_BALL_W_INCR: u32 = 160;
pub const VAULT_GUARD_TIME: u32 = 30;
pub const SHOP_DOOR_COST: u32 = 400;
pub const SHOP_BARS_COST: u32 = 300;
pub const SHOP_HOLE_COST: u32 = 200;
pub const SHOP_WALL_COST: u32 = 200;
pub const BY_ORACLE: u32 = 0;
pub const BY_COOKIE: u32 = 1;
pub const BY_PAPER: u32 = 2;
pub const BY_OTHER: u32 = 9;
pub const SELL_NORMAL: u32 = 0;
pub const SELL_DELIBERATE: u32 = 1;
pub const SELL_DONTSELL: u32 = 2;
pub const CXN_NORMAL: u32 = 0;
pub const CXN_SINGULAR: u32 = 1;
pub const CXN_NO_PFX: u32 = 2;
pub const CXN_PFX_THE: u32 = 4;
pub const CXN_ARTICLE: u32 = 8;
pub const CXN_NOCORPSE: u32 = 16;
pub const LOOKHERE_PICKED_SOME: u32 = 1;
pub const LOOKHERE_SKIP_DFEATURE: u32 = 2;
pub const A_NONE: i32 = -128;
pub const A_CHAOTIC: i32 = -1;
pub const A_NEUTRAL: u32 = 0;
pub const A_LAWFUL: u32 = 1;
pub const A_COALIGNED: u32 = 1;
pub const A_OPALIGNED: i32 = -1;
pub const AM_NONE: u32 = 0;
pub const AM_CHAOTIC: u32 = 1;
pub const AM_NEUTRAL: u32 = 2;
pub const AM_LAWFUL: u32 = 4;
pub const AM_MASK: u32 = 7;
pub const AM_SHRINE: u32 = 8;
pub const AM_SPLEV_CO: u32 = 16;
pub const AM_SPLEV_NONCO: u32 = 32;
pub const AM_SPLEV_RANDOM: u32 = 64;
pub const MSA_NONE: u32 = 0;
pub const BR_STAIR: u32 = 0;
pub const BR_NO_END1: u32 = 1;
pub const BR_NO_END2: u32 = 2;
pub const BR_PORTAL: u32 = 3;
pub const MIGR_NOWHERE: i32 = -1;
pub const MIGR_RANDOM: u32 = 0;
pub const MIGR_APPROX_XY: u32 = 1;
pub const MIGR_EXACT_XY: u32 = 2;
pub const MIGR_STAIRS_UP: u32 = 3;
pub const MIGR_STAIRS_DOWN: u32 = 4;
pub const MIGR_LADDER_UP: u32 = 5;
pub const MIGR_LADDER_DOWN: u32 = 6;
pub const MIGR_SSTAIRS: u32 = 7;
pub const MIGR_PORTAL: u32 = 8;
pub const MIGR_WITH_HERO: u32 = 9;
pub const MIGR_NOBREAK: u32 = 1024;
pub const MIGR_NOSCATTER: u32 = 2048;
pub const MIGR_TO_SPECIES: u32 = 4096;
pub const MIGR_LEFTOVERS: u32 = 8192;
pub const VISITED: u32 = 1;
pub const LFILE_EXISTS: u32 = 4;
pub const DEF_ANT: u8 = 97u8;
pub const DEF_BLOB: u8 = 98u8;
pub const DEF_COCKATRICE: u8 = 99u8;
pub const DEF_DOG: u8 = 100u8;
pub const DEF_EYE: u8 = 101u8;
pub const DEF_FELINE: u8 = 102u8;
pub const DEF_GREMLIN: u8 = 103u8;
pub const DEF_HUMANOID: u8 = 104u8;
pub const DEF_IMP: u8 = 105u8;
pub const DEF_JELLY: u8 = 106u8;
pub const DEF_KOBOLD: u8 = 107u8;
pub const DEF_LEPRECHAUN: u8 = 108u8;
pub const DEF_MIMIC: u8 = 109u8;
pub const DEF_NYMPH: u8 = 110u8;
pub const DEF_ORC: u8 = 111u8;
pub const DEF_PIERCER: u8 = 112u8;
pub const DEF_QUADRUPED: u8 = 113u8;
pub const DEF_RODENT: u8 = 114u8;
pub const DEF_SPIDER: u8 = 115u8;
pub const DEF_TRAPPER: u8 = 116u8;
pub const DEF_UNICORN: u8 = 117u8;
pub const DEF_VORTEX: u8 = 118u8;
pub const DEF_WORM: u8 = 119u8;
pub const DEF_XAN: u8 = 120u8;
pub const DEF_LIGHT: u8 = 121u8;
pub const DEF_ZRUTY: u8 = 122u8;
pub const DEF_ANGEL: u8 = 65u8;
pub const DEF_BAT: u8 = 66u8;
pub const DEF_CENTAUR: u8 = 67u8;
pub const DEF_DRAGON: u8 = 68u8;
pub const DEF_ELEMENTAL: u8 = 69u8;
pub const DEF_FUNGUS: u8 = 70u8;
pub const DEF_GNOME: u8 = 71u8;
pub const DEF_GIANT: u8 = 72u8;
pub const DEF_JABBERWOCK: u8 = 74u8;
pub const DEF_KOP: u8 = 75u8;
pub const DEF_LICH: u8 = 76u8;
pub const DEF_MUMMY: u8 = 77u8;
pub const DEF_NAGA: u8 = 78u8;
pub const DEF_OGRE: u8 = 79u8;
pub const DEF_PUDDING: u8 = 80u8;
pub const DEF_QUANTMECH: u8 = 81u8;
pub const DEF_RUSTMONST: u8 = 82u8;
pub const DEF_SNAKE: u8 = 83u8;
pub const DEF_TROLL: u8 = 84u8;
pub const DEF_UMBER: u8 = 85u8;
pub const DEF_VAMPIRE: u8 = 86u8;
pub const DEF_WRAITH: u8 = 87u8;
pub const DEF_XORN: u8 = 88u8;
pub const DEF_YETI: u8 = 89u8;
pub const DEF_ZOMBIE: u8 = 90u8;
pub const DEF_HUMAN: u8 = 64u8;
pub const DEF_GHOST: u8 = 32u8;
pub const DEF_GOLEM: u8 = 39u8;
pub const DEF_DEMON: u8 = 38u8;
pub const DEF_EEL: u8 = 59u8;
pub const DEF_LIZARD: u8 = 58u8;
pub const DEF_INVISIBLE: u8 = 73u8;
pub const DEF_WORM_TAIL: u8 = 126u8;
pub const DEF_MIMIC_DEF: u8 = 93u8;
pub const D_SCATTER: u32 = 0;
pub const D_SHOP: u32 = 1;
pub const D_TEMPLE: u32 = 2;
pub const ANY_TYPE: i32 = -1;
pub const ANY_SHOP: i32 = -2;
pub const NO_ROOM: u32 = 0;
pub const SHARED: u32 = 1;
pub const SHARED_PLUS: u32 = 2;
pub const ROOMOFFSET: u32 = 3;
pub const FILL_NONE: u32 = 0;
pub const FILL_NORMAL: u32 = 1;
pub const FILL_LVFLAGS: u32 = 2;
pub const NODIR: u32 = 1;
pub const IMMEDIATE: u32 = 2;
pub const RAY: u32 = 3;
pub const PIERCE: u32 = 1;
pub const SLASH: u32 = 2;
pub const WHACK: u32 = 0;
pub const ILLOBJ_SYM: u8 = 93u8;
pub const WEAPON_SYM: u8 = 41u8;
pub const ARMOR_SYM: u8 = 91u8;
pub const RING_SYM: u8 = 61u8;
pub const AMULET_SYM: u8 = 34u8;
pub const TOOL_SYM: u8 = 40u8;
pub const FOOD_SYM: u8 = 37u8;
pub const POTION_SYM: u8 = 33u8;
pub const SCROLL_SYM: u8 = 63u8;
pub const SPBOOK_SYM: u8 = 43u8;
pub const WAND_SYM: u8 = 47u8;
pub const GOLD_SYM: u8 = 36u8;
pub const GEM_SYM: u8 = 42u8;
pub const ROCK_SYM: u8 = 96u8;
pub const BALL_SYM: u8 = 48u8;
pub const CHAIN_SYM: u8 = 95u8;
pub const VENOM_SYM: u8 = 46u8;
pub const W_ARM: u32 = 1;
pub const W_ARMC: u32 = 2;
pub const W_ARMH: u32 = 4;
pub const W_ARMS: u32 = 8;
pub const W_ARMG: u32 = 16;
pub const W_ARMF: u32 = 32;
pub const W_ARMU: u32 = 64;
pub const W_ARMOR: u32 = 127;
pub const W_WEP: u32 = 256;
pub const W_QUIVER: u32 = 512;
pub const W_SWAPWEP: u32 = 1024;
pub const W_WEAPONS: u32 = 1792;
pub const W_ART: u32 = 4096;
pub const W_ARTI: u32 = 8192;
pub const W_AMUL: u32 = 65536;
pub const W_RINGL: u32 = 131072;
pub const W_RINGR: u32 = 262144;
pub const W_RING: u32 = 393216;
pub const W_TOOL: u32 = 524288;
pub const W_ACCESSORY: u32 = 983040;
pub const W_SADDLE: u32 = 1048576;
pub const W_BALL: u32 = 2097152;
pub const W_CHAIN: u32 = 4194304;
pub const TIMEOUT: u32 = 16777215;
pub const FROMEXPER: u32 = 16777216;
pub const FROMRACE: u32 = 33554432;
pub const FROMOUTSIDE: u32 = 67108864;
pub const INTRINSIC: u32 = 117440512;
pub const FROMFORM: u32 = 268435456;
pub const I_SPECIAL: u32 = 536870912;
pub const LEFT_RING: u32 = 131072;
pub const RIGHT_RING: u32 = 262144;
pub const LEFT_SIDE: u32 = 131072;
pub const RIGHT_SIDE: u32 = 262144;
pub const BOTH_SIDES: u32 = 393216;
pub const WORN_ARMOR: u32 = 1;
pub const WORN_CLOAK: u32 = 2;
pub const WORN_HELMET: u32 = 4;
pub const WORN_SHIELD: u32 = 8;
pub const WORN_GLOVES: u32 = 16;
pub const WORN_BOOTS: u32 = 32;
pub const WORN_AMUL: u32 = 65536;
pub const WORN_BLINDF: u32 = 524288;
pub const WORN_SHIRT: u32 = 64;
pub const NATTK: u32 = 6;
pub const WT_HUMAN: u32 = 1450;
pub const AT_ANY: i32 = -1;
pub const AT_NONE: u32 = 0;
pub const AT_CLAW: u32 = 1;
pub const AT_BITE: u32 = 2;
pub const AT_KICK: u32 = 3;
pub const AT_BUTT: u32 = 4;
pub const AT_TUCH: u32 = 5;
pub const AT_STNG: u32 = 6;
pub const AT_HUGS: u32 = 7;
pub const AT_SPIT: u32 = 10;
pub const AT_ENGL: u32 = 11;
pub const AT_BREA: u32 = 12;
pub const AT_EXPL: u32 = 13;
pub const AT_BOOM: u32 = 14;
pub const AT_GAZE: u32 = 15;
pub const AT_TENT: u32 = 16;
pub const AT_WEAP: u32 = 254;
pub const AT_MAGC: u32 = 255;
pub const AD_ANY: i32 = -1;
pub const AD_PHYS: u32 = 0;
pub const AD_MAGM: u32 = 1;
pub const AD_FIRE: u32 = 2;
pub const AD_COLD: u32 = 3;
pub const AD_SLEE: u32 = 4;
pub const AD_DISN: u32 = 5;
pub const AD_ELEC: u32 = 6;
pub const AD_DRST: u32 = 7;
pub const AD_ACID: u32 = 8;
pub const AD_SPC1: u32 = 9;
pub const AD_SPC2: u32 = 10;
pub const AD_BLND: u32 = 11;
pub const AD_STUN: u32 = 12;
pub const AD_SLOW: u32 = 13;
pub const AD_PLYS: u32 = 14;
pub const AD_DRLI: u32 = 15;
pub const AD_DREN: u32 = 16;
pub const AD_LEGS: u32 = 17;
pub const AD_STON: u32 = 18;
pub const AD_STCK: u32 = 19;
pub const AD_SGLD: u32 = 20;
pub const AD_SITM: u32 = 21;
pub const AD_SEDU: u32 = 22;
pub const AD_TLPT: u32 = 23;
pub const AD_RUST: u32 = 24;
pub const AD_CONF: u32 = 25;
pub const AD_DGST: u32 = 26;
pub const AD_HEAL: u32 = 27;
pub const AD_WRAP: u32 = 28;
pub const AD_WERE: u32 = 29;
pub const AD_DRDX: u32 = 30;
pub const AD_DRCO: u32 = 31;
pub const AD_DRIN: u32 = 32;
pub const AD_DISE: u32 = 33;
pub const AD_DCAY: u32 = 34;
pub const AD_SSEX: u32 = 35;
pub const AD_HALU: u32 = 36;
pub const AD_DETH: u32 = 37;
pub const AD_PEST: u32 = 38;
pub const AD_FAMN: u32 = 39;
pub const AD_SLIM: u32 = 40;
pub const AD_ENCH: u32 = 41;
pub const AD_CORR: u32 = 42;
pub const AD_POLY: u32 = 43;
pub const AD_CLRC: u32 = 240;
pub const AD_SPEL: u32 = 241;
pub const AD_RBRE: u32 = 242;
pub const AD_SAMU: u32 = 252;
pub const AD_CURS: u32 = 253;
pub const MM_MISS: u32 = 0;
pub const MM_HIT: u32 = 1;
pub const MM_DEF_DIED: u32 = 2;
pub const MM_AGR_DIED: u32 = 4;
pub const MM_AGR_DONE: u32 = 8;
pub const MR_FIRE: u32 = 1;
pub const MR_COLD: u32 = 2;
pub const MR_SLEEP: u32 = 4;
pub const MR_DISINT: u32 = 8;
pub const MR_ELEC: u32 = 16;
pub const MR_POISON: u32 = 32;
pub const MR_ACID: u32 = 64;
pub const MR_STONE: u32 = 128;
pub const MR2_SEE_INVIS: u32 = 256;
pub const MR2_LEVITATE: u32 = 512;
pub const MR2_WATERWALK: u32 = 1024;
pub const MR2_MAGBREATH: u32 = 2048;
pub const MR2_DISPLACED: u32 = 4096;
pub const MR2_STRENGTH: u32 = 8192;
pub const MR2_FUMBLING: u32 = 16384;
pub const M1_FLY: u32 = 1;
pub const M1_SWIM: u32 = 2;
pub const M1_AMORPHOUS: u32 = 4;
pub const M1_WALLWALK: u32 = 8;
pub const M1_CLING: u32 = 16;
pub const M1_TUNNEL: u32 = 32;
pub const M1_NEEDPICK: u32 = 64;
pub const M1_CONCEAL: u32 = 128;
pub const M1_HIDE: u32 = 256;
pub const M1_AMPHIBIOUS: u32 = 512;
pub const M1_BREATHLESS: u32 = 1024;
pub const M1_NOTAKE: u32 = 2048;
pub const M1_NOEYES: u32 = 4096;
pub const M1_NOHANDS: u32 = 8192;
pub const M1_NOLIMBS: u32 = 24576;
pub const M1_NOHEAD: u32 = 32768;
pub const M1_MINDLESS: u32 = 65536;
pub const M1_HUMANOID: u32 = 131072;
pub const M1_ANIMAL: u32 = 262144;
pub const M1_SLITHY: u32 = 524288;
pub const M1_UNSOLID: u32 = 1048576;
pub const M1_THICK_HIDE: u32 = 2097152;
pub const M1_OVIPAROUS: u32 = 4194304;
pub const M1_REGEN: u32 = 8388608;
pub const M1_SEE_INVIS: u32 = 16777216;
pub const M1_TPORT: u32 = 33554432;
pub const M1_TPORT_CNTRL: u32 = 67108864;
pub const M1_ACID: u32 = 134217728;
pub const M1_POIS: u32 = 268435456;
pub const M1_CARNIVORE: u32 = 536870912;
pub const M1_HERBIVORE: u32 = 1073741824;
pub const M1_OMNIVORE: u32 = 1610612736;
pub const M1_METALLIVORE: u32 = 2147483648;
pub const M2_NOPOLY: u32 = 1;
pub const M2_UNDEAD: u32 = 2;
pub const M2_WERE: u32 = 4;
pub const M2_HUMAN: u32 = 8;
pub const M2_ELF: u32 = 16;
pub const M2_DWARF: u32 = 32;
pub const M2_GNOME: u32 = 64;
pub const M2_ORC: u32 = 128;
pub const M2_DEMON: u32 = 256;
pub const M2_MERC: u32 = 512;
pub const M2_LORD: u32 = 1024;
pub const M2_PRINCE: u32 = 2048;
pub const M2_MINION: u32 = 4096;
pub const M2_GIANT: u32 = 8192;
pub const M2_SHAPESHIFTER: u32 = 16384;
pub const M2_MALE: u32 = 65536;
pub const M2_FEMALE: u32 = 131072;
pub const M2_NEUTER: u32 = 262144;
pub const M2_PNAME: u32 = 524288;
pub const M2_HOSTILE: u32 = 1048576;
pub const M2_PEACEFUL: u32 = 2097152;
pub const M2_DOMESTIC: u32 = 4194304;
pub const M2_WANDER: u32 = 8388608;
pub const M2_STALK: u32 = 16777216;
pub const M2_NASTY: u32 = 33554432;
pub const M2_STRONG: u32 = 67108864;
pub const M2_ROCKTHROW: u32 = 134217728;
pub const M2_GREEDY: u32 = 268435456;
pub const M2_JEWELS: u32 = 536870912;
pub const M2_COLLECT: u32 = 1073741824;
pub const M2_MAGIC: u32 = 2147483648;
pub const M3_WANTSAMUL: u32 = 1;
pub const M3_WANTSBELL: u32 = 2;
pub const M3_WANTSBOOK: u32 = 4;
pub const M3_WANTSCAND: u32 = 8;
pub const M3_WANTSARTI: u32 = 16;
pub const M3_WANTSALL: u32 = 31;
pub const M3_WAITFORU: u32 = 64;
pub const M3_CLOSE: u32 = 128;
pub const M3_COVETOUS: u32 = 31;
pub const M3_WAITMASK: u32 = 192;
pub const M3_INFRAVISION: u32 = 256;
pub const M3_INFRAVISIBLE: u32 = 512;
pub const M3_DISPLACES: u32 = 1024;
pub const MZ_TINY: u32 = 0;
pub const MZ_SMALL: u32 = 1;
pub const MZ_MEDIUM: u32 = 2;
pub const MZ_HUMAN: u32 = 2;
pub const MZ_LARGE: u32 = 3;
pub const MZ_HUGE: u32 = 4;
pub const MZ_GIGANTIC: u32 = 7;
pub const MH_HUMAN: u32 = 8;
pub const MH_ELF: u32 = 16;
pub const MH_DWARF: u32 = 32;
pub const MH_GNOME: u32 = 64;
pub const MH_ORC: u32 = 128;
pub const G_UNIQ: u32 = 4096;
pub const G_NOHELL: u32 = 2048;
pub const G_HELL: u32 = 1024;
pub const G_NOGEN: u32 = 512;
pub const G_SGROUP: u32 = 128;
pub const G_LGROUP: u32 = 64;
pub const G_GENO: u32 = 32;
pub const G_NOCORPSE: u32 = 16;
pub const G_FREQ: u32 = 7;
pub const G_IGNORE: u32 = 32768;
pub const G_KNOWN: u32 = 4;
pub const G_GENOD: u32 = 2;
pub const G_EXTINCT: u32 = 1;
pub const G_GONE: u32 = 3;
pub const MV_KNOWS_EGG: u32 = 8;
pub const VERY_SLOW: u32 = 3;
pub const SLOW_SPEED: u32 = 9;
pub const NORMAL_SPEED: u32 = 12;
pub const FAST_SPEED: u32 = 15;
pub const VERY_FAST: u32 = 24;
pub const NON_PM: i32 = -1;
pub const LOW_PM: u32 = 0;
pub const PICK_NONE: u32 = 0;
pub const PICK_ONE: u32 = 1;
pub const PICK_ANY: u32 = 2;
pub const NHW_MESSAGE: u32 = 1;
pub const NHW_STATUS: u32 = 2;
pub const NHW_MAP: u32 = 3;
pub const NHW_MENU: u32 = 4;
pub const NHW_TEXT: u32 = 5;
pub const ATR_NONE: u32 = 0;
pub const ATR_BOLD: u32 = 1;
pub const ATR_DIM: u32 = 2;
pub const ATR_ULINE: u32 = 4;
pub const ATR_BLINK: u32 = 5;
pub const ATR_INVERSE: u32 = 7;
pub const ATR_URGENT: u32 = 16;
pub const ATR_NOHISTORY: u32 = 32;
pub const CLICK_1: u32 = 1;
pub const CLICK_2: u32 = 2;
pub const MENU_FIRST_PAGE: u8 = 94u8;
pub const MENU_LAST_PAGE: u8 = 124u8;
pub const MENU_NEXT_PAGE: u8 = 62u8;
pub const MENU_PREVIOUS_PAGE: u8 = 60u8;
pub const MENU_SHIFT_RIGHT: u8 = 125u8;
pub const MENU_SHIFT_LEFT: u8 = 123u8;
pub const MENU_SELECT_ALL: u8 = 46u8;
pub const MENU_UNSELECT_ALL: u8 = 45u8;
pub const MENU_INVERT_ALL: u8 = 64u8;
pub const MENU_SELECT_PAGE: u8 = 44u8;
pub const MENU_UNSELECT_PAGE: u8 = 92u8;
pub const MENU_INVERT_PAGE: u8 = 126u8;
pub const MENU_SEARCH: u8 = 58u8;
pub const MENU_ITEMFLAGS_NONE: u32 = 0;
pub const MENU_ITEMFLAGS_SELECTED: u32 = 1;
pub const MENU_ITEMFLAGS_SKIPINVERT: u32 = 2;
pub const MENU_BEHAVE_STANDARD: u32 = 0;
pub const CONTEXTVERBSZ: u32 = 30;
pub const MAXEXPCHARS: u32 = 9;
pub const SYM_CONTROL: u32 = 1;
pub const SYM_PCHAR: u32 = 2;
pub const SYM_OC: u32 = 3;
pub const SYM_MON: u32 = 4;
pub const SYM_OTH: u32 = 5;
pub const SYM_NOTHING: u32 = 0;
pub const SYM_UNEXPLORED: u32 = 1;
pub const SYM_BOULDER: u32 = 2;
pub const SYM_INVISIBLE: u32 = 3;
pub const SYM_PET_OVERRIDE: u32 = 4;
pub const SYM_HERO_OVERRIDE: u32 = 5;
pub const MAXOTHER: u32 = 6;
pub const DEFAULT_GRAPHICS: u32 = 0;
pub const PRIMARY: u32 = 0;
pub const ROGUESET: u32 = 1;
pub const NUM_GRAPHICS: u32 = 2;
pub const H_UNK: u32 = 0;
pub const H_IBM: u32 = 1;
pub const H_DEC: u32 = 2;
pub const H_CURS: u32 = 3;
pub const H_MAC: u32 = 4;
pub const WARNCOUNT: u32 = 6;
pub const D_NODOOR: u32 = 0;
pub const D_BROKEN: u32 = 1;
pub const D_ISOPEN: u32 = 2;
pub const D_CLOSED: u32 = 4;
pub const D_LOCKED: u32 = 8;
pub const D_TRAPPED: u32 = 16;
pub const D_SECRET: u32 = 32;
pub const T_LOOTED: u32 = 1;
pub const TREE_LOOTED: u32 = 1;
pub const TREE_SWARM: u32 = 2;
pub const F_LOOTED: u32 = 1;
pub const F_WARNED: u32 = 2;
pub const D_WARNED: u32 = 16;
pub const S_LPUDDING: u32 = 1;
pub const S_LDWASHER: u32 = 2;
pub const S_LRING: u32 = 4;
pub const DB_NORTH: u32 = 0;
pub const DB_SOUTH: u32 = 1;
pub const DB_EAST: u32 = 2;
pub const DB_WEST: u32 = 3;
pub const DB_DIR: u32 = 3;
pub const DB_MOAT: u32 = 0;
pub const DB_LAVA: u32 = 4;
pub const DB_ICE: u32 = 8;
pub const DB_FLOOR: u32 = 16;
pub const DB_UNDER: u32 = 28;
pub const WM_MASK: u32 = 7;
pub const W_NONDIGGABLE: u32 = 8;
pub const W_NONPASSWALL: u32 = 16;
pub const LA_UP: u32 = 1;
pub const LA_DOWN: u32 = 2;
pub const ICED_POOL: u32 = 8;
pub const ICED_MOAT: u32 = 16;
pub const WM_W_LEFT: u32 = 1;
pub const WM_W_RIGHT: u32 = 2;
pub const WM_W_TOP: u32 = 1;
pub const WM_W_BOTTOM: u32 = 2;
pub const WM_C_OUTER: u32 = 1;
pub const WM_C_INNER: u32 = 2;
pub const WM_T_LONG: u32 = 1;
pub const WM_T_BL: u32 = 2;
pub const WM_T_BR: u32 = 3;
pub const WM_X_TL: u32 = 1;
pub const WM_X_TR: u32 = 2;
pub const WM_X_BL: u32 = 3;
pub const WM_X_BR: u32 = 4;
pub const WM_X_TLBR: u32 = 5;
pub const WM_X_BLTR: u32 = 6;
pub const SV0: u32 = 1;
pub const SV1: u32 = 2;
pub const SV2: u32 = 4;
pub const SV3: u32 = 8;
pub const SV4: u32 = 16;
pub const SV5: u32 = 32;
pub const SV6: u32 = 64;
pub const SV7: u32 = 128;
pub const SVALL: u32 = 255;
pub const MAXCO: u32 = 200;
pub const BL_MASK_BAREH: u32 = 1;
pub const BL_MASK_BLIND: u32 = 2;
pub const BL_MASK_BUSY: u32 = 4;
pub const BL_MASK_CONF: u32 = 8;
pub const BL_MASK_DEAF: u32 = 16;
pub const BL_MASK_ELF_IRON: u32 = 32;
pub const BL_MASK_FLY: u32 = 64;
pub const BL_MASK_FOODPOIS: u32 = 128;
pub const BL_MASK_GLOWHANDS: u32 = 256;
pub const BL_MASK_GRAB: u32 = 512;
pub const BL_MASK_HALLU: u32 = 1024;
pub const BL_MASK_HELD: u32 = 2048;
pub const BL_MASK_ICY: u32 = 4096;
pub const BL_MASK_INLAVA: u32 = 8192;
pub const BL_MASK_LEV: u32 = 16384;
pub const BL_MASK_PARLYZ: u32 = 32768;
pub const BL_MASK_RIDE: u32 = 65536;
pub const BL_MASK_SLEEPING: u32 = 131072;
pub const BL_MASK_SLIME: u32 = 262144;
pub const BL_MASK_SLIPPERY: u32 = 524288;
pub const BL_MASK_STONE: u32 = 1048576;
pub const BL_MASK_STRNGL: u32 = 2097152;
pub const BL_MASK_STUN: u32 = 4194304;
pub const BL_MASK_SUBMERGED: u32 = 8388608;
pub const BL_MASK_TERMILL: u32 = 16777216;
pub const BL_MASK_TETHERED: u32 = 33554432;
pub const BL_MASK_TRAPPED: u32 = 67108864;
pub const BL_MASK_UNCONSC: u32 = 134217728;
pub const BL_MASK_WOUNDEDL: u32 = 268435456;
pub const BL_MASK_HOLDING: u32 = 536870912;
pub const BL_MASK_BITS: u32 = 30;
pub const BEFORE: u32 = 0;
pub const NOW: u32 = 1;
pub const BL_HILITE_NONE: i32 = -1;
pub const BL_HILITE_INVERSE: i32 = -2;
pub const BL_HILITE_BOLD: i32 = -3;
pub const BL_TH_NONE: u32 = 0;
pub const BL_TH_VAL_PERCENTAGE: u32 = 100;
pub const BL_TH_VAL_ABSOLUTE: u32 = 101;
pub const BL_TH_UPDOWN: u32 = 102;
pub const BL_TH_CONDITION: u32 = 103;
pub const BL_TH_TEXTMATCH: u32 = 104;
pub const BL_TH_ALWAYS_HILITE: u32 = 105;
pub const MAXVALWIDTH: u32 = 80;
pub const SYM_OFF_P: u32 = 0;
pub const REG_HERO_INSIDE: u32 = 1;
pub const REG_NOT_HEROS: u32 = 2;
pub const MONST_INC: u32 = 5;
pub const WINTYPELEN: u32 = 16;
pub const MAX_QUEST_TRIES: u32 = 7;
pub const MIN_QUEST_ALIGN: u32 = 20;
pub const MIN_QUEST_LEVEL: u32 = 14;
pub const MAXLINFO: u32 = 512;
pub const UTD_CHECKSIZES: u32 = 1;
pub const UTD_CHECKFIELDCOUNTS: u32 = 2;
pub const UTD_SKIP_SANITY1: u32 = 4;
pub const UTD_SKIP_SAVEFILEINFO: u32 = 8;
pub const NHF_LEVELFILE: u32 = 1;
pub const NHF_SAVEFILE: u32 = 2;
pub const NHF_BONESFILE: u32 = 3;
pub const READING: u32 = 0;
pub const COUNTING: u32 = 1;
pub const WRITING: u32 = 2;
pub const FREEING: u32 = 4;
pub const MAX_BMASK: u32 = 4;
pub const KILLED_BY_AN: u32 = 0;
pub const KILLED_BY: u32 = 1;
pub const NO_KILLER_PREFIX: u32 = 2;
pub const NO_SPELL: u32 = 0;
pub const MAX_SPELL_STUDY: u32 = 3;
pub const ALL_MAP: u32 = 1;
pub const ALL_SPELLS: u32 = 2;
pub const CLR_BLACK: u32 = 0;
pub const CLR_RED: u32 = 1;
pub const CLR_GREEN: u32 = 2;
pub const CLR_BROWN: u32 = 3;
pub const CLR_BLUE: u32 = 4;
pub const CLR_MAGENTA: u32 = 5;
pub const CLR_CYAN: u32 = 6;
pub const CLR_GRAY: u32 = 7;
pub const NO_COLOR: u32 = 8;
pub const CLR_ORANGE: u32 = 9;
pub const CLR_BRIGHT_GREEN: u32 = 10;
pub const CLR_YELLOW: u32 = 11;
pub const CLR_BRIGHT_BLUE: u32 = 12;
pub const CLR_BRIGHT_MAGENTA: u32 = 13;
pub const CLR_BRIGHT_CYAN: u32 = 14;
pub const CLR_WHITE: u32 = 15;
pub const CLR_MAX: u32 = 16;
pub const BRIGHT: u32 = 8;
pub const HI_OBJ: u32 = 5;
pub const HI_METAL: u32 = 6;
pub const HI_COPPER: u32 = 11;
pub const HI_SILVER: u32 = 7;
pub const HI_GOLD: u32 = 11;
pub const HI_LEATHER: u32 = 3;
pub const HI_CLOTH: u32 = 3;
pub const HI_ORGANIC: u32 = 3;
pub const HI_WOOD: u32 = 3;
pub const HI_PAPER: u32 = 15;
pub const HI_GLASS: u32 = 14;
pub const HI_MINERAL: u32 = 7;
pub const DRAGON_SILVER: u32 = 14;
pub const HI_ZAP: u32 = 12;
pub const SPE_LIM: u32 = 99;
pub const STATUE_HISTORIC: u32 = 1;
pub const STATUE_MALE: u32 = 2;
pub const STATUE_FEMALE: u32 = 4;
pub const OBJ_FREE: u32 = 0;
pub const OBJ_FLOOR: u32 = 1;
pub const OBJ_CONTAINED: u32 = 2;
pub const OBJ_INVENT: u32 = 3;
pub const OBJ_MINVENT: u32 = 4;
pub const OBJ_MIGRATING: u32 = 5;
pub const OBJ_BURIED: u32 = 6;
pub const OBJ_ONBILL: u32 = 7;
pub const OBJ_LUAFREE: u32 = 8;
pub const NOBJ_STATES: u32 = 9;
pub const MAX_ERODE: u32 = 3;
pub const MAX_EGG_HATCH_TIME: u32 = 200;
pub const MAX_OIL_IN_FLASK: u32 = 400;
pub const CONTAINED_TOO: u32 = 1;
pub const BURIED_TOO: u32 = 2;
pub const ERODE_BURN: u32 = 0;
pub const ERODE_RUST: u32 = 1;
pub const ERODE_ROT: u32 = 2;
pub const ERODE_CORRODE: u32 = 3;
pub const EF_NONE: u32 = 0;
pub const EF_GREASE: u32 = 1;
pub const EF_DESTROY: u32 = 2;
pub const EF_VERBOSE: u32 = 4;
pub const EF_PAY: u32 = 8;
pub const ER_NOTHING: u32 = 0;
pub const ER_GREASED: u32 = 1;
pub const ER_DAMAGED: u32 = 2;
pub const ER_DESTROYED: u32 = 3;
pub const POTHIT_HERO_BASH: u32 = 0;
pub const POTHIT_HERO_THROW: u32 = 1;
pub const POTHIT_MONST_THROW: u32 = 2;
pub const POTHIT_OTHER_THROW: u32 = 3;
pub const DUST: u32 = 1;
pub const ENGRAVE: u32 = 2;
pub const BURN: u32 = 3;
pub const MARK: u32 = 4;
pub const ENGR_BLOOD: u32 = 5;
pub const HEADSTONE: u32 = 6;
pub const N_ENGRAVE: u32 = 6;
pub const FCSIZ: u32 = 101;
pub const GD_EATGOLD: u32 = 1;
pub const GD_DESTROYGOLD: u32 = 2;
pub const REPAIR_DELAY: u32 = 5;
pub const BILLSZ: u32 = 200;
pub const MINV_PICKMASK: u32 = 3;
pub const MINV_NOLET: u32 = 4;
pub const MINV_ALL: u32 = 8;
pub const MON_FLOOR: u32 = 0;
pub const MON_OFFMAP: u32 = 1;
pub const MON_DETACH: u32 = 2;
pub const MON_MIGRATING: u32 = 4;
pub const MON_LIMBO: u32 = 8;
pub const MON_BUBBLEMOVE: u32 = 16;
pub const MON_ENDGAME_FREE: u32 = 32;
pub const MON_ENDGAME_MIGR: u32 = 64;
pub const MON_OBLITERATE: u32 = 128;
pub const MSTATE_MASK: u32 = 255;
pub const M_AP_TYPMASK: u32 = 7;
pub const M_AP_F_DKNOWN: u32 = 8;
pub const MTSZ: u32 = 4;
pub const MAX_NUM_WORMS: u32 = 32;
pub const STRAT_APPEARMSG: u32 = 2147483648;
pub const STRAT_ARRIVE: u32 = 1073741824;
pub const STRAT_WAITFORU: u32 = 536870912;
pub const STRAT_CLOSE: u32 = 268435456;
pub const STRAT_WAITMASK: u32 = 805306368;
pub const STRAT_HEAL: u32 = 134217728;
pub const STRAT_GROUND: u32 = 67108864;
pub const STRAT_MONSTR: u32 = 33554432;
pub const STRAT_PLAYER: u32 = 16777216;
pub const STRAT_NONE: u32 = 0;
pub const STRAT_STRATMASK: u32 = 251658240;
pub const STRAT_XMASK: u32 = 16711680;
pub const STRAT_YMASK: u32 = 65280;
pub const STRAT_GOAL: u32 = 255;
pub const MSLOW: u32 = 1;
pub const MFAST: u32 = 2;
pub const P_SKILL_LIMIT: u32 = 60;
pub const ROLE_RACEMASK: u32 = 4088;
pub const ROLE_GENDMASK: u32 = 61440;
pub const ROLE_MALE: u32 = 4096;
pub const ROLE_FEMALE: u32 = 8192;
pub const ROLE_NEUTER: u32 = 16384;
pub const ROLE_ALIGNMASK: u32 = 7;
pub const ROLE_LAWFUL: u32 = 4;
pub const ROLE_NEUTRAL: u32 = 2;
pub const ROLE_CHAOTIC: u32 = 1;
pub const ROLE_NONE: i32 = -1;
pub const ROLE_RANDOM: i32 = -2;
pub const ROLE_GENDERS: u32 = 2;
pub const PRONOUN_NORMAL: u32 = 0;
pub const PRONOUN_NO_IT: u32 = 1;
pub const PRONOUN_HALLU: u32 = 2;
pub const ROLE_ALIGNS: u32 = 3;
pub const SICK_VOMITABLE: u32 = 1;
pub const SICK_NONVOMITABLE: u32 = 2;
pub const SICK_ALL: u32 = 3;
pub const BC_BALL: u32 = 1;
pub const BC_CHAIN: u32 = 2;
pub const CONVERT: u32 = 2;
pub const A_ORIGINAL: u32 = 1;
pub const A_CURRENT: u32 = 0;
pub const LUCKADD: u32 = 3;
pub const LUCKMAX: u32 = 10;
pub const LUCKMIN: i32 = -10;
pub const AC_MAX: u32 = 99;
pub const STRANGE_OBJECT: u32 = 0;
pub const ARROW: u32 = 1;
pub const ELVEN_ARROW: u32 = 2;
pub const ORCISH_ARROW: u32 = 3;
pub const SILVER_ARROW: u32 = 4;
pub const YA: u32 = 5;
pub const CROSSBOW_BOLT: u32 = 6;
pub const DART: u32 = 7;
pub const SHURIKEN: u32 = 8;
pub const BOOMERANG: u32 = 9;
pub const SPEAR: u32 = 10;
pub const ELVEN_SPEAR: u32 = 11;
pub const ORCISH_SPEAR: u32 = 12;
pub const DWARVISH_SPEAR: u32 = 13;
pub const SILVER_SPEAR: u32 = 14;
pub const JAVELIN: u32 = 15;
pub const TRIDENT: u32 = 16;
pub const DAGGER: u32 = 17;
pub const ELVEN_DAGGER: u32 = 18;
pub const ORCISH_DAGGER: u32 = 19;
pub const SILVER_DAGGER: u32 = 20;
pub const ATHAME: u32 = 21;
pub const SCALPEL: u32 = 22;
pub const KNIFE: u32 = 23;
pub const STILETTO: u32 = 24;
pub const WORM_TOOTH: u32 = 25;
pub const CRYSKNIFE: u32 = 26;
pub const AXE: u32 = 27;
pub const BATTLE_AXE: u32 = 28;
pub const SHORT_SWORD: u32 = 29;
pub const ELVEN_SHORT_SWORD: u32 = 30;
pub const ORCISH_SHORT_SWORD: u32 = 31;
pub const DWARVISH_SHORT_SWORD: u32 = 32;
pub const SCIMITAR: u32 = 33;
pub const SILVER_SABER: u32 = 34;
pub const BROADSWORD: u32 = 35;
pub const ELVEN_BROADSWORD: u32 = 36;
pub const LONG_SWORD: u32 = 37;
pub const TWO_HANDED_SWORD: u32 = 38;
pub const KATANA: u32 = 39;
pub const TSURUGI: u32 = 40;
pub const RUNESWORD: u32 = 41;
pub const PARTISAN: u32 = 42;
pub const RANSEUR: u32 = 43;
pub const SPETUM: u32 = 44;
pub const GLAIVE: u32 = 45;
pub const LANCE: u32 = 46;
pub const HALBERD: u32 = 47;
pub const BARDICHE: u32 = 48;
pub const VOULGE: u32 = 49;
pub const DWARVISH_MATTOCK: u32 = 50;
pub const FAUCHARD: u32 = 51;
pub const GUISARME: u32 = 52;
pub const BILL_GUISARME: u32 = 53;
pub const LUCERN_HAMMER: u32 = 54;
pub const BEC_DE_CORBIN: u32 = 55;
pub const MACE: u32 = 56;
pub const MORNING_STAR: u32 = 57;
pub const WAR_HAMMER: u32 = 58;
pub const CLUB: u32 = 59;
pub const RUBBER_HOSE: u32 = 60;
pub const QUARTERSTAFF: u32 = 61;
pub const AKLYS: u32 = 62;
pub const FLAIL: u32 = 63;
pub const BULLWHIP: u32 = 64;
pub const BOW: u32 = 65;
pub const ELVEN_BOW: u32 = 66;
pub const ORCISH_BOW: u32 = 67;
pub const YUMI: u32 = 68;
pub const SLING: u32 = 69;
pub const CROSSBOW: u32 = 70;
pub const ELVEN_LEATHER_HELM: u32 = 71;
pub const ORCISH_HELM: u32 = 72;
pub const DWARVISH_IRON_HELM: u32 = 73;
pub const FEDORA: u32 = 74;
pub const CORNUTHAUM: u32 = 75;
pub const DUNCE_CAP: u32 = 76;
pub const DENTED_POT: u32 = 77;
pub const HELMET: u32 = 78;
pub const HELM_OF_BRILLIANCE: u32 = 79;
pub const HELM_OF_OPPOSITE_ALIGNMENT: u32 = 80;
pub const HELM_OF_TELEPATHY: u32 = 81;
pub const GRAY_DRAGON_SCALE_MAIL: u32 = 82;
pub const SILVER_DRAGON_SCALE_MAIL: u32 = 83;
pub const RED_DRAGON_SCALE_MAIL: u32 = 84;
pub const WHITE_DRAGON_SCALE_MAIL: u32 = 85;
pub const ORANGE_DRAGON_SCALE_MAIL: u32 = 86;
pub const BLACK_DRAGON_SCALE_MAIL: u32 = 87;
pub const BLUE_DRAGON_SCALE_MAIL: u32 = 88;
pub const GREEN_DRAGON_SCALE_MAIL: u32 = 89;
pub const YELLOW_DRAGON_SCALE_MAIL: u32 = 90;
pub const GRAY_DRAGON_SCALES: u32 = 91;
pub const SILVER_DRAGON_SCALES: u32 = 92;
pub const RED_DRAGON_SCALES: u32 = 93;
pub const WHITE_DRAGON_SCALES: u32 = 94;
pub const ORANGE_DRAGON_SCALES: u32 = 95;
pub const BLACK_DRAGON_SCALES: u32 = 96;
pub const BLUE_DRAGON_SCALES: u32 = 97;
pub const GREEN_DRAGON_SCALES: u32 = 98;
pub const YELLOW_DRAGON_SCALES: u32 = 99;
pub const PLATE_MAIL: u32 = 100;
pub const CRYSTAL_PLATE_MAIL: u32 = 101;
pub const BRONZE_PLATE_MAIL: u32 = 102;
pub const SPLINT_MAIL: u32 = 103;
pub const BANDED_MAIL: u32 = 104;
pub const DWARVISH_MITHRIL_COAT: u32 = 105;
pub const ELVEN_MITHRIL_COAT: u32 = 106;
pub const CHAIN_MAIL: u32 = 107;
pub const ORCISH_CHAIN_MAIL: u32 = 108;
pub const SCALE_MAIL: u32 = 109;
pub const STUDDED_LEATHER_ARMOR: u32 = 110;
pub const RING_MAIL: u32 = 111;
pub const ORCISH_RING_MAIL: u32 = 112;
pub const LEATHER_ARMOR: u32 = 113;
pub const LEATHER_JACKET: u32 = 114;
pub const HAWAIIAN_SHIRT: u32 = 115;
pub const T_SHIRT: u32 = 116;
pub const MUMMY_WRAPPING: u32 = 117;
pub const ELVEN_CLOAK: u32 = 118;
pub const ORCISH_CLOAK: u32 = 119;
pub const DWARVISH_CLOAK: u32 = 120;
pub const OILSKIN_CLOAK: u32 = 121;
pub const ROBE: u32 = 122;
pub const ALCHEMY_SMOCK: u32 = 123;
pub const LEATHER_CLOAK: u32 = 124;
pub const CLOAK_OF_PROTECTION: u32 = 125;
pub const CLOAK_OF_INVISIBILITY: u32 = 126;
pub const CLOAK_OF_MAGIC_RESISTANCE: u32 = 127;
pub const CLOAK_OF_DISPLACEMENT: u32 = 128;
pub const SMALL_SHIELD: u32 = 129;
pub const ELVEN_SHIELD: u32 = 130;
pub const URUK_HAI_SHIELD: u32 = 131;
pub const ORCISH_SHIELD: u32 = 132;
pub const LARGE_SHIELD: u32 = 133;
pub const DWARVISH_ROUNDSHIELD: u32 = 134;
pub const SHIELD_OF_REFLECTION: u32 = 135;
pub const LEATHER_GLOVES: u32 = 136;
pub const GAUNTLETS_OF_FUMBLING: u32 = 137;
pub const GAUNTLETS_OF_POWER: u32 = 138;
pub const GAUNTLETS_OF_DEXTERITY: u32 = 139;
pub const LOW_BOOTS: u32 = 140;
pub const IRON_SHOES: u32 = 141;
pub const HIGH_BOOTS: u32 = 142;
pub const SPEED_BOOTS: u32 = 143;
pub const WATER_WALKING_BOOTS: u32 = 144;
pub const JUMPING_BOOTS: u32 = 145;
pub const ELVEN_BOOTS: u32 = 146;
pub const KICKING_BOOTS: u32 = 147;
pub const FUMBLE_BOOTS: u32 = 148;
pub const LEVITATION_BOOTS: u32 = 149;
pub const RIN_ADORNMENT: u32 = 150;
pub const RIN_GAIN_STRENGTH: u32 = 151;
pub const RIN_GAIN_CONSTITUTION: u32 = 152;
pub const RIN_INCREASE_ACCURACY: u32 = 153;
pub const RIN_INCREASE_DAMAGE: u32 = 154;
pub const RIN_PROTECTION: u32 = 155;
pub const RIN_REGENERATION: u32 = 156;
pub const RIN_SEARCHING: u32 = 157;
pub const RIN_STEALTH: u32 = 158;
pub const RIN_SUSTAIN_ABILITY: u32 = 159;
pub const RIN_LEVITATION: u32 = 160;
pub const RIN_HUNGER: u32 = 161;
pub const RIN_AGGRAVATE_MONSTER: u32 = 162;
pub const RIN_CONFLICT: u32 = 163;
pub const RIN_WARNING: u32 = 164;
pub const RIN_POISON_RESISTANCE: u32 = 165;
pub const RIN_FIRE_RESISTANCE: u32 = 166;
pub const RIN_COLD_RESISTANCE: u32 = 167;
pub const RIN_SHOCK_RESISTANCE: u32 = 168;
pub const RIN_FREE_ACTION: u32 = 169;
pub const RIN_SLOW_DIGESTION: u32 = 170;
pub const RIN_TELEPORTATION: u32 = 171;
pub const RIN_TELEPORT_CONTROL: u32 = 172;
pub const RIN_POLYMORPH: u32 = 173;
pub const RIN_POLYMORPH_CONTROL: u32 = 174;
pub const RIN_INVISIBILITY: u32 = 175;
pub const RIN_SEE_INVISIBLE: u32 = 176;
pub const RIN_PROTECTION_FROM_SHAPE_CHAN: u32 = 177;
pub const AMULET_OF_ESP: u32 = 178;
pub const AMULET_OF_LIFE_SAVING: u32 = 179;
pub const AMULET_OF_STRANGULATION: u32 = 180;
pub const AMULET_OF_RESTFUL_SLEEP: u32 = 181;
pub const AMULET_VERSUS_POISON: u32 = 182;
pub const AMULET_OF_CHANGE: u32 = 183;
pub const AMULET_OF_UNCHANGING: u32 = 184;
pub const AMULET_OF_REFLECTION: u32 = 185;
pub const AMULET_OF_MAGICAL_BREATHING: u32 = 186;
pub const AMULET_OF_GUARDING: u32 = 187;
pub const AMULET_OF_FLYING: u32 = 188;
pub const FAKE_AMULET_OF_YENDOR: u32 = 189;
pub const AMULET_OF_YENDOR: u32 = 190;
pub const LARGE_BOX: u32 = 191;
pub const CHEST: u32 = 192;
pub const ICE_BOX: u32 = 193;
pub const SACK: u32 = 194;
pub const OILSKIN_SACK: u32 = 195;
pub const BAG_OF_HOLDING: u32 = 196;
pub const BAG_OF_TRICKS: u32 = 197;
pub const BAG_OF_SHARING: u32 = 198;
pub const SKELETON_KEY: u32 = 199;
pub const LOCK_PICK: u32 = 200;
pub const CREDIT_CARD: u32 = 201;
pub const TALLOW_CANDLE: u32 = 202;
pub const WAX_CANDLE: u32 = 203;
pub const BRASS_LANTERN: u32 = 204;
pub const OIL_LAMP: u32 = 205;
pub const MAGIC_LAMP: u32 = 206;
pub const EXPENSIVE_CAMERA: u32 = 207;
pub const MIRROR: u32 = 208;
pub const CRYSTAL_BALL: u32 = 209;
pub const LENSES: u32 = 210;
pub const BLINDFOLD: u32 = 211;
pub const TOWEL: u32 = 212;
pub const SADDLE: u32 = 213;
pub const LEASH: u32 = 214;
pub const STETHOSCOPE: u32 = 215;
pub const TINNING_KIT: u32 = 216;
pub const TIN_OPENER: u32 = 217;
pub const CAN_OF_GREASE: u32 = 218;
pub const FIGURINE: u32 = 219;
pub const MAGIC_MARKER: u32 = 220;
pub const LAND_MINE: u32 = 221;
pub const BEARTRAP: u32 = 222;
pub const TIN_WHISTLE: u32 = 223;
pub const MAGIC_WHISTLE: u32 = 224;
pub const WOODEN_FLUTE: u32 = 225;
pub const MAGIC_FLUTE: u32 = 226;
pub const TOOLED_HORN: u32 = 227;
pub const FROST_HORN: u32 = 228;
pub const FIRE_HORN: u32 = 229;
pub const HORN_OF_PLENTY: u32 = 230;
pub const WOODEN_HARP: u32 = 231;
pub const MAGIC_HARP: u32 = 232;
pub const BELL: u32 = 233;
pub const BUGLE: u32 = 234;
pub const LEATHER_DRUM: u32 = 235;
pub const DRUM_OF_EARTHQUAKE: u32 = 236;
pub const PICK_AXE: u32 = 237;
pub const GRAPPLING_HOOK: u32 = 238;
pub const UNICORN_HORN: u32 = 239;
pub const CANDELABRUM_OF_INVOCATION: u32 = 240;
pub const BELL_OF_OPENING: u32 = 241;
pub const TRIPE_RATION: u32 = 242;
pub const CORPSE: u32 = 243;
pub const EGG: u32 = 244;
pub const MEATBALL: u32 = 245;
pub const MEAT_STICK: u32 = 246;
pub const HUGE_CHUNK_OF_MEAT: u32 = 247;
pub const MEAT_RING: u32 = 248;
pub const GLOB_OF_GRAY_OOZE: u32 = 249;
pub const GLOB_OF_BROWN_PUDDING: u32 = 250;
pub const GLOB_OF_GREEN_SLIME: u32 = 251;
pub const GLOB_OF_BLACK_PUDDING: u32 = 252;
pub const KELP_FROND: u32 = 253;
pub const EUCALYPTUS_LEAF: u32 = 254;
pub const APPLE: u32 = 255;
pub const ORANGE: u32 = 256;
pub const PEAR: u32 = 257;
pub const MELON: u32 = 258;
pub const BANANA: u32 = 259;
pub const CARROT: u32 = 260;
pub const SPRIG_OF_WOLFSBANE: u32 = 261;
pub const CLOVE_OF_GARLIC: u32 = 262;
pub const SLIME_MOLD: u32 = 263;
pub const LUMP_OF_ROYAL_JELLY: u32 = 264;
pub const CREAM_PIE: u32 = 265;
pub const CANDY_BAR: u32 = 266;
pub const FORTUNE_COOKIE: u32 = 267;
pub const PANCAKE: u32 = 268;
pub const LEMBAS_WAFER: u32 = 269;
pub const CRAM_RATION: u32 = 270;
pub const FOOD_RATION: u32 = 271;
pub const K_RATION: u32 = 272;
pub const C_RATION: u32 = 273;
pub const TIN: u32 = 274;
pub const POT_GAIN_ABILITY: u32 = 275;
pub const POT_RESTORE_ABILITY: u32 = 276;
pub const POT_CONFUSION: u32 = 277;
pub const POT_BLINDNESS: u32 = 278;
pub const POT_PARALYSIS: u32 = 279;
pub const POT_SPEED: u32 = 280;
pub const POT_LEVITATION: u32 = 281;
pub const POT_HALLUCINATION: u32 = 282;
pub const POT_INVISIBILITY: u32 = 283;
pub const POT_SEE_INVISIBLE: u32 = 284;
pub const POT_HEALING: u32 = 285;
pub const POT_EXTRA_HEALING: u32 = 286;
pub const POT_GAIN_LEVEL: u32 = 287;
pub const POT_ENLIGHTENMENT: u32 = 288;
pub const POT_MONSTER_DETECTION: u32 = 289;
pub const POT_OBJECT_DETECTION: u32 = 290;
pub const POT_GAIN_ENERGY: u32 = 291;
pub const POT_SLEEPING: u32 = 292;
pub const POT_FULL_HEALING: u32 = 293;
pub const POT_POLYMORPH: u32 = 294;
pub const POT_BOOZE: u32 = 295;
pub const POT_SICKNESS: u32 = 296;
pub const POT_FRUIT_JUICE: u32 = 297;
pub const POT_ACID: u32 = 298;
pub const POT_OIL: u32 = 299;
pub const POT_WATER: u32 = 300;
pub const SCR_ENCHANT_ARMOR: u32 = 301;
pub const SCR_DESTROY_ARMOR: u32 = 302;
pub const SCR_CONFUSE_MONSTER: u32 = 303;
pub const SCR_SCARE_MONSTER: u32 = 304;
pub const SCR_REMOVE_CURSE: u32 = 305;
pub const SCR_ENCHANT_WEAPON: u32 = 306;
pub const SCR_CREATE_MONSTER: u32 = 307;
pub const SCR_TAMING: u32 = 308;
pub const SCR_GENOCIDE: u32 = 309;
pub const SCR_LIGHT: u32 = 310;
pub const SCR_TELEPORTATION: u32 = 311;
pub const SCR_GOLD_DETECTION: u32 = 312;
pub const SCR_FOOD_DETECTION: u32 = 313;
pub const SCR_IDENTIFY: u32 = 314;
pub const SCR_MAGIC_MAPPING: u32 = 315;
pub const SCR_AMNESIA: u32 = 316;
pub const SCR_FIRE: u32 = 317;
pub const SCR_EARTH: u32 = 318;
pub const SCR_PUNISHMENT: u32 = 319;
pub const SCR_CHARGING: u32 = 320;
pub const SCR_STINKING_CLOUD: u32 = 321;
pub const SCR_MAIL: u32 = 342;
pub const SCR_BLANK_PAPER: u32 = 343;
pub const SPE_DIG: u32 = 344;
pub const SPE_MAGIC_MISSILE: u32 = 345;
pub const SPE_FIREBALL: u32 = 346;
pub const SPE_CONE_OF_COLD: u32 = 347;
pub const SPE_SLEEP: u32 = 348;
pub const SPE_FINGER_OF_DEATH: u32 = 349;
pub const SPE_LIGHT: u32 = 350;
pub const SPE_DETECT_MONSTERS: u32 = 351;
pub const SPE_HEALING: u32 = 352;
pub const SPE_KNOCK: u32 = 353;
pub const SPE_FORCE_BOLT: u32 = 354;
pub const SPE_CONFUSE_MONSTER: u32 = 355;
pub const SPE_CURE_BLINDNESS: u32 = 356;
pub const SPE_DRAIN_LIFE: u32 = 357;
pub const SPE_SLOW_MONSTER: u32 = 358;
pub const SPE_WIZARD_LOCK: u32 = 359;
pub const SPE_CREATE_MONSTER: u32 = 360;
pub const SPE_DETECT_FOOD: u32 = 361;
pub const SPE_CAUSE_FEAR: u32 = 362;
pub const SPE_CLAIRVOYANCE: u32 = 363;
pub const SPE_CURE_SICKNESS: u32 = 364;
pub const SPE_CHARM_MONSTER: u32 = 365;
pub const SPE_HASTE_SELF: u32 = 366;
pub const SPE_DETECT_UNSEEN: u32 = 367;
pub const SPE_LEVITATION: u32 = 368;
pub const SPE_EXTRA_HEALING: u32 = 369;
pub const SPE_RESTORE_ABILITY: u32 = 370;
pub const SPE_INVISIBILITY: u32 = 371;
pub const SPE_DETECT_TREASURE: u32 = 372;
pub const SPE_REMOVE_CURSE: u32 = 373;
pub const SPE_MAGIC_MAPPING: u32 = 374;
pub const SPE_IDENTIFY: u32 = 375;
pub const SPE_TURN_UNDEAD: u32 = 376;
pub const SPE_POLYMORPH: u32 = 377;
pub const SPE_TELEPORT_AWAY: u32 = 378;
pub const SPE_CREATE_FAMILIAR: u32 = 379;
pub const SPE_CANCELLATION: u32 = 380;
pub const SPE_PROTECTION: u32 = 381;
pub const SPE_JUMPING: u32 = 382;
pub const SPE_STONE_TO_FLESH: u32 = 383;
pub const SPE_BLANK_PAPER: u32 = 384;
pub const SPE_NOVEL: u32 = 385;
pub const SPE_BOOK_OF_THE_DEAD: u32 = 386;
pub const WAN_LIGHT: u32 = 387;
pub const WAN_SECRET_DOOR_DETECTION: u32 = 388;
pub const WAN_ENLIGHTENMENT: u32 = 389;
pub const WAN_CREATE_MONSTER: u32 = 390;
pub const WAN_WISHING: u32 = 391;
pub const WAN_NOTHING: u32 = 392;
pub const WAN_STRIKING: u32 = 393;
pub const WAN_MAKE_INVISIBLE: u32 = 394;
pub const WAN_SLOW_MONSTER: u32 = 395;
pub const WAN_SPEED_MONSTER: u32 = 396;
pub const WAN_UNDEAD_TURNING: u32 = 397;
pub const WAN_POLYMORPH: u32 = 398;
pub const WAN_CANCELLATION: u32 = 399;
pub const WAN_TELEPORTATION: u32 = 400;
pub const WAN_OPENING: u32 = 401;
pub const WAN_LOCKING: u32 = 402;
pub const WAN_PROBING: u32 = 403;
pub const WAN_DIGGING: u32 = 404;
pub const WAN_MAGIC_MISSILE: u32 = 405;
pub const WAN_FIRE: u32 = 406;
pub const WAN_COLD: u32 = 407;
pub const WAN_SLEEP: u32 = 408;
pub const WAN_DEATH: u32 = 409;
pub const WAN_LIGHTNING: u32 = 410;
pub const GOLD_PIECE: u32 = 414;
pub const DILITHIUM_CRYSTAL: u32 = 415;
pub const DIAMOND: u32 = 416;
pub const RUBY: u32 = 417;
pub const JACINTH: u32 = 418;
pub const SAPPHIRE: u32 = 419;
pub const BLACK_OPAL: u32 = 420;
pub const EMERALD: u32 = 421;
pub const TURQUOISE: u32 = 422;
pub const CITRINE: u32 = 423;
pub const AQUAMARINE: u32 = 424;
pub const AMBER: u32 = 425;
pub const TOPAZ: u32 = 426;
pub const JET: u32 = 427;
pub const OPAL: u32 = 428;
pub const CHRYSOBERYL: u32 = 429;
pub const GARNET: u32 = 430;
pub const AMETHYST: u32 = 431;
pub const JASPER: u32 = 432;
pub const FLUORITE: u32 = 433;
pub const OBSIDIAN: u32 = 434;
pub const AGATE: u32 = 435;
pub const JADE: u32 = 436;
pub const LUCKSTONE: u32 = 446;
pub const LOADSTONE: u32 = 447;
pub const TOUCHSTONE: u32 = 448;
pub const FLINT: u32 = 449;
pub const ROCK: u32 = 450;
pub const BOULDER: u32 = 451;
pub const STATUE: u32 = 452;
pub const HEAVY_IRON_BALL: u32 = 453;
pub const IRON_CHAIN: u32 = 454;
pub const BLINDING_VENOM: u32 = 455;
pub const ACID_VENOM: u32 = 456;
pub const LAST_GEM: u32 = 436;
pub const MAXSPELL: u32 = 44;
pub const NUM_OBJECTS: u32 = 457;
pub const ART_EXCALIBUR: u32 = 1;
pub const ART_STORMBRINGER: u32 = 2;
pub const ART_MJOLLNIR: u32 = 3;
pub const ART_CLEAVER: u32 = 4;
pub const ART_GRIMTOOTH: u32 = 5;
pub const ART_ORCRIST: u32 = 6;
pub const ART_STING: u32 = 7;
pub const ART_MAGICBANE: u32 = 8;
pub const ART_FROST_BRAND: u32 = 9;
pub const ART_FIRE_BRAND: u32 = 10;
pub const ART_DRAGONBANE: u32 = 11;
pub const ART_DEMONBANE: u32 = 12;
pub const ART_WEREBANE: u32 = 13;
pub const ART_GRAYSWANDIR: u32 = 14;
pub const ART_GIANTSLAYER: u32 = 15;
pub const ART_OGRESMASHER: u32 = 16;
pub const ART_TROLLSBANE: u32 = 17;
pub const ART_VORPAL_BLADE: u32 = 18;
pub const ART_SNICKERSNEE: u32 = 19;
pub const ART_SUNSWORD: u32 = 20;
pub const ART_ORB_OF_DETECTION: u32 = 21;
pub const ART_HEART_OF_AHRIMAN: u32 = 22;
pub const ART_SCEPTRE_OF_MIGHT: u32 = 23;
pub const ART_STAFF_OF_AESCULAPIUS: u32 = 24;
pub const ART_MAGIC_MIRROR_OF_MERLIN: u32 = 25;
pub const ART_EYES_OF_THE_OVERWORLD: u32 = 26;
pub const ART_MITRE_OF_HOLINESS: u32 = 27;
pub const ART_LONGBOW_OF_DIANA: u32 = 28;
pub const ART_MASTER_KEY_OF_THIEVERY: u32 = 29;
pub const ART_TSURUGI_OF_MURAMASA: u32 = 30;
pub const ART_YENDORIAN_EXPRESS_CARD: u32 = 31;
pub const ART_ORB_OF_FATE: u32 = 32;
pub const ART_EYE_OF_THE_AETHIOPICA: u32 = 33;
pub const NROFARTIFACTS: u32 = 33;
pub const ARTICLE_NONE: u32 = 0;
pub const ARTICLE_THE: u32 = 1;
pub const ARTICLE_A: u32 = 2;
pub const ARTICLE_YOUR: u32 = 3;
pub const SUPPRESS_IT: u32 = 1;
pub const SUPPRESS_INVISIBLE: u32 = 2;
pub const SUPPRESS_HALLUCINATION: u32 = 4;
pub const SUPPRESS_SADDLE: u32 = 8;
pub const EXACT_NAME: u32 = 15;
pub const SUPPRESS_NAME: u32 = 16;
pub const HACKPREFIX: u32 = 0;
pub const LEVELPREFIX: u32 = 1;
pub const SAVEPREFIX: u32 = 2;
pub const BONESPREFIX: u32 = 3;
pub const DATAPREFIX: u32 = 4;
pub const SCOREPREFIX: u32 = 5;
pub const LOCKPREFIX: u32 = 6;
pub const SYSCONFPREFIX: u32 = 7;
pub const CONFIGPREFIX: u32 = 8;
pub const TROUBLEPREFIX: u32 = 9;
pub const PREFIX_COUNT: u32 = 10;
pub const FQN_MAX_FILENAME: u32 = 512;
pub const MSGTYP_NORMAL: u32 = 0;
pub const MSGTYP_NOREP: u32 = 1;
pub const MSGTYP_NOSHOW: u32 = 2;
pub const MSGTYP_STOP: u32 = 3;
pub const MSGTYP_MASK_REP_SHOW: u32 = 6;
pub const ENTITIES: u32 = 2;
pub const FIRST_GEM: u32 = 415;
pub const FIRST_AMULET: u32 = 178;
pub const LAST_AMULET: u32 = 190;
pub const MAX_MENU_MAPPED_CMDS: u32 = 32;
pub const BP_ALIGN: u32 = 0;
pub const BP_GEND: u32 = 1;
pub const BP_RACE: u32 = 2;
pub const BP_ROLE: u32 = 3;
pub const NUM_BP: u32 = 4;
pub const NUM_ROLES: u32 = 13;
pub const BSIZE: u32 = 20;
pub const WIZKIT_MAX: u32 = 128;
pub const CVT_BUF_SIZE: u32 = 64;
pub const LUA_VER_BUFSIZ: u32 = 20;
pub const LUA_COPYRIGHT_BUFSIZ: u32 = 120;
pub const DOMOVE_WALK: u32 = 1;
pub const DOMOVE_RUSH: u32 = 2;
pub const RANGE_LEVEL: u32 = 0;
pub const RANGE_GLOBAL: u32 = 1;
pub const ANIMATE_NORMAL: u32 = 0;
pub const ANIMATE_SHATTER: u32 = 1;
pub const ANIMATE_SPELL: u32 = 2;
pub const AS_OK: u32 = 0;
pub const AS_NO_MON: u32 = 1;
pub const AS_MON_IS_UNIQUE: u32 = 2;
pub const NEW_MOON: u32 = 0;
pub const FULL_MOON: u32 = 4;
pub const PARANOID_CONFIRM: u32 = 1;
pub const PARANOID_QUIT: u32 = 2;
pub const PARANOID_DIE: u32 = 4;
pub const PARANOID_BONES: u32 = 8;
pub const PARANOID_HIT: u32 = 16;
pub const PARANOID_PRAY: u32 = 32;
pub const PARANOID_REMOVE: u32 = 64;
pub const PARANOID_BREAKWAND: u32 = 128;
pub const PARANOID_WERECHANGE: u32 = 256;
pub const PARANOID_EATING: u32 = 512;
pub const NUM_DISCLOSURE_OPTIONS: u32 = 6;
pub const DISCLOSE_PROMPT_DEFAULT_YES: u8 = 121u8;
pub const DISCLOSE_PROMPT_DEFAULT_NO: u8 = 110u8;
pub const DISCLOSE_PROMPT_DEFAULT_SPECIAL: u8 = 63u8;
pub const DISCLOSE_YES_WITHOUT_PROMPT: u8 = 43u8;
pub const DISCLOSE_NO_WITHOUT_PROMPT: u8 = 45u8;
pub const DISCLOSE_SPECIAL_WITHOUT_PROMPT: u8 = 35u8;
pub const GPCOORDS_NONE: u8 = 110u8;
pub const GPCOORDS_MAP: u8 = 109u8;
pub const GPCOORDS_COMPASS: u8 = 99u8;
pub const GPCOORDS_COMFULL: u8 = 102u8;
pub const GPCOORDS_SCREEN: u8 = 115u8;
pub const TER_MAP: u32 = 1;
pub const TER_TRP: u32 = 2;
pub const TER_OBJ: u32 = 4;
pub const TER_MON: u32 = 8;
pub const TER_DETECT: u32 = 16;
pub const MAX_ALTKEYHANDLER: u32 = 25;
pub const COULD_SEE: u32 = 1;
pub const IN_SIGHT: u32 = 2;
pub const TEMP_LIT: u32 = 4;
pub const LS_OBJECT: u32 = 0;
pub const LS_MONSTER: u32 = 1;
pub const MAX_RADIUS: u32 = 16;
pub const MONSEEN_NORMAL: u32 = 1;
pub const MONSEEN_SEEINVIS: u32 = 2;
pub const MONSEEN_INFRAVIS: u32 = 4;
pub const MONSEEN_TELEPAT: u32 = 8;
pub const MONSEEN_XRAYVIS: u32 = 16;
pub const MONSEEN_DETECT: u32 = 32;
pub const MONSEEN_WARNMON: u32 = 64;
pub const DISP_BEAM: i32 = -1;
pub const DISP_ALL: i32 = -2;
pub const DISP_TETHER: i32 = -3;
pub const DISP_FLASH: i32 = -4;
pub const DISP_ALWAYS: i32 = -5;
pub const DISP_CHANGE: i32 = -6;
pub const DISP_END: i32 = -7;
pub const DISP_FREEMEM: i32 = -8;
pub const SHIELD_COUNT: u32 = 21;
pub const BACKTRACK: i32 = -1;
pub const NUM_ZAP: u32 = 8;
pub const GLYPH_MON_OFF: u32 = 0;
pub const MG_FLAG_NORMAL: u32 = 0;
pub const MG_FLAG_NOOVERRIDE: u32 = 1;
pub const MG_FLAG_RETURNIDX: u32 = 2;
pub const MG_CORPSE: u32 = 1;
pub const MG_INVIS: u32 = 2;
pub const MG_DETECT: u32 = 4;
pub const MG_PET: u32 = 8;
pub const MG_RIDDEN: u32 = 16;
pub const MG_STATUE: u32 = 32;
pub const MG_OBJPILE: u32 = 64;
pub const MG_BW_LAVA: u32 = 128;
pub const MG_BW_ICE: u32 = 256;
pub const MG_NOTHING: u32 = 512;
pub const MG_UNEXPL: u32 = 1024;
pub const MG_FEMALE: u32 = 2048;
pub const MG_BADXY: u32 = 4096;
pub const WC_COLOR: u32 = 1;
pub const WC_HILITE_PET: u32 = 2;
pub const WC_ASCII_MAP: u32 = 4;
pub const WC_TILED_MAP: u32 = 8;
pub const WC_PRELOAD_TILES: u32 = 16;
pub const WC_TILE_WIDTH: u32 = 32;
pub const WC_TILE_HEIGHT: u32 = 64;
pub const WC_TILE_FILE: u32 = 128;
pub const WC_INVERSE: u32 = 256;
pub const WC_ALIGN_MESSAGE: u32 = 512;
pub const WC_ALIGN_STATUS: u32 = 1024;
pub const WC_VARY_MSGCOUNT: u32 = 2048;
pub const WC_FONT_MAP: u32 = 4096;
pub const WC_FONT_MESSAGE: u32 = 8192;
pub const WC_FONT_STATUS: u32 = 16384;
pub const WC_FONT_MENU: u32 = 32768;
pub const WC_FONT_TEXT: u32 = 65536;
pub const WC_FONTSIZ_MAP: u32 = 131072;
pub const WC_FONTSIZ_MESSAGE: u32 = 262144;
pub const WC_FONTSIZ_STATUS: u32 = 524288;
pub const WC_FONTSIZ_MENU: u32 = 1048576;
pub const WC_FONTSIZ_TEXT: u32 = 2097152;
pub const WC_SCROLL_MARGIN: u32 = 4194304;
pub const WC_SPLASH_SCREEN: u32 = 8388608;
pub const WC_POPUP_DIALOG: u32 = 16777216;
pub const WC_SCROLL_AMOUNT: u32 = 33554432;
pub const WC_EIGHT_BIT_IN: u32 = 67108864;
pub const WC_PERM_INVENT: u32 = 134217728;
pub const WC_MAP_MODE: u32 = 268435456;
pub const WC_WINDOWCOLORS: u32 = 536870912;
pub const WC_PLAYER_SELECTION: u32 = 1073741824;
pub const WC_MOUSE_SUPPORT: u32 = 2147483648;
pub const WC2_FULLSCREEN: u32 = 1;
pub const WC2_SOFTKEYBOARD: u32 = 2;
pub const WC2_WRAPTEXT: u32 = 4;
pub const WC2_HILITE_STATUS: u32 = 8;
pub const WC2_SELECTSAVED: u32 = 16;
pub const WC2_DARKGRAY: u32 = 32;
pub const WC2_HITPOINTBAR: u32 = 64;
pub const WC2_FLUSH_STATUS: u32 = 128;
pub const WC2_RESET_STATUS: u32 = 256;
pub const WC2_TERM_SIZE: u32 = 512;
pub const WC2_STATUSLINES: u32 = 1024;
pub const WC2_WINDOWBORDERS: u32 = 2048;
pub const WC2_PETATTR: u32 = 4096;
pub const WC2_GUICOLOR: u32 = 8192;
pub const WC2_URGENT_MESG: u32 = 16384;
pub const WC2_SUPPRESS_HIST: u32 = 32768;
pub const WC2_MENU_SHIFT: u32 = 65536;
pub const ALIGN_LEFT: u32 = 1;
pub const ALIGN_RIGHT: u32 = 2;
pub const ALIGN_TOP: u32 = 3;
pub const ALIGN_BOTTOM: u32 = 4;
pub const VIA_DIALOG: u32 = 0;
pub const VIA_PROMPTS: u32 = 1;
pub const MAP_MODE_TILES: u32 = 0;
pub const MAP_MODE_ASCII4x6: u32 = 1;
pub const MAP_MODE_ASCII6x8: u32 = 2;
pub const MAP_MODE_ASCII8x8: u32 = 3;
pub const MAP_MODE_ASCII16x8: u32 = 4;
pub const MAP_MODE_ASCII7x12: u32 = 5;
pub const MAP_MODE_ASCII8x12: u32 = 6;
pub const MAP_MODE_ASCII16x12: u32 = 7;
pub const MAP_MODE_ASCII12x16: u32 = 8;
pub const MAP_MODE_ASCII10x18: u32 = 9;
pub const MAP_MODE_ASCII_FIT_TO_SCREEN: u32 = 10;
pub const MAP_MODE_TILES_FIT_TO_SCREEN: u32 = 11;
pub const RS_NAME: u32 = 0;
pub const RS_ROLE: u32 = 1;
pub const RS_RACE: u32 = 2;
pub const RS_GENDER: u32 = 3;
pub const RS_ALGNMNT: u32 = 4;
pub const RS_filter: u32 = 5;
pub const WININIT: u32 = 0;
pub const WININIT_UNDO: u32 = 1;
pub const NO_MM_FLAGS: u32 = 0;
pub const NO_MINVENT: u32 = 1;
pub const MM_NOWAIT: u32 = 2;
pub const MM_NOCOUNTBIRTH: u32 = 4;
pub const MM_IGNOREWATER: u32 = 8;
pub const MM_ADJACENTOK: u32 = 16;
pub const MM_ANGRY: u32 = 32;
pub const MM_NONAME: u32 = 64;
pub const MM_EGD: u32 = 256;
pub const MM_EPRI: u32 = 512;
pub const MM_ESHK: u32 = 1024;
pub const MM_EMIN: u32 = 2048;
pub const MM_EDOG: u32 = 4096;
pub const MM_ASLEEP: u32 = 8192;
pub const MM_NOGRP: u32 = 16384;
pub const MM_NOTAIL: u32 = 32768;
pub const MM_MALE: u32 = 65536;
pub const MM_FEMALE: u32 = 131072;
pub const GP_ALLOW_XY: u32 = 262144;
pub const GP_ALLOW_U: u32 = 524288;
pub const CORPSTAT_NONE: u32 = 0;
pub const CORPSTAT_INIT: u32 = 1;
pub const CORPSTAT_BURIED: u32 = 2;
pub const SHIFT_SEENMSG: u32 = 1;
pub const SHIFT_MSG: u32 = 2;
pub const M_POISONGAS_BAD: u32 = 0;
pub const M_POISONGAS_MINOR: u32 = 1;
pub const M_POISONGAS_OK: u32 = 2;
pub const DF_NONE: u32 = 0;
pub const DF_RANDOM: u32 = 1;
pub const DF_ALL: u32 = 4;
pub const DEFUNCT_MONSTER: i32 = -100;
pub const ALL_FINISHED: u32 = 1;
pub const BY_NEXTHERE: u32 = 1;
pub const INCLUDE_VENOM: u32 = 2;
pub const AUTOSELECT_SINGLE: u32 = 4;
pub const USE_INVLET: u32 = 8;
pub const INVORDER_SORT: u32 = 16;
pub const SIGNAL_NOMENU: u32 = 32;
pub const SIGNAL_ESCAPE: u32 = 64;
pub const FEEL_COCKATRICE: u32 = 128;
pub const INCLUDE_HERO: u32 = 256;
pub const UNPAID_TYPES: u32 = 4;
pub const GOLD_TYPES: u32 = 8;
pub const WORN_TYPES: u32 = 16;
pub const ALL_TYPES: u32 = 32;
pub const BILLED_TYPES: u32 = 64;
pub const CHOOSE_ALL: u32 = 128;
pub const BUC_BLESSED: u32 = 256;
pub const BUC_CURSED: u32 = 512;
pub const BUC_UNCURSED: u32 = 1024;
pub const BUC_UNKNOWN: u32 = 2048;
pub const BUC_ALLBKNOWN: u32 = 1792;
pub const BUCX_TYPES: u32 = 3840;
pub const ALL_TYPES_SELECTED: i32 = -2;
pub const FM_FMON: u32 = 1;
pub const FM_MIGRATE: u32 = 2;
pub const FM_MYDOGS: u32 = 4;
pub const FM_EVERYWHERE: u32 = 7;
pub const PICK_RANDOM: u32 = 0;
pub const PICK_RIGID: u32 = 1;
pub const FORCETRAP: u32 = 1;
pub const NOWEBMSG: u32 = 2;
pub const FORCEBUNGLE: u32 = 4;
pub const RECURSIVETRAP: u32 = 8;
pub const TOOKPLUNGE: u32 = 16;
pub const VIASITTING: u32 = 32;
pub const FAILEDUNTRAP: u32 = 64;
pub const DO_MOVE: u32 = 0;
pub const TEST_MOVE: u32 = 1;
pub const TEST_TRAV: u32 = 2;
pub const TEST_TRAP: u32 = 3;
pub const VIS_EFFECTS: u32 = 1;
pub const MAY_HITMON: u32 = 2;
pub const MAY_HITYOU: u32 = 4;
pub const MAY_HIT: u32 = 6;
pub const MAY_DESTROY: u32 = 8;
pub const MAY_FRACTURE: u32 = 16;
pub const ROLL: u32 = 1;
pub const FLING: u32 = 2;
pub const LAUNCH_UNSEEN: u32 = 64;
pub const LAUNCH_KNOWN: u32 = 128;
pub const BASICENLIGHTENMENT: u32 = 1;
pub const MAGICENLIGHTENMENT: u32 = 2;
pub const ENL_GAMEINPROGRESS: u32 = 0;
pub const ENL_GAMEOVERALIVE: u32 = 1;
pub const ENL_GAMEOVERDEAD: u32 = 2;
pub const SORTLOOT_PACK: u32 = 1;
pub const SORTLOOT_INVLET: u32 = 2;
pub const SORTLOOT_LOOT: u32 = 4;
pub const SORTLOOT_PETRIFY: u32 = 32;
pub const XKILL_GIVEMSG: u32 = 0;
pub const XKILL_NOMSG: u32 = 1;
pub const XKILL_NOCORPSE: u32 = 2;
pub const XKILL_NOCONDUCT: u32 = 4;
pub const PLINE_NOREPEAT: u32 = 1;
pub const OVERRIDE_MSGTYPE: u32 = 2;
pub const SUPPRESS_HISTORY: u32 = 4;
pub const URGENT_MESSAGE: u32 = 8;
pub const ROTTEN_TIN: u32 = 0;
pub const HOMEMADE_TIN: u32 = 1;
pub const SPINACH_TIN: i32 = -1;
pub const RANDOM_TIN: i32 = -2;
pub const HEALTHY_TIN: i32 = -3;
pub const TAINT_AGE: u32 = 50;
pub const TROLL_REVIVE_CHANCE: u32 = 37;
pub const ROT_AGE: u32 = 250;
pub const WAND_BACKFIRE_CHANCE: u32 = 100;
pub const MENU_TRADITIONAL: u32 = 0;
pub const MENU_COMBINATION: u32 = 1;
pub const MENU_FULL: u32 = 2;
pub const MENU_PARTIAL: u32 = 3;
pub const TELEDS_NO_FLAGS: u32 = 0;
pub const TELEDS_ALLOW_DRAG: u32 = 1;
pub const TELEDS_TELEPORT: u32 = 2;
pub const MON_POLE_DIST: u32 = 5;
pub const PET_MISSILE_RANGE2: u32 = 36;
pub const GETOBJ_NOFLAGS: u32 = 0;
pub const GETOBJ_ALLOWCNT: u32 = 1;
pub const GETOBJ_PROMPT: u32 = 2;
pub const DEVTEAM_EMAIL: &'static [u8; 20usize] = b"devteam@nethack.org\0";
pub const DEVTEAM_URL: &'static [u8; 25usize] = b"https://www.nethack.org/\0";
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type genericptr_t = *mut ::std::os::raw::c_void;
pub type schar = ::std::os::raw::c_schar;
pub type uchar = ::std::os::raw::c_uchar;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_iobuf>()))._Placeholder as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_iobuf),
            "::",
            stringify!(_Placeholder)
        )
    );
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
pub type xchar = schar;
pub type boolean = xchar;
pub const optchoice_opt_in: optchoice = 0;
pub const optchoice_opt_out: optchoice = 1;
pub type optchoice = ::std::os::raw::c_int;
pub type nhsym = uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nhcoord {
    pub x: xchar,
    pub y: xchar,
}
#[test]
fn bindgen_test_layout_nhcoord() {
    assert_eq!(
        ::std::mem::size_of::<nhcoord>(),
        2usize,
        concat!("Size of: ", stringify!(nhcoord))
    );
    assert_eq!(
        ::std::mem::align_of::<nhcoord>(),
        1usize,
        concat!("Alignment of ", stringify!(nhcoord))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nhcoord>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nhcoord),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nhcoord>())).y as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(nhcoord),
            "::",
            stringify!(y)
        )
    );
}
pub type coord = nhcoord;
extern "C" {
    pub fn interject_assistance(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: genericptr_t,
        arg4: genericptr_t,
    );
}
extern "C" {
    pub fn interject(arg1: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout__exception() {
    assert_eq!(
        ::std::mem::size_of::<_exception>(),
        40usize,
        concat!("Size of: ", stringify!(_exception))
    );
    assert_eq!(
        ::std::mem::align_of::<_exception>(),
        8usize,
        concat!("Alignment of ", stringify!(_exception))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).arg1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).arg2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_exception>())).retval as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_exception),
            "::",
            stringify!(retval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _complex {
    pub x: f64,
    pub y: f64,
}
#[test]
fn bindgen_test_layout__complex() {
    assert_eq!(
        ::std::mem::size_of::<_complex>(),
        16usize,
        concat!("Size of: ", stringify!(_complex))
    );
    assert_eq!(
        ::std::mem::align_of::<_complex>(),
        8usize,
        concat!("Alignment of ", stringify!(_complex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_complex>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_complex),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_complex>())).y as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_complex),
            "::",
            stringify!(y)
        )
    );
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub static _HUGE: f64;
}
extern "C" {
    pub fn _fperrraise(_Except: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _dclass(_X: f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldclass(_X: f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdclass(_X: f32) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dsign(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ldsign(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdsign(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _dpcomp(_X: f64, _Y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ldpcomp(_X: f64, _Y: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdpcomp(_X: f32, _Y: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _dtest(_Px: *mut f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldtest(_Px: *mut f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdtest(_Px: *mut f32) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _d_int(_Px: *mut f64, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ld_int(_Px: *mut f64, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fd_int(_Px: *mut f32, _Xexp: ::std::os::raw::c_short) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dscale(_Px: *mut f64, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldscale(_Px: *mut f64, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdscale(_Px: *mut f32, _Lexp: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f64) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f64)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdunscale(_Pex: *mut ::std::os::raw::c_short, _Px: *mut f32)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dexp(_Px: *mut f64, _Y: f64, _Eoff: ::std::os::raw::c_long) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _ldexp(_Px: *mut f64, _Y: f64, _Eoff: ::std::os::raw::c_long)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdexp(_Px: *mut f32, _Y: f32, _Eoff: ::std::os::raw::c_long)
        -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dnorm(_Ps: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _fdnorm(_Ps: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn _dpoly(_X: f64, _Tab: *const f64, _N: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _ldpoly(_X: f64, _Tab: *const f64, _N: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _fdpoly(_X: f32, _Tab: *const f32, _N: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn _dlog(_X: f64, _Baseflag: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _ldlog(_X: f64, _Baseflag: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn _fdlog(_X: f32, _Baseflag: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn _dsin(_X: f64, _Qoff: ::std::os::raw::c_uint) -> f64;
}
extern "C" {
    pub fn _ldsin(_X: f64, _Qoff: ::std::os::raw::c_uint) -> f64;
}
extern "C" {
    pub fn _fdsin(_X: f32, _Qoff: ::std::os::raw::c_uint) -> f32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _double_val {
    pub _Sh: [::std::os::raw::c_ushort; 4usize],
    pub _Val: f64,
}
#[test]
fn bindgen_test_layout__double_val() {
    assert_eq!(
        ::std::mem::size_of::<_double_val>(),
        8usize,
        concat!("Size of: ", stringify!(_double_val))
    );
    assert_eq!(
        ::std::mem::align_of::<_double_val>(),
        8usize,
        concat!("Alignment of ", stringify!(_double_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_double_val>()))._Sh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_double_val),
            "::",
            stringify!(_Sh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_double_val>()))._Val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_double_val),
            "::",
            stringify!(_Val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _float_val {
    pub _Sh: [::std::os::raw::c_ushort; 2usize],
    pub _Val: f32,
}
#[test]
fn bindgen_test_layout__float_val() {
    assert_eq!(
        ::std::mem::size_of::<_float_val>(),
        4usize,
        concat!("Size of: ", stringify!(_float_val))
    );
    assert_eq!(
        ::std::mem::align_of::<_float_val>(),
        4usize,
        concat!("Alignment of ", stringify!(_float_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_val>()))._Sh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_val),
            "::",
            stringify!(_Sh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_val>()))._Val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_val),
            "::",
            stringify!(_Val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ldouble_val {
    pub _Sh: [::std::os::raw::c_ushort; 4usize],
    pub _Val: f64,
}
#[test]
fn bindgen_test_layout__ldouble_val() {
    assert_eq!(
        ::std::mem::size_of::<_ldouble_val>(),
        8usize,
        concat!("Size of: ", stringify!(_ldouble_val))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldouble_val>(),
        8usize,
        concat!("Alignment of ", stringify!(_ldouble_val))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldouble_val>()))._Sh as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldouble_val),
            "::",
            stringify!(_Sh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldouble_val>()))._Val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldouble_val),
            "::",
            stringify!(_Val)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _float_const {
    pub _Word: [::std::os::raw::c_ushort; 4usize],
    pub _Float: f32,
    pub _Double: f64,
    pub _Long_double: f64,
}
#[test]
fn bindgen_test_layout__float_const() {
    assert_eq!(
        ::std::mem::size_of::<_float_const>(),
        8usize,
        concat!("Size of: ", stringify!(_float_const))
    );
    assert_eq!(
        ::std::mem::align_of::<_float_const>(),
        8usize,
        concat!("Alignment of ", stringify!(_float_const))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Word as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Word)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Float as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Float)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Double as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Double)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_float_const>()))._Long_double as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_float_const),
            "::",
            stringify!(_Long_double)
        )
    );
}
extern "C" {
    pub static _Denorm_C: _float_const;
}
extern "C" {
    pub static _Inf_C: _float_const;
}
extern "C" {
    pub static _Nan_C: _float_const;
}
extern "C" {
    pub static _Snan_C: _float_const;
}
extern "C" {
    pub static _Hugeval_C: _float_const;
}
extern "C" {
    pub static _FDenorm_C: _float_const;
}
extern "C" {
    pub static _FInf_C: _float_const;
}
extern "C" {
    pub static _FNan_C: _float_const;
}
extern "C" {
    pub static _FSnan_C: _float_const;
}
extern "C" {
    pub static _LDenorm_C: _float_const;
}
extern "C" {
    pub static _LInf_C: _float_const;
}
extern "C" {
    pub static _LNan_C: _float_const;
}
extern "C" {
    pub static _LSnan_C: _float_const;
}
extern "C" {
    pub static _Eps_C: _float_const;
}
extern "C" {
    pub static _Rteps_C: _float_const;
}
extern "C" {
    pub static _FEps_C: _float_const;
}
extern "C" {
    pub static _FRteps_C: _float_const;
}
extern "C" {
    pub static _LEps_C: _float_const;
}
extern "C" {
    pub static _LRteps_C: _float_const;
}
extern "C" {
    pub static _Zero_C: f64;
}
extern "C" {
    pub static _Xbig_C: f64;
}
extern "C" {
    pub static _FZero_C: f32;
}
extern "C" {
    pub static _FXbig_C: f32;
}
extern "C" {
    pub static _LZero_C: f64;
}
extern "C" {
    pub static _LXbig_C: f64;
}
extern "C" {
    pub fn abs(_X: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_X: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(_X: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn acos(_X: f64) -> f64;
}
extern "C" {
    pub fn asin(_X: f64) -> f64;
}
extern "C" {
    pub fn atan(_X: f64) -> f64;
}
extern "C" {
    pub fn atan2(_Y: f64, _X: f64) -> f64;
}
extern "C" {
    pub fn cos(_X: f64) -> f64;
}
extern "C" {
    pub fn cosh(_X: f64) -> f64;
}
extern "C" {
    pub fn exp(_X: f64) -> f64;
}
extern "C" {
    pub fn fabs(_X: f64) -> f64;
}
extern "C" {
    pub fn fmod(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn log(_X: f64) -> f64;
}
extern "C" {
    pub fn log10(_X: f64) -> f64;
}
extern "C" {
    pub fn pow(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn sin(_X: f64) -> f64;
}
extern "C" {
    pub fn sinh(_X: f64) -> f64;
}
extern "C" {
    pub fn sqrt(_X: f64) -> f64;
}
extern "C" {
    pub fn tan(_X: f64) -> f64;
}
extern "C" {
    pub fn tanh(_X: f64) -> f64;
}
extern "C" {
    pub fn acosh(_X: f64) -> f64;
}
extern "C" {
    pub fn asinh(_X: f64) -> f64;
}
extern "C" {
    pub fn atanh(_X: f64) -> f64;
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _cabs(_Complex_value: _complex) -> f64;
}
extern "C" {
    pub fn cbrt(_X: f64) -> f64;
}
extern "C" {
    pub fn ceil(_X: f64) -> f64;
}
extern "C" {
    pub fn _chgsign(_X: f64) -> f64;
}
extern "C" {
    pub fn copysign(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn _copysign(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn erf(_X: f64) -> f64;
}
extern "C" {
    pub fn erfc(_X: f64) -> f64;
}
extern "C" {
    pub fn exp2(_X: f64) -> f64;
}
extern "C" {
    pub fn expm1(_X: f64) -> f64;
}
extern "C" {
    pub fn fdim(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn floor(_X: f64) -> f64;
}
extern "C" {
    pub fn fma(_X: f64, _Y: f64, _Z: f64) -> f64;
}
extern "C" {
    pub fn fmax(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn fmin(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn frexp(_X: f64, _Y: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn hypot(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn _hypot(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn ilogb(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ldexp(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lgamma(_X: f64) -> f64;
}
extern "C" {
    pub fn llrint(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llround(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log1p(_X: f64) -> f64;
}
extern "C" {
    pub fn log2(_X: f64) -> f64;
}
extern "C" {
    pub fn logb(_X: f64) -> f64;
}
extern "C" {
    pub fn lrint(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lround(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _matherr(_Except: *mut _exception) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn modf(_X: f64, _Y: *mut f64) -> f64;
}
extern "C" {
    pub fn nan(_X: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nearbyint(_X: f64) -> f64;
}
extern "C" {
    pub fn nextafter(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remainder(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remquo(_X: f64, _Y: f64, _Z: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rint(_X: f64) -> f64;
}
extern "C" {
    pub fn round(_X: f64) -> f64;
}
extern "C" {
    pub fn scalbln(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalbn(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn tgamma(_X: f64) -> f64;
}
extern "C" {
    pub fn trunc(_X: f64) -> f64;
}
extern "C" {
    pub fn _j0(_X: f64) -> f64;
}
extern "C" {
    pub fn _j1(_X: f64) -> f64;
}
extern "C" {
    pub fn _jn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn _y0(_X: f64) -> f64;
}
extern "C" {
    pub fn _y1(_X: f64) -> f64;
}
extern "C" {
    pub fn _yn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn acoshf(_X: f32) -> f32;
}
extern "C" {
    pub fn asinhf(_X: f32) -> f32;
}
extern "C" {
    pub fn atanhf(_X: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(_X: f32) -> f32;
}
extern "C" {
    pub fn _chgsignf(_X: f32) -> f32;
}
extern "C" {
    pub fn copysignf(_Number: f32, _Sign: f32) -> f32;
}
extern "C" {
    pub fn _copysignf(_Number: f32, _Sign: f32) -> f32;
}
extern "C" {
    pub fn erff(_X: f32) -> f32;
}
extern "C" {
    pub fn erfcf(_X: f32) -> f32;
}
extern "C" {
    pub fn expm1f(_X: f32) -> f32;
}
extern "C" {
    pub fn exp2f(_X: f32) -> f32;
}
extern "C" {
    pub fn fdimf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(_X: f32, _Y: f32, _Z: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn fminf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn _hypotf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn ilogbf(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lgammaf(_X: f32) -> f32;
}
extern "C" {
    pub fn llrintf(_X: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundf(_X: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log1pf(_X: f32) -> f32;
}
extern "C" {
    pub fn log2f(_X: f32) -> f32;
}
extern "C" {
    pub fn logbf(_X: f32) -> f32;
}
extern "C" {
    pub fn lrintf(_X: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundf(_X: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nanf(_X: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn nearbyintf(_X: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(_X: f32, _Y: f64) -> f32;
}
extern "C" {
    pub fn remainderf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn remquof(_X: f32, _Y: f32, _Z: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn rintf(_X: f32) -> f32;
}
extern "C" {
    pub fn roundf(_X: f32) -> f32;
}
extern "C" {
    pub fn scalblnf(_X: f32, _Y: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn scalbnf(_X: f32, _Y: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn tgammaf(_X: f32) -> f32;
}
extern "C" {
    pub fn truncf(_X: f32) -> f32;
}
extern "C" {
    pub fn _logbf(_X: f32) -> f32;
}
extern "C" {
    pub fn _nextafterf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn _finitef(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isnanf(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fpclassf(_X: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_FMA3_enable(_Flag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_FMA3_enable() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(_X: f32) -> f32;
}
extern "C" {
    pub fn asinf(_X: f32) -> f32;
}
extern "C" {
    pub fn atan2f(_Y: f32, _X: f32) -> f32;
}
extern "C" {
    pub fn atanf(_X: f32) -> f32;
}
extern "C" {
    pub fn ceilf(_X: f32) -> f32;
}
extern "C" {
    pub fn cosf(_X: f32) -> f32;
}
extern "C" {
    pub fn coshf(_X: f32) -> f32;
}
extern "C" {
    pub fn expf(_X: f32) -> f32;
}
extern "C" {
    pub fn floorf(_X: f32) -> f32;
}
extern "C" {
    pub fn fmodf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn log10f(_X: f32) -> f32;
}
extern "C" {
    pub fn logf(_X: f32) -> f32;
}
extern "C" {
    pub fn modff(_X: f32, _Y: *mut f32) -> f32;
}
extern "C" {
    pub fn powf(_X: f32, _Y: f32) -> f32;
}
extern "C" {
    pub fn sinf(_X: f32) -> f32;
}
extern "C" {
    pub fn sinhf(_X: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(_X: f32) -> f32;
}
extern "C" {
    pub fn tanf(_X: f32) -> f32;
}
extern "C" {
    pub fn tanhf(_X: f32) -> f32;
}
extern "C" {
    pub fn acoshl(_X: f64) -> f64;
}
extern "C" {
    pub fn asinhl(_X: f64) -> f64;
}
extern "C" {
    pub fn atanhl(_X: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(_X: f64) -> f64;
}
extern "C" {
    pub fn copysignl(_Number: f64, _Sign: f64) -> f64;
}
extern "C" {
    pub fn erfl(_X: f64) -> f64;
}
extern "C" {
    pub fn erfcl(_X: f64) -> f64;
}
extern "C" {
    pub fn exp2l(_X: f64) -> f64;
}
extern "C" {
    pub fn expm1l(_X: f64) -> f64;
}
extern "C" {
    pub fn fdiml(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn fmal(_X: f64, _Y: f64, _Z: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn fminl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn ilogbl(_X: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lgammal(_X: f64) -> f64;
}
extern "C" {
    pub fn llrintl(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundl(_X: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn log1pl(_X: f64) -> f64;
}
extern "C" {
    pub fn log2l(_X: f64) -> f64;
}
extern "C" {
    pub fn logbl(_X: f64) -> f64;
}
extern "C" {
    pub fn lrintl(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundl(_X: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nanl(_X: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nearbyintl(_X: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn nexttowardl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remainderl(_X: f64, _Y: f64) -> f64;
}
extern "C" {
    pub fn remquol(_X: f64, _Y: f64, _Z: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn rintl(_X: f64) -> f64;
}
extern "C" {
    pub fn roundl(_X: f64) -> f64;
}
extern "C" {
    pub fn scalblnl(_X: f64, _Y: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalbnl(_X: f64, _Y: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn tgammal(_X: f64) -> f64;
}
extern "C" {
    pub fn truncl(_X: f64) -> f64;
}
extern "C" {
    pub static mut HUGE: f64;
}
extern "C" {
    pub fn j0(_X: f64) -> f64;
}
extern "C" {
    pub fn j1(_X: f64) -> f64;
}
extern "C" {
    pub fn jn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
extern "C" {
    pub fn y0(_X: f64) -> f64;
}
extern "C" {
    pub fn y1(_X: f64) -> f64;
}
extern "C" {
    pub fn yn(_X: ::std::os::raw::c_int, _Y: f64) -> f64;
}
pub const _crt_argv_mode__crt_argv_no_arguments: _crt_argv_mode = 0;
pub const _crt_argv_mode__crt_argv_unexpanded_arguments: _crt_argv_mode = 1;
pub const _crt_argv_mode__crt_argv_expanded_arguments: _crt_argv_mode = 2;
pub type _crt_argv_mode = ::std::os::raw::c_int;
pub const _crt_exit_return_mode__crt_exit_terminate_process: _crt_exit_return_mode = 0;
pub const _crt_exit_return_mode__crt_exit_return_to_caller: _crt_exit_return_mode = 1;
pub type _crt_exit_return_mode = ::std::os::raw::c_int;
pub const _crt_exit_cleanup_mode__crt_exit_full_cleanup: _crt_exit_cleanup_mode = 0;
pub const _crt_exit_cleanup_mode__crt_exit_quick_cleanup: _crt_exit_cleanup_mode = 1;
pub const _crt_exit_cleanup_mode__crt_exit_no_cleanup: _crt_exit_cleanup_mode = 2;
pub type _crt_exit_cleanup_mode = ::std::os::raw::c_int;
extern "C" {
    pub static mut __current_exit_return_mode: _crt_exit_return_mode;
}
extern "C" {
    pub fn __vcrt_initialize() -> __vcrt_bool;
}
extern "C" {
    pub fn __vcrt_uninitialize(_Terminating: __vcrt_bool) -> __vcrt_bool;
}
extern "C" {
    pub fn __vcrt_uninitialize_critical() -> __vcrt_bool;
}
extern "C" {
    pub fn __vcrt_thread_attach() -> __vcrt_bool;
}
extern "C" {
    pub fn __vcrt_thread_detach() -> __vcrt_bool;
}
extern "C" {
    pub fn __isa_available_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_startup_argv_mode() -> _crt_argv_mode;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EXCEPTION_POINTERS {
    _unused: [u8; 0],
}
extern "C" {
    pub fn _seh_filter_dll(
        _ExceptionNum: ::std::os::raw::c_ulong,
        _ExceptionPtr: *mut _EXCEPTION_POINTERS,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _seh_filter_exe(
        _ExceptionNum: ::std::os::raw::c_ulong,
        _ExceptionPtr: *mut _EXCEPTION_POINTERS,
    ) -> ::std::os::raw::c_int;
}
pub const _crt_app_type__crt_unknown_app: _crt_app_type = 0;
pub const _crt_app_type__crt_console_app: _crt_app_type = 1;
pub const _crt_app_type__crt_gui_app: _crt_app_type = 2;
pub type _crt_app_type = ::std::os::raw::c_int;
extern "C" {
    pub fn _query_app_type() -> _crt_app_type;
}
extern "C" {
    pub fn _set_app_type(_Type: _crt_app_type);
}
pub type _UserMathErrorFunctionPointer =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut _exception) -> ::std::os::raw::c_int>;
extern "C" {
    pub fn __setusermatherr(_UserMathErrorFunction: _UserMathErrorFunctionPointer);
}
extern "C" {
    pub fn _is_c_termination_complete() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _configure_narrow_argv(mode: _crt_argv_mode) -> errno_t;
}
extern "C" {
    pub fn _configure_wide_argv(mode: _crt_argv_mode) -> errno_t;
}
extern "C" {
    pub fn _initialize_narrow_environment() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _initialize_wide_environment() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_initial_narrow_environment() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _get_initial_wide_environment() -> *mut *mut wchar_t;
}
extern "C" {
    pub fn _get_narrow_winmain_command_line() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _get_wide_winmain_command_line() -> *mut wchar_t;
}
extern "C" {
    pub fn __p__acmdln() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wcmdln() -> *mut *mut wchar_t;
}
pub type _PVFV = ::std::option::Option<unsafe extern "C" fn()>;
pub type _PIFV = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
pub type _PVFI = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
extern "C" {
    pub fn _initterm(_First: *mut _PVFV, _Last: *mut _PVFV);
}
extern "C" {
    pub fn _initterm_e(_First: *mut _PIFV, _Last: *mut _PIFV) -> ::std::os::raw::c_int;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _onexit_table_t {
    pub _first: *mut _PVFV,
    pub _last: *mut _PVFV,
    pub _end: *mut _PVFV,
}
#[test]
fn bindgen_test_layout__onexit_table_t() {
    assert_eq!(
        ::std::mem::size_of::<_onexit_table_t>(),
        24usize,
        concat!("Size of: ", stringify!(_onexit_table_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_onexit_table_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_onexit_table_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_onexit_table_t>()))._first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_onexit_table_t),
            "::",
            stringify!(_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_onexit_table_t>()))._last as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_onexit_table_t),
            "::",
            stringify!(_last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_onexit_table_t>()))._end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_onexit_table_t),
            "::",
            stringify!(_end)
        )
    );
}
extern "C" {
    pub fn _initialize_onexit_table(_Table: *mut _onexit_table_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _register_onexit_function(
        _Table: *mut _onexit_table_t,
        _Function: _onexit_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _execute_onexit_table(_Table: *mut _onexit_table_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _crt_atexit(_Function: _PVFV) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _crt_at_quick_exit(_Function: _PVFV) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __acrt_initialize() -> __crt_bool;
}
extern "C" {
    pub fn __acrt_uninitialize(_Terminating: __crt_bool) -> __crt_bool;
}
extern "C" {
    pub fn __acrt_uninitialize_critical(_Terminating: __crt_bool) -> __crt_bool;
}
extern "C" {
    pub fn __acrt_thread_attach() -> __crt_bool;
}
extern "C" {
    pub fn __acrt_thread_detach() -> __crt_bool;
}
extern "C" {
    pub fn _wexecl(_FileName: *const wchar_t, _ArgList: *const wchar_t, ...) -> isize;
}
extern "C" {
    pub fn _wexecle(_FileName: *const wchar_t, _ArgList: *const wchar_t, ...) -> isize;
}
extern "C" {
    pub fn _wexeclp(_FileName: *const wchar_t, _ArgList: *const wchar_t, ...) -> isize;
}
extern "C" {
    pub fn _wexeclpe(_FileName: *const wchar_t, _ArgList: *const wchar_t, ...) -> isize;
}
extern "C" {
    pub fn _wexecv(_FileName: *const wchar_t, _ArgList: *const *const wchar_t) -> isize;
}
extern "C" {
    pub fn _wexecve(
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
        _Env: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wexecvp(_FileName: *const wchar_t, _ArgList: *const *const wchar_t) -> isize;
}
extern "C" {
    pub fn _wexecvpe(
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
        _Env: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnl(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnle(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnlp(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnlpe(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnv(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnve(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
        _Env: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnvp(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnvpe(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
        _Env: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _cexit();
}
extern "C" {
    pub fn _c_exit();
}
pub type _tls_callback_type = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn _register_thread_local_exe_atexit_callback(_Callback: _tls_callback_type);
}
pub type _beginthread_proc_type =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type _beginthreadex_proc_type = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_uint,
>;
extern "C" {
    pub fn _beginthread(
        _StartAddress: _beginthread_proc_type,
        _StackSize: ::std::os::raw::c_uint,
        _ArgList: *mut ::std::os::raw::c_void,
    ) -> usize;
}
extern "C" {
    pub fn _endthread();
}
extern "C" {
    pub fn _beginthreadex(
        _Security: *mut ::std::os::raw::c_void,
        _StackSize: ::std::os::raw::c_uint,
        _StartAddress: _beginthreadex_proc_type,
        _ArgList: *mut ::std::os::raw::c_void,
        _InitFlag: ::std::os::raw::c_uint,
        _ThrdAddr: *mut ::std::os::raw::c_uint,
    ) -> usize;
}
extern "C" {
    pub fn _endthreadex(_ReturnCode: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _getpid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _cwait(
        _TermStat: *mut ::std::os::raw::c_int,
        _ProcHandle: isize,
        _Action: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn _execl(
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _execle(
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _execlp(
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _execlpe(
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _execv(
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn _execve(
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const *const ::std::os::raw::c_char,
        _Environment: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn _execvp(
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn _execvpe(
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const *const ::std::os::raw::c_char,
        _Environment: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn _spawnl(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _spawnle(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _spawnlp(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _spawnlpe(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _spawnv(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn _spawnve(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const *const ::std::os::raw::c_char,
        _Environment: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn _spawnvp(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn _spawnvpe(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const *const ::std::os::raw::c_char,
        _Environment: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn _loaddll(_FileName: *mut ::std::os::raw::c_char) -> isize;
}
extern "C" {
    pub fn _unloaddll(_Handle: isize) -> ::std::os::raw::c_int;
}
pub type _GetDllProcAddrProcType =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn _getdllprocaddr(
        _Handle: isize,
        _ProcedureName: *mut ::std::os::raw::c_char,
        _Ordinal: isize,
    ) -> _GetDllProcAddrProcType;
}
extern "C" {
    pub fn cwait(
        _TermStat: *mut ::std::os::raw::c_int,
        _ProcHandle: isize,
        _Action: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn execl(
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
extern "C" {
    pub fn execle(
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
extern "C" {
    pub fn execlp(
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
extern "C" {
    pub fn execlpe(
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
extern "C" {
    pub fn execv(
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn execve(
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const *const ::std::os::raw::c_char,
        _Environment: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn execvp(
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn execvpe(
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const *const ::std::os::raw::c_char,
        _Environment: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn spawnl(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
extern "C" {
    pub fn spawnle(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
extern "C" {
    pub fn spawnlp(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
extern "C" {
    pub fn spawnlpe(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
extern "C" {
    pub fn spawnv(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn spawnve(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const *const ::std::os::raw::c_char,
        _Environment: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn spawnvp(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn spawnvpe(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _Arguments: *const *const ::std::os::raw::c_char,
        _Environment: *const *const ::std::os::raw::c_char,
    ) -> isize;
}
extern "C" {
    pub fn getpid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn memchr(
        _Buf: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        _Dst: *mut ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strchr(
        _Str: *const ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        _Str: *const ::std::os::raw::c_char,
        _Ch: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        _Str: *const ::std::os::raw::c_char,
        _SubStr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wcschr(
        _Str: *const ::std::os::raw::c_ushort,
        _Ch: ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _memicmp_l(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcscpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstok_s(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(_String: *const wchar_t, _Control: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcslen(_String: *const ::std::os::raw::c_ushort) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcsnlen(_Source: *const wchar_t, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn wcsncat(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(_String: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsspn(_String: *const wchar_t, _Control: *const wchar_t) -> size_t;
}
extern "C" {
    pub fn wcstok(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror(_ErrorNumber: ::std::os::raw::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn __wcserror(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn __wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _ErrorMessage: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnset_s(
        _Destination: *mut wchar_t,
        _SizeInWords: size_t,
        _Value: wchar_t,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsset_s(_Destination: *mut wchar_t, _SizeInWords: size_t, _Value: wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s(_String: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s_l(_String: *mut wchar_t, _SizeInWords: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s(_String: *mut wchar_t, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s_l(_String: *mut wchar_t, _Size: size_t, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wcsxfrm_l(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcscoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcscoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strcat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn strncat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strncpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strtok_s(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
        _Context: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strdup(_Source: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror(_ErrorMessage: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _ErrorMessage: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror(_ErrorMessage: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlen(_Str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strlwr_s(_String: *mut ::std::os::raw::c_char, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strlwr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strlwr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __strncnt(_String: *const ::std::os::raw::c_char, _Count: size_t) -> size_t;
}
extern "C" {
    pub fn strncpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(_String: *const ::std::os::raw::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _strnset_s(
        _String: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Value: ::std::os::raw::c_int,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strnset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _Count: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strrev(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strset_s(
        _Destination: *mut ::std::os::raw::c_char,
        _DestinationSize: size_t,
        _Value: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _strset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtok(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s(_String: *mut ::std::os::raw::c_char, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strupr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strxfrm_l(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(_String: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strnset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _MaxCount: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrev(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
pub type _ino_t = ::std::os::raw::c_ushort;
pub type ino_t = _ino_t;
pub type _dev_t = ::std::os::raw::c_uint;
pub type dev_t = _dev_t;
pub type _off_t = ::std::os::raw::c_long;
pub type off_t = _off_t;
extern "C" {
    pub fn _calloc_base(_Count: size_t, _Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        _Count: ::std::os::raw::c_ulonglong,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(_Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: size_t, _Alignment: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
pub type max_align_t = f64;
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: size_t,
        _Dir: *mut wchar_t,
        _DirCount: size_t,
        _Filename: *mut wchar_t,
        _FilenameCount: size_t,
        _Ext: *mut wchar_t,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    assert_eq!(
        ::std::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDOUBLE>())).ld as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDOUBLE),
            "::",
            stringify!(ld)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_DOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_DOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_FLOAT>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_FLOAT),
            "::",
            stringify!(f)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LONGDOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LONGDOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    assert_eq!(
        ::std::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDBL12>())).ld12 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDBL12),
            "::",
            stringify!(ld12)
        )
    );
}
extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: size_t,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: size_t,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: size_t,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut size_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        36usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        4usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
}
extern "C" {
    pub fn _wasctime(_Tm: *const tm) -> *mut wchar_t;
}
extern "C" {
    pub fn _wasctime_s(_Buffer: *mut wchar_t, _SizeInWords: size_t, _Tm: *const tm) -> errno_t;
}
extern "C" {
    pub fn wcsftime(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Format: *const wchar_t,
        _Tm: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn _wcsftime_l(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Format: *const wchar_t,
        _Tm: *const tm,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wctime32(_Time: *const __time32_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wctime32_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Time: *const __time32_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctime64(_Time: *const __time64_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wctime64_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: size_t,
        _Time: *const __time64_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wstrdate_s(_Buffer: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wstrdate(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wstrtime_s(_Buffer: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wstrtime(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
pub type clock_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _timespec32 {
    pub tv_sec: __time32_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__timespec32() {
    assert_eq!(
        ::std::mem::size_of::<_timespec32>(),
        8usize,
        concat!("Size of: ", stringify!(_timespec32))
    );
    assert_eq!(
        ::std::mem::align_of::<_timespec32>(),
        4usize,
        concat!("Alignment of ", stringify!(_timespec32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_timespec32>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_timespec32),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_timespec32>())).tv_nsec as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_timespec32),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _timespec64 {
    pub tv_sec: __time64_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__timespec64() {
    assert_eq!(
        ::std::mem::size_of::<_timespec64>(),
        16usize,
        concat!("Size of: ", stringify!(_timespec64))
    );
    assert_eq!(
        ::std::mem::align_of::<_timespec64>(),
        8usize,
        concat!("Alignment of ", stringify!(_timespec64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_timespec64>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_timespec64),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_timespec64>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_timespec64),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
extern "C" {
    pub fn __daylight() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __dstbias() -> *mut ::std::os::raw::c_long;
}
extern "C" {
    pub fn __timezone() -> *mut ::std::os::raw::c_long;
}
extern "C" {
    pub fn __tzname() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _get_daylight(_Daylight: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_dstbias(_DaylightSavingsBias: *mut ::std::os::raw::c_long) -> errno_t;
}
extern "C" {
    pub fn _get_timezone(_TimeZone: *mut ::std::os::raw::c_long) -> errno_t;
}
extern "C" {
    pub fn _get_tzname(
        _ReturnValue: *mut size_t,
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Index: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn asctime(_Tm: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Tm: *const tm,
    ) -> errno_t;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn _ctime32(_Time: *const __time32_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ctime32_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Time: *const __time32_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _ctime64(_Time: *const __time64_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ctime64_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Time: *const __time64_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _difftime32(_Time1: __time32_t, _Time2: __time32_t) -> f64;
}
extern "C" {
    pub fn _difftime64(_Time1: __time64_t, _Time2: __time64_t) -> f64;
}
extern "C" {
    pub fn _gmtime32(_Time: *const __time32_t) -> *mut tm;
}
extern "C" {
    pub fn _gmtime32_s(_Tm: *mut tm, _Time: *const __time32_t) -> errno_t;
}
extern "C" {
    pub fn _gmtime64(_Time: *const __time64_t) -> *mut tm;
}
extern "C" {
    pub fn _gmtime64_s(_Tm: *mut tm, _Time: *const __time64_t) -> errno_t;
}
extern "C" {
    pub fn _localtime32(_Time: *const __time32_t) -> *mut tm;
}
extern "C" {
    pub fn _localtime32_s(_Tm: *mut tm, _Time: *const __time32_t) -> errno_t;
}
extern "C" {
    pub fn _localtime64(_Time: *const __time64_t) -> *mut tm;
}
extern "C" {
    pub fn _localtime64_s(_Tm: *mut tm, _Time: *const __time64_t) -> errno_t;
}
extern "C" {
    pub fn _mkgmtime32(_Tm: *mut tm) -> __time32_t;
}
extern "C" {
    pub fn _mkgmtime64(_Tm: *mut tm) -> __time64_t;
}
extern "C" {
    pub fn _mktime32(_Tm: *mut tm) -> __time32_t;
}
extern "C" {
    pub fn _mktime64(_Tm: *mut tm) -> __time64_t;
}
extern "C" {
    pub fn strftime(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Tm: *const tm,
    ) -> size_t;
}
extern "C" {
    pub fn _strftime_l(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxSize: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Tm: *const tm,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _strdate_s(_Buffer: *mut ::std::os::raw::c_char, _SizeInBytes: size_t) -> errno_t;
}
extern "C" {
    pub fn _strdate(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strtime_s(_Buffer: *mut ::std::os::raw::c_char, _SizeInBytes: size_t) -> errno_t;
}
extern "C" {
    pub fn _strtime(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _time32(_Time: *mut __time32_t) -> __time32_t;
}
extern "C" {
    pub fn _time64(_Time: *mut __time64_t) -> __time64_t;
}
extern "C" {
    pub fn _timespec32_get(
        _Ts: *mut _timespec32,
        _Base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _timespec64_get(
        _Ts: *mut _timespec64,
        _Base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tzset();
}
extern "C" {
    pub fn _getsystime(_Tm: *mut tm) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _setsystime(
        _Tm: *mut tm,
        _Milliseconds: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn tzset();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stat32 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: _off_t,
    pub st_atime: __time32_t,
    pub st_mtime: __time32_t,
    pub st_ctime: __time32_t,
}
#[test]
fn bindgen_test_layout__stat32() {
    assert_eq!(
        ::std::mem::size_of::<_stat32>(),
        36usize,
        concat!("Size of: ", stringify!(_stat32))
    );
    assert_eq!(
        ::std::mem::align_of::<_stat32>(),
        4usize,
        concat!("Alignment of ", stringify!(_stat32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_ino as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_mode as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_nlink as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_uid as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_gid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_rdev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_atime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_atime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_mtime as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32>())).st_ctime as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32),
            "::",
            stringify!(st_ctime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stat32i64 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: ::std::os::raw::c_longlong,
    pub st_atime: __time32_t,
    pub st_mtime: __time32_t,
    pub st_ctime: __time32_t,
}
#[test]
fn bindgen_test_layout__stat32i64() {
    assert_eq!(
        ::std::mem::size_of::<_stat32i64>(),
        48usize,
        concat!("Size of: ", stringify!(_stat32i64))
    );
    assert_eq!(
        ::std::mem::align_of::<_stat32i64>(),
        8usize,
        concat!("Alignment of ", stringify!(_stat32i64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_ino as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_mode as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_nlink as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_uid as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_gid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_rdev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_atime as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_atime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_mtime as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat32i64>())).st_ctime as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat32i64),
            "::",
            stringify!(st_ctime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stat64i32 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: _off_t,
    pub st_atime: __time64_t,
    pub st_mtime: __time64_t,
    pub st_ctime: __time64_t,
}
#[test]
fn bindgen_test_layout__stat64i32() {
    assert_eq!(
        ::std::mem::size_of::<_stat64i32>(),
        48usize,
        concat!("Size of: ", stringify!(_stat64i32))
    );
    assert_eq!(
        ::std::mem::align_of::<_stat64i32>(),
        8usize,
        concat!("Alignment of ", stringify!(_stat64i32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_ino as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_mode as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_nlink as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_uid as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_gid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_rdev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_atime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_atime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_mtime as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64i32>())).st_ctime as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64i32),
            "::",
            stringify!(st_ctime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stat64 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: ::std::os::raw::c_longlong,
    pub st_atime: __time64_t,
    pub st_mtime: __time64_t,
    pub st_ctime: __time64_t,
}
#[test]
fn bindgen_test_layout__stat64() {
    assert_eq!(
        ::std::mem::size_of::<_stat64>(),
        56usize,
        concat!("Size of: ", stringify!(_stat64))
    );
    assert_eq!(
        ::std::mem::align_of::<_stat64>(),
        8usize,
        concat!("Alignment of ", stringify!(_stat64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_ino as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_mode as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_nlink as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_uid as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_gid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_rdev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_atime as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_atime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_mtime as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_stat64>())).st_ctime as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_stat64),
            "::",
            stringify!(st_ctime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: _off_t,
    pub st_atime: time_t,
    pub st_mtime: time_t,
    pub st_ctime: time_t,
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        48usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtime as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctime as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctime)
        )
    );
}
extern "C" {
    pub fn _fstat32(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fstat32i64(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat32i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fstat64i32(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat64i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fstat64(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat32(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat32i64(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat32i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat64i32(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat64i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat64(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat32(_FileName: *const wchar_t, _Stat: *mut _stat32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat32i64(_FileName: *const wchar_t, _Stat: *mut _stat32i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat64i32(_FileName: *const wchar_t, _Stat: *mut _stat64i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat64(_FileName: *const wchar_t, _Stat: *mut _stat64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut alllevels: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut allbones: *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn win32_abort();
}
extern "C" {
    pub fn nttty_preference_update(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn toggle_mouse_support();
}
extern "C" {
    pub fn map_subkeyvalue(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn raw_clear_screen();
}
pub type _fsize_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _wfinddata32_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time32_t,
    pub time_access: __time32_t,
    pub time_write: __time32_t,
    pub size: _fsize_t,
    pub name: [wchar_t; 260usize],
}
#[test]
fn bindgen_test_layout__wfinddata32_t() {
    assert_eq!(
        ::std::mem::size_of::<_wfinddata32_t>(),
        540usize,
        concat!("Size of: ", stringify!(_wfinddata32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_wfinddata32_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_wfinddata32_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32_t>())).attrib as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32_t),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32_t>())).time_create as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32_t),
            "::",
            stringify!(time_create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32_t>())).time_access as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32_t),
            "::",
            stringify!(time_access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32_t>())).time_write as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32_t),
            "::",
            stringify!(time_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32_t>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32_t>())).name as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _wfinddata32i64_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time32_t,
    pub time_access: __time32_t,
    pub time_write: __time32_t,
    pub size: ::std::os::raw::c_longlong,
    pub name: [wchar_t; 260usize],
}
#[test]
fn bindgen_test_layout__wfinddata32i64_t() {
    assert_eq!(
        ::std::mem::size_of::<_wfinddata32i64_t>(),
        544usize,
        concat!("Size of: ", stringify!(_wfinddata32i64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_wfinddata32i64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_wfinddata32i64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32i64_t>())).attrib as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32i64_t),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32i64_t>())).time_create as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32i64_t),
            "::",
            stringify!(time_create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32i64_t>())).time_access as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32i64_t),
            "::",
            stringify!(time_access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32i64_t>())).time_write as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32i64_t),
            "::",
            stringify!(time_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32i64_t>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32i64_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata32i64_t>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata32i64_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _wfinddata64i32_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time64_t,
    pub time_access: __time64_t,
    pub time_write: __time64_t,
    pub size: _fsize_t,
    pub name: [wchar_t; 260usize],
}
#[test]
fn bindgen_test_layout__wfinddata64i32_t() {
    assert_eq!(
        ::std::mem::size_of::<_wfinddata64i32_t>(),
        560usize,
        concat!("Size of: ", stringify!(_wfinddata64i32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_wfinddata64i32_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_wfinddata64i32_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64i32_t>())).attrib as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64i32_t),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64i32_t>())).time_create as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64i32_t),
            "::",
            stringify!(time_create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64i32_t>())).time_access as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64i32_t),
            "::",
            stringify!(time_access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64i32_t>())).time_write as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64i32_t),
            "::",
            stringify!(time_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64i32_t>())).size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64i32_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64i32_t>())).name as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64i32_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _wfinddata64_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time64_t,
    pub time_access: __time64_t,
    pub time_write: __time64_t,
    pub size: ::std::os::raw::c_longlong,
    pub name: [wchar_t; 260usize],
}
#[test]
fn bindgen_test_layout__wfinddata64_t() {
    assert_eq!(
        ::std::mem::size_of::<_wfinddata64_t>(),
        560usize,
        concat!("Size of: ", stringify!(_wfinddata64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_wfinddata64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_wfinddata64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64_t>())).attrib as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64_t),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64_t>())).time_create as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64_t),
            "::",
            stringify!(time_create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64_t>())).time_access as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64_t),
            "::",
            stringify!(time_access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64_t>())).time_write as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64_t),
            "::",
            stringify!(time_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64_t>())).size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_wfinddata64_t>())).name as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_wfinddata64_t),
            "::",
            stringify!(name)
        )
    );
}
extern "C" {
    pub fn _waccess(
        _FileName: *const wchar_t,
        _AccessMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _waccess_s(_FileName: *const wchar_t, _AccessMode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _wchmod(
        _FileName: *const wchar_t,
        _Mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcreat(
        _FileName: *const wchar_t,
        _PermissionMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wfindfirst32(_FileName: *const wchar_t, _FindData: *mut _wfinddata32_t) -> isize;
}
extern "C" {
    pub fn _wfindnext32(
        _FindHandle: isize,
        _FindData: *mut _wfinddata32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wunlink(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wrename(
        _OldFileName: *const wchar_t,
        _NewFileName: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wmktemp_s(_TemplateName: *mut wchar_t, _SizeInWords: size_t) -> errno_t;
}
extern "C" {
    pub fn _wmktemp(_TemplateName: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wfindfirst32i64(_FileName: *const wchar_t, _FindData: *mut _wfinddata32i64_t) -> isize;
}
extern "C" {
    pub fn _wfindfirst64i32(_FileName: *const wchar_t, _FindData: *mut _wfinddata64i32_t) -> isize;
}
extern "C" {
    pub fn _wfindfirst64(_FileName: *const wchar_t, _FindData: *mut _wfinddata64_t) -> isize;
}
extern "C" {
    pub fn _wfindnext32i64(
        _FindHandle: isize,
        _FindData: *mut _wfinddata32i64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wfindnext64i32(
        _FindHandle: isize,
        _FindData: *mut _wfinddata64i32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wfindnext64(
        _FindHandle: isize,
        _FindData: *mut _wfinddata64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wsopen_s(
        _FileHandle: *mut ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        _PermissionFlag: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsopen_dispatch(
        _FileName: *const wchar_t,
        _OFlag: ::std::os::raw::c_int,
        _ShFlag: ::std::os::raw::c_int,
        _PMode: ::std::os::raw::c_int,
        _PFileHandle: *mut ::std::os::raw::c_int,
        _BSecure: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _wopen(
        _FileName: *const wchar_t,
        _OpenFlag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wsopen(
        _FileName: *const wchar_t,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _finddata32_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time32_t,
    pub time_access: __time32_t,
    pub time_write: __time32_t,
    pub size: _fsize_t,
    pub name: [::std::os::raw::c_char; 260usize],
}
#[test]
fn bindgen_test_layout__finddata32_t() {
    assert_eq!(
        ::std::mem::size_of::<_finddata32_t>(),
        280usize,
        concat!("Size of: ", stringify!(_finddata32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_finddata32_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_finddata32_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_finddata32_t>())).attrib as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_finddata32_t),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_finddata32_t>())).time_create as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_finddata32_t),
            "::",
            stringify!(time_create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_finddata32_t>())).time_access as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_finddata32_t),
            "::",
            stringify!(time_access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_finddata32_t>())).time_write as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_finddata32_t),
            "::",
            stringify!(time_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_finddata32_t>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_finddata32_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_finddata32_t>())).name as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_finddata32_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _finddata32i64_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time32_t,
    pub time_access: __time32_t,
    pub time_write: __time32_t,
    pub size: ::std::os::raw::c_longlong,
    pub name: [::std::os::raw::c_char; 260usize],
}
#[test]
fn bindgen_test_layout__finddata32i64_t() {
    assert_eq!(
        ::std::mem::size_of::<_finddata32i64_t>(),
        288usize,
        concat!("Size of: ", stringify!(_finddata32i64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_finddata32i64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_finddata32i64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_finddata32i64_t>())).attrib as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_finddata32i64_t),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_finddata32i64_t>())).time_create as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_finddata32i64_t),
            "::",
            stringify!(time_create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_finddata32i64_t>())).time_access as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_finddata32i64_t),
            "::",
            stringify!(time_access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_finddata32i64_t>())).time_write as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_finddata32i64_t),
            "::",
            stringify!(time_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_finddata32i64_t>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_finddata32i64_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_finddata32i64_t>())).name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_finddata32i64_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _finddata64i32_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time64_t,
    pub time_access: __time64_t,
    pub time_write: __time64_t,
    pub size: _fsize_t,
    pub name: [::std::os::raw::c_char; 260usize],
}
#[test]
fn bindgen_test_layout__finddata64i32_t() {
    assert_eq!(
        ::std::mem::size_of::<_finddata64i32_t>(),
        296usize,
        concat!("Size of: ", stringify!(_finddata64i32_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_finddata64i32_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_finddata64i32_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_finddata64i32_t>())).attrib as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_finddata64i32_t),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_finddata64i32_t>())).time_create as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_finddata64i32_t),
            "::",
            stringify!(time_create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_finddata64i32_t>())).time_access as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_finddata64i32_t),
            "::",
            stringify!(time_access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_finddata64i32_t>())).time_write as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_finddata64i32_t),
            "::",
            stringify!(time_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_finddata64i32_t>())).size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_finddata64i32_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_finddata64i32_t>())).name as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_finddata64i32_t),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __finddata64_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time64_t,
    pub time_access: __time64_t,
    pub time_write: __time64_t,
    pub size: ::std::os::raw::c_longlong,
    pub name: [::std::os::raw::c_char; 260usize],
}
#[test]
fn bindgen_test_layout___finddata64_t() {
    assert_eq!(
        ::std::mem::size_of::<__finddata64_t>(),
        304usize,
        concat!("Size of: ", stringify!(__finddata64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__finddata64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__finddata64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__finddata64_t>())).attrib as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__finddata64_t),
            "::",
            stringify!(attrib)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__finddata64_t>())).time_create as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__finddata64_t),
            "::",
            stringify!(time_create)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__finddata64_t>())).time_access as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__finddata64_t),
            "::",
            stringify!(time_access)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__finddata64_t>())).time_write as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__finddata64_t),
            "::",
            stringify!(time_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__finddata64_t>())).size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__finddata64_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__finddata64_t>())).name as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__finddata64_t),
            "::",
            stringify!(name)
        )
    );
}
extern "C" {
    pub fn _access(
        _FileName: *const ::std::os::raw::c_char,
        _AccessMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _access_s(
        _FileName: *const ::std::os::raw::c_char,
        _AccessMode: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _chmod(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _chsize(
        _FileHandle: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _chsize_s(
        _FileHandle: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_longlong,
    ) -> errno_t;
}
extern "C" {
    pub fn _close(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _commit(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _creat(
        _FileName: *const ::std::os::raw::c_char,
        _PermissionMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _dup(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _dup2(
        _FileHandleSrc: ::std::os::raw::c_int,
        _FileHandleDst: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _eof(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _filelength(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _findfirst32(
        _FileName: *const ::std::os::raw::c_char,
        _FindData: *mut _finddata32_t,
    ) -> isize;
}
extern "C" {
    pub fn _findnext32(_FindHandle: isize, _FindData: *mut _finddata32_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _findclose(_FindHandle: isize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_osfhandle(_FileHandle: ::std::os::raw::c_int) -> isize;
}
extern "C" {
    pub fn _isatty(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _locking(
        _FileHandle: ::std::os::raw::c_int,
        _LockMode: ::std::os::raw::c_int,
        _NumOfBytes: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lseek(
        _FileHandle: ::std::os::raw::c_int,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _mktemp_s(_TemplateName: *mut ::std::os::raw::c_char, _Size: size_t) -> errno_t;
}
extern "C" {
    pub fn _mktemp(_TemplateName: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _open_osfhandle(
        _OSFileHandle: isize,
        _Flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _pipe(
        _PtHandles: *mut ::std::os::raw::c_int,
        _PipeSize: ::std::os::raw::c_uint,
        _TextMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _read(
        _FileHandle: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_void,
        _MaxCharCount: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _setmode(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tell(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _umask(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _umask_s(
        _NewMode: ::std::os::raw::c_int,
        _OldMode: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _write(
        _FileHandle: ::std::os::raw::c_int,
        _Buf: *const ::std::os::raw::c_void,
        _MaxCharCount: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _filelengthi64(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _findfirst32i64(
        _FileName: *const ::std::os::raw::c_char,
        _FindData: *mut _finddata32i64_t,
    ) -> isize;
}
extern "C" {
    pub fn _findfirst64i32(
        _FileName: *const ::std::os::raw::c_char,
        _FindData: *mut _finddata64i32_t,
    ) -> isize;
}
extern "C" {
    pub fn _findfirst64(
        _FileName: *const ::std::os::raw::c_char,
        _FindData: *mut __finddata64_t,
    ) -> isize;
}
extern "C" {
    pub fn _findnext32i64(
        _FindHandle: isize,
        _FindData: *mut _finddata32i64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _findnext64i32(
        _FindHandle: isize,
        _FindData: *mut _finddata64i32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _findnext64(_FindHandle: isize, _FindData: *mut __finddata64_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lseeki64(
        _FileHandle: ::std::os::raw::c_int,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _telli64(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _sopen_s(
        _FileHandle: *mut ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        _PermissionMode: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _sopen_s_nolock(
        _FileHandle: *mut ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        _PermissionMode: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _sopen_dispatch(
        _FileName: *const ::std::os::raw::c_char,
        _OFlag: ::std::os::raw::c_int,
        _ShFlag: ::std::os::raw::c_int,
        _PMode: ::std::os::raw::c_int,
        _PFileHandle: *mut ::std::os::raw::c_int,
        _BSecure: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _open(
        _FileName: *const ::std::os::raw::c_char,
        _OpenFlag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _sopen(
        _FileName: *const ::std::os::raw::c_char,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn access(
        _FileName: *const ::std::os::raw::c_char,
        _AccessMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmod(
        _FileName: *const ::std::os::raw::c_char,
        _AccessMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chsize(
        _FileHandle: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(
        _FileName: *const ::std::os::raw::c_char,
        _PermissionMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(
        _FileHandleSrc: ::std::os::raw::c_int,
        _FileHandleDst: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eof(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filelength(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn isatty(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn locking(
        _FileHandle: ::std::os::raw::c_int,
        _LockMode: ::std::os::raw::c_int,
        _NumOfBytes: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        _FileHandle: ::std::os::raw::c_int,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mktemp(_TemplateName: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn open(
        _FileName: *const ::std::os::raw::c_char,
        _OpenFlag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        _FileHandle: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_void,
        _MaxCharCount: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setmode(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sopen(
        _FileName: *const ::std::os::raw::c_char,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tell(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn umask(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write(
        _FileHandle: ::std::os::raw::c_int,
        _Buf: *const ::std::os::raw::c_void,
        _MaxCharCount: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wgetcwd(_DstBuf: *mut wchar_t, _SizeInWords: ::std::os::raw::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetdcwd(
        _Drive: ::std::os::raw::c_int,
        _DstBuf: *mut wchar_t,
        _SizeInWords: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wchdir(_Path: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wmkdir(_Path: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wrmdir(_Path: *const wchar_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _diskfree_t {
    pub total_clusters: ::std::os::raw::c_uint,
    pub avail_clusters: ::std::os::raw::c_uint,
    pub sectors_per_cluster: ::std::os::raw::c_uint,
    pub bytes_per_sector: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__diskfree_t() {
    assert_eq!(
        ::std::mem::size_of::<_diskfree_t>(),
        16usize,
        concat!("Size of: ", stringify!(_diskfree_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_diskfree_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_diskfree_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_diskfree_t>())).total_clusters as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_diskfree_t),
            "::",
            stringify!(total_clusters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_diskfree_t>())).avail_clusters as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_diskfree_t),
            "::",
            stringify!(avail_clusters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_diskfree_t>())).sectors_per_cluster as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_diskfree_t),
            "::",
            stringify!(sectors_per_cluster)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_diskfree_t>())).bytes_per_sector as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_diskfree_t),
            "::",
            stringify!(bytes_per_sector)
        )
    );
}
extern "C" {
    pub fn _getdiskfree(
        _Drive: ::std::os::raw::c_uint,
        _DiskFree: *mut _diskfree_t,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _chdrive(_Drive: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getdrive() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getdrives() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _getcwd(
        _DstBuf: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _getdcwd(
        _Drive: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _chdir(_Path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mkdir(_Path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _rmdir(_Path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(
        _DstBuf: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn chdir(_Path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdir(_Path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(_Path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _cgetws_s(
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _SizeRead: *mut size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _cputws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getwch() -> wint_t;
}
extern "C" {
    pub fn _getwche() -> wint_t;
}
extern "C" {
    pub fn _putwch(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _ungetwch(_Character: wint_t) -> wint_t;
}
extern "C" {
    pub fn _getwch_nolock() -> wint_t;
}
extern "C" {
    pub fn _getwche_nolock() -> wint_t;
}
extern "C" {
    pub fn _putwch_nolock(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _ungetwch_nolock(_Character: wint_t) -> wint_t;
}
extern "C" {
    pub fn __conio_common_vcwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _cgets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _SizeRead: *mut size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _cputs(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _kbhit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getche() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putch(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetch(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getch_nolock() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getche_nolock() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putch_nolock(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetch_nolock(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgets(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cputs(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getche() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kbhit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putch(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetch(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_win32_option(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nethack_exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn file_exists(arg1: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn file_newer(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> boolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lua_State {
    _unused: [u8; 0],
}
pub type lua_Number = f64;
pub type lua_Integer = ::std::os::raw::c_longlong;
pub type lua_Unsigned = ::std::os::raw::c_ulonglong;
pub type lua_KContext = isize;
pub type lua_CFunction =
    ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State) -> ::std::os::raw::c_int>;
pub type lua_KFunction = ::std::option::Option<
    unsafe extern "C" fn(
        L: *mut lua_State,
        status: ::std::os::raw::c_int,
        ctx: lua_KContext,
    ) -> ::std::os::raw::c_int,
>;
pub type lua_Reader = ::std::option::Option<
    unsafe extern "C" fn(
        L: *mut lua_State,
        ud: *mut ::std::os::raw::c_void,
        sz: *mut size_t,
    ) -> *const ::std::os::raw::c_char,
>;
pub type lua_Writer = ::std::option::Option<
    unsafe extern "C" fn(
        L: *mut lua_State,
        p: *const ::std::os::raw::c_void,
        sz: size_t,
        ud: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type lua_Alloc = ::std::option::Option<
    unsafe extern "C" fn(
        ud: *mut ::std::os::raw::c_void,
        ptr: *mut ::std::os::raw::c_void,
        osize: size_t,
        nsize: size_t,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type lua_WarnFunction = ::std::option::Option<
    unsafe extern "C" fn(
        ud: *mut ::std::os::raw::c_void,
        msg: *const ::std::os::raw::c_char,
        tocont: ::std::os::raw::c_int,
    ),
>;
extern "C" {
    pub static mut lua_ident: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn lua_newstate(f: lua_Alloc, ud: *mut ::std::os::raw::c_void) -> *mut lua_State;
}
extern "C" {
    pub fn lua_close(L: *mut lua_State);
}
extern "C" {
    pub fn lua_newthread(L: *mut lua_State) -> *mut lua_State;
}
extern "C" {
    pub fn lua_resetthread(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_atpanic(L: *mut lua_State, panicf: lua_CFunction) -> lua_CFunction;
}
extern "C" {
    pub fn lua_version(L: *mut lua_State) -> lua_Number;
}
extern "C" {
    pub fn lua_absindex(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_gettop(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_settop(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_pushvalue(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_rotate(L: *mut lua_State, idx: ::std::os::raw::c_int, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_copy(
        L: *mut lua_State,
        fromidx: ::std::os::raw::c_int,
        toidx: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn lua_checkstack(L: *mut lua_State, n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_xmove(from: *mut lua_State, to: *mut lua_State, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_isnumber(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_isstring(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_iscfunction(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_isinteger(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_isuserdata(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_type(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_typename(
        L: *mut lua_State,
        tp: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_tonumberx(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        isnum: *mut ::std::os::raw::c_int,
    ) -> lua_Number;
}
extern "C" {
    pub fn lua_tointegerx(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        isnum: *mut ::std::os::raw::c_int,
    ) -> lua_Integer;
}
extern "C" {
    pub fn lua_toboolean(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_tolstring(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        len: *mut size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_rawlen(L: *mut lua_State, idx: ::std::os::raw::c_int) -> lua_Unsigned;
}
extern "C" {
    pub fn lua_tocfunction(L: *mut lua_State, idx: ::std::os::raw::c_int) -> lua_CFunction;
}
extern "C" {
    pub fn lua_touserdata(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lua_tothread(L: *mut lua_State, idx: ::std::os::raw::c_int) -> *mut lua_State;
}
extern "C" {
    pub fn lua_topointer(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn lua_arith(L: *mut lua_State, op: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_rawequal(
        L: *mut lua_State,
        idx1: ::std::os::raw::c_int,
        idx2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_compare(
        L: *mut lua_State,
        idx1: ::std::os::raw::c_int,
        idx2: ::std::os::raw::c_int,
        op: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_pushnil(L: *mut lua_State);
}
extern "C" {
    pub fn lua_pushnumber(L: *mut lua_State, n: lua_Number);
}
extern "C" {
    pub fn lua_pushinteger(L: *mut lua_State, n: lua_Integer);
}
extern "C" {
    pub fn lua_pushlstring(
        L: *mut lua_State,
        s: *const ::std::os::raw::c_char,
        len: size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_pushstring(
        L: *mut lua_State,
        s: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_pushvfstring(
        L: *mut lua_State,
        fmt: *const ::std::os::raw::c_char,
        argp: va_list,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_pushfstring(
        L: *mut lua_State,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_pushcclosure(L: *mut lua_State, fn_: lua_CFunction, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_pushboolean(L: *mut lua_State, b: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_pushlightuserdata(L: *mut lua_State, p: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn lua_pushthread(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_getglobal(
        L: *mut lua_State,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_gettable(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_getfield(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        k: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_geti(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        n: lua_Integer,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_rawget(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_rawgeti(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        n: lua_Integer,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_rawgetp(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_createtable(
        L: *mut lua_State,
        narr: ::std::os::raw::c_int,
        nrec: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn lua_newuserdatauv(
        L: *mut lua_State,
        sz: size_t,
        nuvalue: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lua_getmetatable(
        L: *mut lua_State,
        objindex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_getiuservalue(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_setglobal(L: *mut lua_State, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn lua_settable(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_setfield(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        k: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn lua_seti(L: *mut lua_State, idx: ::std::os::raw::c_int, n: lua_Integer);
}
extern "C" {
    pub fn lua_rawset(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_rawseti(L: *mut lua_State, idx: ::std::os::raw::c_int, n: lua_Integer);
}
extern "C" {
    pub fn lua_rawsetp(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn lua_setmetatable(
        L: *mut lua_State,
        objindex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_setiuservalue(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_callk(
        L: *mut lua_State,
        nargs: ::std::os::raw::c_int,
        nresults: ::std::os::raw::c_int,
        ctx: lua_KContext,
        k: lua_KFunction,
    );
}
extern "C" {
    pub fn lua_pcallk(
        L: *mut lua_State,
        nargs: ::std::os::raw::c_int,
        nresults: ::std::os::raw::c_int,
        errfunc: ::std::os::raw::c_int,
        ctx: lua_KContext,
        k: lua_KFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_load(
        L: *mut lua_State,
        reader: lua_Reader,
        dt: *mut ::std::os::raw::c_void,
        chunkname: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_dump(
        L: *mut lua_State,
        writer: lua_Writer,
        data: *mut ::std::os::raw::c_void,
        strip: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_yieldk(
        L: *mut lua_State,
        nresults: ::std::os::raw::c_int,
        ctx: lua_KContext,
        k: lua_KFunction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_resume(
        L: *mut lua_State,
        from: *mut lua_State,
        narg: ::std::os::raw::c_int,
        nres: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_status(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_isyieldable(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_setwarnf(L: *mut lua_State, f: lua_WarnFunction, ud: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn lua_warning(
        L: *mut lua_State,
        msg: *const ::std::os::raw::c_char,
        tocont: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn lua_gc(L: *mut lua_State, what: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_error(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_next(L: *mut lua_State, idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_concat(L: *mut lua_State, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_len(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lua_stringtonumber(L: *mut lua_State, s: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn lua_getallocf(L: *mut lua_State, ud: *mut *mut ::std::os::raw::c_void) -> lua_Alloc;
}
extern "C" {
    pub fn lua_setallocf(L: *mut lua_State, f: lua_Alloc, ud: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn lua_toclose(L: *mut lua_State, idx: ::std::os::raw::c_int);
}
pub type lua_Hook =
    ::std::option::Option<unsafe extern "C" fn(L: *mut lua_State, ar: *mut lua_Debug)>;
extern "C" {
    pub fn lua_getstack(
        L: *mut lua_State,
        level: ::std::os::raw::c_int,
        ar: *mut lua_Debug,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_getinfo(
        L: *mut lua_State,
        what: *const ::std::os::raw::c_char,
        ar: *mut lua_Debug,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_getlocal(
        L: *mut lua_State,
        ar: *const lua_Debug,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_setlocal(
        L: *mut lua_State,
        ar: *const lua_Debug,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_getupvalue(
        L: *mut lua_State,
        funcindex: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_setupvalue(
        L: *mut lua_State,
        funcindex: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lua_upvalueid(
        L: *mut lua_State,
        fidx: ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lua_upvaluejoin(
        L: *mut lua_State,
        fidx1: ::std::os::raw::c_int,
        n1: ::std::os::raw::c_int,
        fidx2: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn lua_sethook(
        L: *mut lua_State,
        func: lua_Hook,
        mask: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn lua_gethook(L: *mut lua_State) -> lua_Hook;
}
extern "C" {
    pub fn lua_gethookmask(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_gethookcount(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lua_setcstacklimit(
        L: *mut lua_State,
        limit: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lua_Debug {
    pub event: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
    pub namewhat: *const ::std::os::raw::c_char,
    pub what: *const ::std::os::raw::c_char,
    pub source: *const ::std::os::raw::c_char,
    pub srclen: size_t,
    pub currentline: ::std::os::raw::c_int,
    pub linedefined: ::std::os::raw::c_int,
    pub lastlinedefined: ::std::os::raw::c_int,
    pub nups: ::std::os::raw::c_uchar,
    pub nparams: ::std::os::raw::c_uchar,
    pub isvararg: ::std::os::raw::c_char,
    pub istailcall: ::std::os::raw::c_char,
    pub ftransfer: ::std::os::raw::c_ushort,
    pub ntransfer: ::std::os::raw::c_ushort,
    pub short_src: [::std::os::raw::c_char; 60usize],
    pub i_ci: *mut CallInfo,
}
#[test]
fn bindgen_test_layout_lua_Debug() {
    assert_eq!(
        ::std::mem::size_of::<lua_Debug>(),
        136usize,
        concat!("Size of: ", stringify!(lua_Debug))
    );
    assert_eq!(
        ::std::mem::align_of::<lua_Debug>(),
        8usize,
        concat!("Alignment of ", stringify!(lua_Debug))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).event as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).namewhat as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(namewhat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).what as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(what)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).source as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).srclen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(srclen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).currentline as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(currentline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).linedefined as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(linedefined)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).lastlinedefined as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(lastlinedefined)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).nups as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(nups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).nparams as *const _ as usize },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(nparams)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).isvararg as *const _ as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(isvararg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).istailcall as *const _ as usize },
        63usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(istailcall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).ftransfer as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(ftransfer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).ntransfer as *const _ as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(ntransfer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).short_src as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(short_src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lua_Debug>())).i_ci as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(lua_Debug),
            "::",
            stringify!(i_ci)
        )
    );
}
extern "C" {
    pub fn luaopen_base(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaopen_coroutine(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaopen_table(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaopen_io(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaopen_os(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaopen_string(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaopen_utf8(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaopen_math(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaopen_debug(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaopen_package(L: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaL_openlibs(L: *mut lua_State);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct luaL_Reg {
    pub name: *const ::std::os::raw::c_char,
    pub func: lua_CFunction,
}
#[test]
fn bindgen_test_layout_luaL_Reg() {
    assert_eq!(
        ::std::mem::size_of::<luaL_Reg>(),
        16usize,
        concat!("Size of: ", stringify!(luaL_Reg))
    );
    assert_eq!(
        ::std::mem::align_of::<luaL_Reg>(),
        8usize,
        concat!("Alignment of ", stringify!(luaL_Reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<luaL_Reg>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Reg),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<luaL_Reg>())).func as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Reg),
            "::",
            stringify!(func)
        )
    );
}
extern "C" {
    pub fn luaL_checkversion_(L: *mut lua_State, ver: lua_Number, sz: size_t);
}
extern "C" {
    pub fn luaL_getmetafield(
        L: *mut lua_State,
        obj: ::std::os::raw::c_int,
        e: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaL_callmeta(
        L: *mut lua_State,
        obj: ::std::os::raw::c_int,
        e: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaL_tolstring(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        len: *mut size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn luaL_argerror(
        L: *mut lua_State,
        arg: ::std::os::raw::c_int,
        extramsg: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaL_typeerror(
        L: *mut lua_State,
        arg: ::std::os::raw::c_int,
        tname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaL_checklstring(
        L: *mut lua_State,
        arg: ::std::os::raw::c_int,
        l: *mut size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn luaL_optlstring(
        L: *mut lua_State,
        arg: ::std::os::raw::c_int,
        def: *const ::std::os::raw::c_char,
        l: *mut size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn luaL_checknumber(L: *mut lua_State, arg: ::std::os::raw::c_int) -> lua_Number;
}
extern "C" {
    pub fn luaL_optnumber(
        L: *mut lua_State,
        arg: ::std::os::raw::c_int,
        def: lua_Number,
    ) -> lua_Number;
}
extern "C" {
    pub fn luaL_checkinteger(L: *mut lua_State, arg: ::std::os::raw::c_int) -> lua_Integer;
}
extern "C" {
    pub fn luaL_optinteger(
        L: *mut lua_State,
        arg: ::std::os::raw::c_int,
        def: lua_Integer,
    ) -> lua_Integer;
}
extern "C" {
    pub fn luaL_checkstack(
        L: *mut lua_State,
        sz: ::std::os::raw::c_int,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn luaL_checktype(L: *mut lua_State, arg: ::std::os::raw::c_int, t: ::std::os::raw::c_int);
}
extern "C" {
    pub fn luaL_checkany(L: *mut lua_State, arg: ::std::os::raw::c_int);
}
extern "C" {
    pub fn luaL_newmetatable(
        L: *mut lua_State,
        tname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaL_setmetatable(L: *mut lua_State, tname: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn luaL_testudata(
        L: *mut lua_State,
        ud: ::std::os::raw::c_int,
        tname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn luaL_checkudata(
        L: *mut lua_State,
        ud: ::std::os::raw::c_int,
        tname: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn luaL_where(L: *mut lua_State, lvl: ::std::os::raw::c_int);
}
extern "C" {
    pub fn luaL_error(
        L: *mut lua_State,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaL_checkoption(
        L: *mut lua_State,
        arg: ::std::os::raw::c_int,
        def: *const ::std::os::raw::c_char,
        lst: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaL_fileresult(
        L: *mut lua_State,
        stat: ::std::os::raw::c_int,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaL_execresult(L: *mut lua_State, stat: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaL_ref(L: *mut lua_State, t: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaL_unref(L: *mut lua_State, t: ::std::os::raw::c_int, ref_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn luaL_loadfilex(
        L: *mut lua_State,
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaL_loadbufferx(
        L: *mut lua_State,
        buff: *const ::std::os::raw::c_char,
        sz: size_t,
        name: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaL_loadstring(
        L: *mut lua_State,
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaL_newstate() -> *mut lua_State;
}
extern "C" {
    pub fn luaL_len(L: *mut lua_State, idx: ::std::os::raw::c_int) -> lua_Integer;
}
extern "C" {
    pub fn luaL_addgsub(
        b: *mut luaL_Buffer,
        s: *const ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
        r: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn luaL_gsub(
        L: *mut lua_State,
        s: *const ::std::os::raw::c_char,
        p: *const ::std::os::raw::c_char,
        r: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn luaL_setfuncs(L: *mut lua_State, l: *const luaL_Reg, nup: ::std::os::raw::c_int);
}
extern "C" {
    pub fn luaL_getsubtable(
        L: *mut lua_State,
        idx: ::std::os::raw::c_int,
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn luaL_traceback(
        L: *mut lua_State,
        L1: *mut lua_State,
        msg: *const ::std::os::raw::c_char,
        level: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn luaL_requiref(
        L: *mut lua_State,
        modname: *const ::std::os::raw::c_char,
        openf: lua_CFunction,
        glb: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct luaL_Buffer {
    pub b: *mut ::std::os::raw::c_char,
    pub size: size_t,
    pub n: size_t,
    pub L: *mut lua_State,
    pub init: luaL_Buffer__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union luaL_Buffer__bindgen_ty_1 {
    pub n: lua_Number,
    pub u: f64,
    pub s: *mut ::std::os::raw::c_void,
    pub i: lua_Integer,
    pub l: ::std::os::raw::c_long,
    pub b: [::std::os::raw::c_char; 1024usize],
}
#[test]
fn bindgen_test_layout_luaL_Buffer__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<luaL_Buffer__bindgen_ty_1>(),
        1024usize,
        concat!("Size of: ", stringify!(luaL_Buffer__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<luaL_Buffer__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(luaL_Buffer__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<luaL_Buffer__bindgen_ty_1>())).n as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Buffer__bindgen_ty_1),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<luaL_Buffer__bindgen_ty_1>())).u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Buffer__bindgen_ty_1),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<luaL_Buffer__bindgen_ty_1>())).s as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Buffer__bindgen_ty_1),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<luaL_Buffer__bindgen_ty_1>())).i as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Buffer__bindgen_ty_1),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<luaL_Buffer__bindgen_ty_1>())).l as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Buffer__bindgen_ty_1),
            "::",
            stringify!(l)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<luaL_Buffer__bindgen_ty_1>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Buffer__bindgen_ty_1),
            "::",
            stringify!(b)
        )
    );
}
#[test]
fn bindgen_test_layout_luaL_Buffer() {
    assert_eq!(
        ::std::mem::size_of::<luaL_Buffer>(),
        1056usize,
        concat!("Size of: ", stringify!(luaL_Buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<luaL_Buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(luaL_Buffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<luaL_Buffer>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Buffer),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<luaL_Buffer>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Buffer),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<luaL_Buffer>())).n as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Buffer),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<luaL_Buffer>())).L as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Buffer),
            "::",
            stringify!(L)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<luaL_Buffer>())).init as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Buffer),
            "::",
            stringify!(init)
        )
    );
}
extern "C" {
    pub fn luaL_buffinit(L: *mut lua_State, B: *mut luaL_Buffer);
}
extern "C" {
    pub fn luaL_prepbuffsize(B: *mut luaL_Buffer, sz: size_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn luaL_addlstring(B: *mut luaL_Buffer, s: *const ::std::os::raw::c_char, l: size_t);
}
extern "C" {
    pub fn luaL_addstring(B: *mut luaL_Buffer, s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn luaL_addvalue(B: *mut luaL_Buffer);
}
extern "C" {
    pub fn luaL_pushresult(B: *mut luaL_Buffer);
}
extern "C" {
    pub fn luaL_pushresultsize(B: *mut luaL_Buffer, sz: size_t);
}
extern "C" {
    pub fn luaL_buffinitsize(
        L: *mut lua_State,
        B: *mut luaL_Buffer,
        sz: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct luaL_Stream {
    pub f: *mut FILE,
    pub closef: lua_CFunction,
}
#[test]
fn bindgen_test_layout_luaL_Stream() {
    assert_eq!(
        ::std::mem::size_of::<luaL_Stream>(),
        16usize,
        concat!("Size of: ", stringify!(luaL_Stream))
    );
    assert_eq!(
        ::std::mem::align_of::<luaL_Stream>(),
        8usize,
        concat!("Alignment of ", stringify!(luaL_Stream))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<luaL_Stream>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Stream),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<luaL_Stream>())).closef as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(luaL_Stream),
            "::",
            stringify!(closef)
        )
    );
}
extern "C" {
    pub fn nt_assert_failed(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dupstr(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn alloc(arg1: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct version_info {
    pub incarnation: ::std::os::raw::c_ulong,
    pub feature_set: ::std::os::raw::c_ulong,
    pub entity_count: ::std::os::raw::c_ulong,
    pub struct_sizes1: ::std::os::raw::c_ulong,
    pub struct_sizes2: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_version_info() {
    assert_eq!(
        ::std::mem::size_of::<version_info>(),
        20usize,
        concat!("Size of: ", stringify!(version_info))
    );
    assert_eq!(
        ::std::mem::align_of::<version_info>(),
        4usize,
        concat!("Alignment of ", stringify!(version_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<version_info>())).incarnation as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(version_info),
            "::",
            stringify!(incarnation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<version_info>())).feature_set as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(version_info),
            "::",
            stringify!(feature_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<version_info>())).entity_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(version_info),
            "::",
            stringify!(entity_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<version_info>())).struct_sizes1 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(version_info),
            "::",
            stringify!(struct_sizes1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<version_info>())).struct_sizes2 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(version_info),
            "::",
            stringify!(struct_sizes2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct savefile_info {
    pub sfi1: ::std::os::raw::c_ulong,
    pub sfi2: ::std::os::raw::c_ulong,
    pub sfi3: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_savefile_info() {
    assert_eq!(
        ::std::mem::size_of::<savefile_info>(),
        12usize,
        concat!("Size of: ", stringify!(savefile_info))
    );
    assert_eq!(
        ::std::mem::align_of::<savefile_info>(),
        4usize,
        concat!("Alignment of ", stringify!(savefile_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<savefile_info>())).sfi1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(savefile_info),
            "::",
            stringify!(sfi1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<savefile_info>())).sfi2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(savefile_info),
            "::",
            stringify!(sfi2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<savefile_info>())).sfi3 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(savefile_info),
            "::",
            stringify!(sfi3)
        )
    );
}
pub type _HFILE = *mut ::std::os::raw::c_void;
pub type _CRT_REPORT_HOOK = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type _CRT_REPORT_HOOKW = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut wchar_t,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type _CRT_ALLOC_HOOK = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: size_t,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_long,
        arg6: *const ::std::os::raw::c_uchar,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type _CRT_DUMP_CLIENT =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: size_t)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CrtMemBlockHeader {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CrtMemState {
    pub pBlockHeader: *mut _CrtMemBlockHeader,
    pub lCounts: [size_t; 5usize],
    pub lSizes: [size_t; 5usize],
    pub lHighWaterCount: size_t,
    pub lTotalCount: size_t,
}
#[test]
fn bindgen_test_layout__CrtMemState() {
    assert_eq!(
        ::std::mem::size_of::<_CrtMemState>(),
        104usize,
        concat!("Size of: ", stringify!(_CrtMemState))
    );
    assert_eq!(
        ::std::mem::align_of::<_CrtMemState>(),
        8usize,
        concat!("Alignment of ", stringify!(_CrtMemState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CrtMemState>())).pBlockHeader as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CrtMemState),
            "::",
            stringify!(pBlockHeader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CrtMemState>())).lCounts as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_CrtMemState),
            "::",
            stringify!(lCounts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CrtMemState>())).lSizes as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_CrtMemState),
            "::",
            stringify!(lSizes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CrtMemState>())).lHighWaterCount as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_CrtMemState),
            "::",
            stringify!(lHighWaterCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CrtMemState>())).lTotalCount as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_CrtMemState),
            "::",
            stringify!(lTotalCount)
        )
    );
}
pub const encumbrance_types_UNENCUMBERED: encumbrance_types = 0;
pub const encumbrance_types_SLT_ENCUMBER: encumbrance_types = 1;
pub const encumbrance_types_MOD_ENCUMBER: encumbrance_types = 2;
pub const encumbrance_types_HVY_ENCUMBER: encumbrance_types = 3;
pub const encumbrance_types_EXT_ENCUMBER: encumbrance_types = 4;
pub const encumbrance_types_OVERLOADED: encumbrance_types = 5;
pub type encumbrance_types = ::std::os::raw::c_int;
pub const hunger_state_types_SATIATED: hunger_state_types = 0;
pub const hunger_state_types_NOT_HUNGRY: hunger_state_types = 1;
pub const hunger_state_types_HUNGRY: hunger_state_types = 2;
pub const hunger_state_types_WEAK: hunger_state_types = 3;
pub const hunger_state_types_FAINTING: hunger_state_types = 4;
pub const hunger_state_types_FAINTED: hunger_state_types = 5;
pub const hunger_state_types_STARVED: hunger_state_types = 6;
pub type hunger_state_types = ::std::os::raw::c_int;
pub const dismount_types_DISMOUNT_GENERIC: dismount_types = 0;
pub const dismount_types_DISMOUNT_FELL: dismount_types = 1;
pub const dismount_types_DISMOUNT_THROWN: dismount_types = 2;
pub const dismount_types_DISMOUNT_POLY: dismount_types = 3;
pub const dismount_types_DISMOUNT_ENGULFED: dismount_types = 4;
pub const dismount_types_DISMOUNT_BONES: dismount_types = 5;
pub const dismount_types_DISMOUNT_BYCHOICE: dismount_types = 6;
pub type dismount_types = ::std::os::raw::c_int;
pub const cost_alteration_types_COST_CANCEL: cost_alteration_types = 0;
pub const cost_alteration_types_COST_DRAIN: cost_alteration_types = 1;
pub const cost_alteration_types_COST_UNCHRG: cost_alteration_types = 2;
pub const cost_alteration_types_COST_UNBLSS: cost_alteration_types = 3;
pub const cost_alteration_types_COST_UNCURS: cost_alteration_types = 4;
pub const cost_alteration_types_COST_DECHNT: cost_alteration_types = 5;
pub const cost_alteration_types_COST_DEGRD: cost_alteration_types = 6;
pub const cost_alteration_types_COST_DILUTE: cost_alteration_types = 7;
pub const cost_alteration_types_COST_ERASE: cost_alteration_types = 8;
pub const cost_alteration_types_COST_BURN: cost_alteration_types = 9;
pub const cost_alteration_types_COST_NUTRLZ: cost_alteration_types = 10;
pub const cost_alteration_types_COST_DSTROY: cost_alteration_types = 11;
pub const cost_alteration_types_COST_SPLAT: cost_alteration_types = 12;
pub const cost_alteration_types_COST_BITE: cost_alteration_types = 13;
pub const cost_alteration_types_COST_OPEN: cost_alteration_types = 14;
pub const cost_alteration_types_COST_BRKLCK: cost_alteration_types = 15;
pub const cost_alteration_types_COST_RUST: cost_alteration_types = 16;
pub const cost_alteration_types_COST_ROT: cost_alteration_types = 17;
pub const cost_alteration_types_COST_CORRODE: cost_alteration_types = 18;
pub type cost_alteration_types = ::std::os::raw::c_int;
pub const getpos_retval_LOOK_TRADITIONAL: getpos_retval = 0;
pub const getpos_retval_LOOK_QUICK: getpos_retval = 1;
pub const getpos_retval_LOOK_ONCE: getpos_retval = 2;
pub const getpos_retval_LOOK_VERBOSE: getpos_retval = 3;
pub type getpos_retval = ::std::os::raw::c_int;
pub const game_end_types_DIED: game_end_types = 0;
pub const game_end_types_CHOKING: game_end_types = 1;
pub const game_end_types_POISONING: game_end_types = 2;
pub const game_end_types_STARVING: game_end_types = 3;
pub const game_end_types_DROWNING: game_end_types = 4;
pub const game_end_types_BURNING: game_end_types = 5;
pub const game_end_types_DISSOLVED: game_end_types = 6;
pub const game_end_types_CRUSHING: game_end_types = 7;
pub const game_end_types_STONING: game_end_types = 8;
pub const game_end_types_TURNED_SLIME: game_end_types = 9;
pub const game_end_types_GENOCIDED: game_end_types = 10;
pub const game_end_types_PANICKED: game_end_types = 11;
pub const game_end_types_TRICKED: game_end_types = 12;
pub const game_end_types_QUIT: game_end_types = 13;
pub const game_end_types_ESCAPED: game_end_types = 14;
pub const game_end_types_ASCENDED: game_end_types = 15;
pub type game_end_types = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct strbuf {
    pub len: ::std::os::raw::c_int,
    pub str_: *mut ::std::os::raw::c_char,
    pub buf: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_strbuf() {
    assert_eq!(
        ::std::mem::size_of::<strbuf>(),
        272usize,
        concat!("Size of: ", stringify!(strbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<strbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(strbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<strbuf>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(strbuf),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<strbuf>())).str_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(strbuf),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<strbuf>())).buf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(strbuf),
            "::",
            stringify!(buf)
        )
    );
}
pub type strbuf_t = strbuf;
#[repr(C)]
#[derive(Copy, Clone)]
pub union str_or_len {
    pub str_: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_str_or_len() {
    assert_eq!(
        ::std::mem::size_of::<str_or_len>(),
        8usize,
        concat!("Size of: ", stringify!(str_or_len))
    );
    assert_eq!(
        ::std::mem::align_of::<str_or_len>(),
        8usize,
        concat!("Alignment of ", stringify!(str_or_len))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<str_or_len>())).str_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(str_or_len),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<str_or_len>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(str_or_len),
            "::",
            stringify!(len)
        )
    );
}
pub type Str_or_Len = str_or_len;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct lev_region {
    pub inarea: lev_region__bindgen_ty_1,
    pub delarea: lev_region__bindgen_ty_2,
    pub in_islev: boolean,
    pub del_islev: boolean,
    pub rtype: xchar,
    pub padding: xchar,
    pub rname: Str_or_Len,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lev_region__bindgen_ty_1 {
    pub x1: xchar,
    pub y1: xchar,
    pub x2: xchar,
    pub y2: xchar,
}
#[test]
fn bindgen_test_layout_lev_region__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<lev_region__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(lev_region__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<lev_region__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(lev_region__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lev_region__bindgen_ty_1>())).x1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lev_region__bindgen_ty_1),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lev_region__bindgen_ty_1>())).y1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(lev_region__bindgen_ty_1),
            "::",
            stringify!(y1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lev_region__bindgen_ty_1>())).x2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(lev_region__bindgen_ty_1),
            "::",
            stringify!(x2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lev_region__bindgen_ty_1>())).y2 as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(lev_region__bindgen_ty_1),
            "::",
            stringify!(y2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lev_region__bindgen_ty_2 {
    pub x1: xchar,
    pub y1: xchar,
    pub x2: xchar,
    pub y2: xchar,
}
#[test]
fn bindgen_test_layout_lev_region__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<lev_region__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(lev_region__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<lev_region__bindgen_ty_2>(),
        1usize,
        concat!("Alignment of ", stringify!(lev_region__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lev_region__bindgen_ty_2>())).x1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lev_region__bindgen_ty_2),
            "::",
            stringify!(x1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lev_region__bindgen_ty_2>())).y1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(lev_region__bindgen_ty_2),
            "::",
            stringify!(y1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lev_region__bindgen_ty_2>())).x2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(lev_region__bindgen_ty_2),
            "::",
            stringify!(x2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lev_region__bindgen_ty_2>())).y2 as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(lev_region__bindgen_ty_2),
            "::",
            stringify!(y2)
        )
    );
}
#[test]
fn bindgen_test_layout_lev_region() {
    assert_eq!(
        ::std::mem::size_of::<lev_region>(),
        24usize,
        concat!("Size of: ", stringify!(lev_region))
    );
    assert_eq!(
        ::std::mem::align_of::<lev_region>(),
        8usize,
        concat!("Alignment of ", stringify!(lev_region))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lev_region>())).inarea as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lev_region),
            "::",
            stringify!(inarea)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lev_region>())).delarea as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lev_region),
            "::",
            stringify!(delarea)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lev_region>())).in_islev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lev_region),
            "::",
            stringify!(in_islev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lev_region>())).del_islev as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(lev_region),
            "::",
            stringify!(del_islev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lev_region>())).rtype as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(lev_region),
            "::",
            stringify!(rtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lev_region>())).padding as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(lev_region),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lev_region>())).rname as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lev_region),
            "::",
            stringify!(rname)
        )
    );
}
pub type aligntyp = schar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct align {
    pub type_: aligntyp,
    pub record: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_align() {
    assert_eq!(
        ::std::mem::size_of::<align>(),
        8usize,
        concat!("Size of: ", stringify!(align))
    );
    assert_eq!(
        ::std::mem::align_of::<align>(),
        4usize,
        concat!("Alignment of ", stringify!(align))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<align>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(align),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<align>())).record as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(align),
            "::",
            stringify!(record)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct d_level {
    pub dnum: xchar,
    pub dlevel: xchar,
}
#[test]
fn bindgen_test_layout_d_level() {
    assert_eq!(
        ::std::mem::size_of::<d_level>(),
        2usize,
        concat!("Size of: ", stringify!(d_level))
    );
    assert_eq!(
        ::std::mem::align_of::<d_level>(),
        1usize,
        concat!("Alignment of ", stringify!(d_level))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<d_level>())).dnum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(d_level),
            "::",
            stringify!(dnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<d_level>())).dlevel as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(d_level),
            "::",
            stringify!(dlevel)
        )
    );
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct d_flags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_d_flags() {
    assert_eq!(
        ::std::mem::size_of::<d_flags>(),
        4usize,
        concat!("Size of: ", stringify!(d_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<d_flags>(),
        4usize,
        concat!("Alignment of ", stringify!(d_flags))
    );
}
impl d_flags {
    #[inline]
    pub fn town(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_town(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hellish(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hellish(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn maze_like(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_maze_like(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rogue_like(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rogue_like(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn align(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_align(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn unused(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_unused(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        town: ::std::os::raw::c_uint,
        hellish: ::std::os::raw::c_uint,
        maze_like: ::std::os::raw::c_uint,
        rogue_like: ::std::os::raw::c_uint,
        align: ::std::os::raw::c_uint,
        unused: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let town: u32 = unsafe { ::std::mem::transmute(town) };
            town as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let hellish: u32 = unsafe { ::std::mem::transmute(hellish) };
            hellish as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let maze_like: u32 = unsafe { ::std::mem::transmute(maze_like) };
            maze_like as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let rogue_like: u32 = unsafe { ::std::mem::transmute(rogue_like) };
            rogue_like as u64
        });
        __bindgen_bitfield_unit.set(4usize, 3u8, {
            let align: u32 = unsafe { ::std::mem::transmute(align) };
            align as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let unused: u32 = unsafe { ::std::mem::transmute(unused) };
            unused as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct s_level {
    pub next: *mut s_level,
    pub dlevel: d_level,
    pub proto: [::std::os::raw::c_char; 15usize],
    pub boneid: ::std::os::raw::c_char,
    pub rndlevs: uchar,
    pub flags: d_flags,
}
#[test]
fn bindgen_test_layout_s_level() {
    assert_eq!(
        ::std::mem::size_of::<s_level>(),
        32usize,
        concat!("Size of: ", stringify!(s_level))
    );
    assert_eq!(
        ::std::mem::align_of::<s_level>(),
        8usize,
        concat!("Alignment of ", stringify!(s_level))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<s_level>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(s_level),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<s_level>())).dlevel as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(s_level),
            "::",
            stringify!(dlevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<s_level>())).proto as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(s_level),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<s_level>())).boneid as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(s_level),
            "::",
            stringify!(boneid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<s_level>())).rndlevs as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(s_level),
            "::",
            stringify!(rndlevs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<s_level>())).flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(s_level),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stairway {
    pub sx: xchar,
    pub sy: xchar,
    pub tolev: d_level,
    pub up: boolean,
    pub isladder: boolean,
    pub next: *mut stairway,
}
#[test]
fn bindgen_test_layout_stairway() {
    assert_eq!(
        ::std::mem::size_of::<stairway>(),
        16usize,
        concat!("Size of: ", stringify!(stairway))
    );
    assert_eq!(
        ::std::mem::align_of::<stairway>(),
        8usize,
        concat!("Alignment of ", stringify!(stairway))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stairway>())).sx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stairway),
            "::",
            stringify!(sx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stairway>())).sy as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(stairway),
            "::",
            stringify!(sy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stairway>())).tolev as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(stairway),
            "::",
            stringify!(tolev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stairway>())).up as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stairway),
            "::",
            stringify!(up)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stairway>())).isladder as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(stairway),
            "::",
            stringify!(isladder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stairway>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stairway),
            "::",
            stringify!(next)
        )
    );
}
pub const level_region_types_LR_DOWNSTAIR: level_region_types = 0;
pub const level_region_types_LR_UPSTAIR: level_region_types = 1;
pub const level_region_types_LR_PORTAL: level_region_types = 2;
pub const level_region_types_LR_BRANCH: level_region_types = 3;
pub const level_region_types_LR_TELE: level_region_types = 4;
pub const level_region_types_LR_UPTELE: level_region_types = 5;
pub const level_region_types_LR_DOWNTELE: level_region_types = 6;
pub type level_region_types = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dest_area {
    pub lx: xchar,
    pub ly: xchar,
    pub hx: xchar,
    pub hy: xchar,
    pub nlx: xchar,
    pub nly: xchar,
    pub nhx: xchar,
    pub nhy: xchar,
}
#[test]
fn bindgen_test_layout_dest_area() {
    assert_eq!(
        ::std::mem::size_of::<dest_area>(),
        8usize,
        concat!("Size of: ", stringify!(dest_area))
    );
    assert_eq!(
        ::std::mem::align_of::<dest_area>(),
        1usize,
        concat!("Alignment of ", stringify!(dest_area))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dest_area>())).lx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dest_area),
            "::",
            stringify!(lx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dest_area>())).ly as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(dest_area),
            "::",
            stringify!(ly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dest_area>())).hx as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(dest_area),
            "::",
            stringify!(hx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dest_area>())).hy as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(dest_area),
            "::",
            stringify!(hy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dest_area>())).nlx as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dest_area),
            "::",
            stringify!(nlx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dest_area>())).nly as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(dest_area),
            "::",
            stringify!(nly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dest_area>())).nhx as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(dest_area),
            "::",
            stringify!(nhx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dest_area>())).nhy as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(dest_area),
            "::",
            stringify!(nhy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dungeon {
    pub dname: [::std::os::raw::c_char; 24usize],
    pub proto: [::std::os::raw::c_char; 15usize],
    pub fill_lvl: [::std::os::raw::c_char; 15usize],
    pub themerms: [::std::os::raw::c_char; 15usize],
    pub boneid: ::std::os::raw::c_char,
    pub flags: d_flags,
    pub entry_lev: xchar,
    pub num_dunlevs: xchar,
    pub dunlev_ureached: xchar,
    pub ledger_start: ::std::os::raw::c_int,
    pub depth_start: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_dungeon() {
    assert_eq!(
        ::std::mem::size_of::<dungeon>(),
        88usize,
        concat!("Size of: ", stringify!(dungeon))
    );
    assert_eq!(
        ::std::mem::align_of::<dungeon>(),
        4usize,
        concat!("Alignment of ", stringify!(dungeon))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dungeon>())).dname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dungeon),
            "::",
            stringify!(dname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dungeon>())).proto as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dungeon),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dungeon>())).fill_lvl as *const _ as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(dungeon),
            "::",
            stringify!(fill_lvl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dungeon>())).themerms as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(dungeon),
            "::",
            stringify!(themerms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dungeon>())).boneid as *const _ as usize },
        69usize,
        concat!(
            "Offset of field: ",
            stringify!(dungeon),
            "::",
            stringify!(boneid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dungeon>())).flags as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(dungeon),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dungeon>())).entry_lev as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(dungeon),
            "::",
            stringify!(entry_lev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dungeon>())).num_dunlevs as *const _ as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(dungeon),
            "::",
            stringify!(num_dunlevs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dungeon>())).dunlev_ureached as *const _ as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(dungeon),
            "::",
            stringify!(dunlev_ureached)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dungeon>())).ledger_start as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(dungeon),
            "::",
            stringify!(ledger_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dungeon>())).depth_start as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(dungeon),
            "::",
            stringify!(depth_start)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct branch {
    pub next: *mut branch,
    pub id: ::std::os::raw::c_int,
    pub type_: ::std::os::raw::c_int,
    pub end1: d_level,
    pub end2: d_level,
    pub end1_up: boolean,
}
#[test]
fn bindgen_test_layout_branch() {
    assert_eq!(
        ::std::mem::size_of::<branch>(),
        24usize,
        concat!("Size of: ", stringify!(branch))
    );
    assert_eq!(
        ::std::mem::align_of::<branch>(),
        8usize,
        concat!("Alignment of ", stringify!(branch))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<branch>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(branch),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<branch>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(branch),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<branch>())).type_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(branch),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<branch>())).end1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(branch),
            "::",
            stringify!(end1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<branch>())).end2 as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(branch),
            "::",
            stringify!(end2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<branch>())).end1_up as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(branch),
            "::",
            stringify!(end1_up)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linfo {
    pub flags: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_linfo() {
    assert_eq!(
        ::std::mem::size_of::<linfo>(),
        1usize,
        concat!("Size of: ", stringify!(linfo))
    );
    assert_eq!(
        ::std::mem::align_of::<linfo>(),
        1usize,
        concat!("Alignment of ", stringify!(linfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linfo>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linfo),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mapseen {
    pub next: *mut mapseen,
    pub br: *mut branch,
    pub lev: d_level,
    pub feat: mapseen_mapseen_feat,
    pub flags: mapseen_mapseen_flags,
    pub custom: *mut ::std::os::raw::c_char,
    pub custom_lth: ::std::os::raw::c_uint,
    pub msrooms: [mapseen_mapseen_rooms; 82usize],
    pub final_resting_place: *mut cemetery,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct mapseen_mapseen_feat {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_mapseen_mapseen_feat() {
    assert_eq!(
        ::std::mem::size_of::<mapseen_mapseen_feat>(),
        4usize,
        concat!("Size of: ", stringify!(mapseen_mapseen_feat))
    );
    assert_eq!(
        ::std::mem::align_of::<mapseen_mapseen_feat>(),
        4usize,
        concat!("Alignment of ", stringify!(mapseen_mapseen_feat))
    );
}
impl mapseen_mapseen_feat {
    #[inline]
    pub fn nfount(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_nfount(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn nsink(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_nsink(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn naltar(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_naltar(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn nthrone(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_nthrone(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn ngrave(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_ngrave(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn ntree(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_ntree(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn water(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_water(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn lava(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_lava(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn ice(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_ice(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn nshop(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_nshop(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn ntemple(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_ntemple(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn msalign(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_msalign(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn shoptype(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_shoptype(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        nfount: ::std::os::raw::c_uint,
        nsink: ::std::os::raw::c_uint,
        naltar: ::std::os::raw::c_uint,
        nthrone: ::std::os::raw::c_uint,
        ngrave: ::std::os::raw::c_uint,
        ntree: ::std::os::raw::c_uint,
        water: ::std::os::raw::c_uint,
        lava: ::std::os::raw::c_uint,
        ice: ::std::os::raw::c_uint,
        nshop: ::std::os::raw::c_uint,
        ntemple: ::std::os::raw::c_uint,
        msalign: ::std::os::raw::c_uint,
        shoptype: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let nfount: u32 = unsafe { ::std::mem::transmute(nfount) };
            nfount as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let nsink: u32 = unsafe { ::std::mem::transmute(nsink) };
            nsink as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let naltar: u32 = unsafe { ::std::mem::transmute(naltar) };
            naltar as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let nthrone: u32 = unsafe { ::std::mem::transmute(nthrone) };
            nthrone as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let ngrave: u32 = unsafe { ::std::mem::transmute(ngrave) };
            ngrave as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let ntree: u32 = unsafe { ::std::mem::transmute(ntree) };
            ntree as u64
        });
        __bindgen_bitfield_unit.set(12usize, 2u8, {
            let water: u32 = unsafe { ::std::mem::transmute(water) };
            water as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let lava: u32 = unsafe { ::std::mem::transmute(lava) };
            lava as u64
        });
        __bindgen_bitfield_unit.set(16usize, 2u8, {
            let ice: u32 = unsafe { ::std::mem::transmute(ice) };
            ice as u64
        });
        __bindgen_bitfield_unit.set(18usize, 2u8, {
            let nshop: u32 = unsafe { ::std::mem::transmute(nshop) };
            nshop as u64
        });
        __bindgen_bitfield_unit.set(20usize, 2u8, {
            let ntemple: u32 = unsafe { ::std::mem::transmute(ntemple) };
            ntemple as u64
        });
        __bindgen_bitfield_unit.set(22usize, 2u8, {
            let msalign: u32 = unsafe { ::std::mem::transmute(msalign) };
            msalign as u64
        });
        __bindgen_bitfield_unit.set(24usize, 5u8, {
            let shoptype: u32 = unsafe { ::std::mem::transmute(shoptype) };
            shoptype as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct mapseen_mapseen_flags {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[test]
fn bindgen_test_layout_mapseen_mapseen_flags() {
    assert_eq!(
        ::std::mem::size_of::<mapseen_mapseen_flags>(),
        4usize,
        concat!("Size of: ", stringify!(mapseen_mapseen_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<mapseen_mapseen_flags>(),
        4usize,
        concat!("Alignment of ", stringify!(mapseen_mapseen_flags))
    );
}
impl mapseen_mapseen_flags {
    #[inline]
    pub fn unreachable(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_unreachable(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn forgot(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_forgot(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn knownbones(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_knownbones(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn oracle(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_oracle(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sokosolved(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sokosolved(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bigroom(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bigroom(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn castle(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_castle(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn castletune(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_castletune(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn valley(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_valley(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn msanctum(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_msanctum(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ludios(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ludios(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn roguelevel(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_roguelevel(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn quest_summons(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_quest_summons(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn questing(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_questing(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn vibrating_square(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_vibrating_square(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn spare1(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_spare1(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        unreachable: ::std::os::raw::c_uint,
        forgot: ::std::os::raw::c_uint,
        knownbones: ::std::os::raw::c_uint,
        oracle: ::std::os::raw::c_uint,
        sokosolved: ::std::os::raw::c_uint,
        bigroom: ::std::os::raw::c_uint,
        castle: ::std::os::raw::c_uint,
        castletune: ::std::os::raw::c_uint,
        valley: ::std::os::raw::c_uint,
        msanctum: ::std::os::raw::c_uint,
        ludios: ::std::os::raw::c_uint,
        roguelevel: ::std::os::raw::c_uint,
        quest_summons: ::std::os::raw::c_uint,
        questing: ::std::os::raw::c_uint,
        vibrating_square: ::std::os::raw::c_uint,
        spare1: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let unreachable: u32 = unsafe { ::std::mem::transmute(unreachable) };
            unreachable as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let forgot: u32 = unsafe { ::std::mem::transmute(forgot) };
            forgot as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let knownbones: u32 = unsafe { ::std::mem::transmute(knownbones) };
            knownbones as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let oracle: u32 = unsafe { ::std::mem::transmute(oracle) };
            oracle as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let sokosolved: u32 = unsafe { ::std::mem::transmute(sokosolved) };
            sokosolved as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bigroom: u32 = unsafe { ::std::mem::transmute(bigroom) };
            bigroom as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let castle: u32 = unsafe { ::std::mem::transmute(castle) };
            castle as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let castletune: u32 = unsafe { ::std::mem::transmute(castletune) };
            castletune as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let valley: u32 = unsafe { ::std::mem::transmute(valley) };
            valley as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let msanctum: u32 = unsafe { ::std::mem::transmute(msanctum) };
            msanctum as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let ludios: u32 = unsafe { ::std::mem::transmute(ludios) };
            ludios as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let roguelevel: u32 = unsafe { ::std::mem::transmute(roguelevel) };
            roguelevel as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let quest_summons: u32 = unsafe { ::std::mem::transmute(quest_summons) };
            quest_summons as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let questing: u32 = unsafe { ::std::mem::transmute(questing) };
            questing as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let vibrating_square: u32 = unsafe { ::std::mem::transmute(vibrating_square) };
            vibrating_square as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let spare1: u32 = unsafe { ::std::mem::transmute(spare1) };
            spare1 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct mapseen_mapseen_rooms {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_mapseen_mapseen_rooms() {
    assert_eq!(
        ::std::mem::size_of::<mapseen_mapseen_rooms>(),
        4usize,
        concat!("Size of: ", stringify!(mapseen_mapseen_rooms))
    );
    assert_eq!(
        ::std::mem::align_of::<mapseen_mapseen_rooms>(),
        4usize,
        concat!("Alignment of ", stringify!(mapseen_mapseen_rooms))
    );
}
impl mapseen_mapseen_rooms {
    #[inline]
    pub fn seen(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_seen(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn untended(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_untended(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        seen: ::std::os::raw::c_uint,
        untended: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let seen: u32 = unsafe { ::std::mem::transmute(seen) };
            seen as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let untended: u32 = unsafe { ::std::mem::transmute(untended) };
            untended as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_mapseen() {
    assert_eq!(
        ::std::mem::size_of::<mapseen>(),
        384usize,
        concat!("Size of: ", stringify!(mapseen))
    );
    assert_eq!(
        ::std::mem::align_of::<mapseen>(),
        8usize,
        concat!("Alignment of ", stringify!(mapseen))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapseen>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mapseen),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapseen>())).br as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mapseen),
            "::",
            stringify!(br)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapseen>())).lev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mapseen),
            "::",
            stringify!(lev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapseen>())).feat as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mapseen),
            "::",
            stringify!(feat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapseen>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mapseen),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapseen>())).custom as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mapseen),
            "::",
            stringify!(custom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapseen>())).custom_lth as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mapseen),
            "::",
            stringify!(custom_lth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapseen>())).msrooms as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mapseen),
            "::",
            stringify!(msrooms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mapseen>())).final_resting_place as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(mapseen),
            "::",
            stringify!(final_resting_place)
        )
    );
}
pub const mon_class_types_S_ANT: mon_class_types = 1;
pub const mon_class_types_S_BLOB: mon_class_types = 2;
pub const mon_class_types_S_COCKATRICE: mon_class_types = 3;
pub const mon_class_types_S_DOG: mon_class_types = 4;
pub const mon_class_types_S_EYE: mon_class_types = 5;
pub const mon_class_types_S_FELINE: mon_class_types = 6;
pub const mon_class_types_S_GREMLIN: mon_class_types = 7;
pub const mon_class_types_S_HUMANOID: mon_class_types = 8;
pub const mon_class_types_S_IMP: mon_class_types = 9;
pub const mon_class_types_S_JELLY: mon_class_types = 10;
pub const mon_class_types_S_KOBOLD: mon_class_types = 11;
pub const mon_class_types_S_LEPRECHAUN: mon_class_types = 12;
pub const mon_class_types_S_MIMIC: mon_class_types = 13;
pub const mon_class_types_S_NYMPH: mon_class_types = 14;
pub const mon_class_types_S_ORC: mon_class_types = 15;
pub const mon_class_types_S_PIERCER: mon_class_types = 16;
pub const mon_class_types_S_QUADRUPED: mon_class_types = 17;
pub const mon_class_types_S_RODENT: mon_class_types = 18;
pub const mon_class_types_S_SPIDER: mon_class_types = 19;
pub const mon_class_types_S_TRAPPER: mon_class_types = 20;
pub const mon_class_types_S_UNICORN: mon_class_types = 21;
pub const mon_class_types_S_VORTEX: mon_class_types = 22;
pub const mon_class_types_S_WORM: mon_class_types = 23;
pub const mon_class_types_S_XAN: mon_class_types = 24;
pub const mon_class_types_S_LIGHT: mon_class_types = 25;
pub const mon_class_types_S_ZRUTY: mon_class_types = 26;
pub const mon_class_types_S_ANGEL: mon_class_types = 27;
pub const mon_class_types_S_BAT: mon_class_types = 28;
pub const mon_class_types_S_CENTAUR: mon_class_types = 29;
pub const mon_class_types_S_DRAGON: mon_class_types = 30;
pub const mon_class_types_S_ELEMENTAL: mon_class_types = 31;
pub const mon_class_types_S_FUNGUS: mon_class_types = 32;
pub const mon_class_types_S_GNOME: mon_class_types = 33;
pub const mon_class_types_S_GIANT: mon_class_types = 34;
pub const mon_class_types_S_invisible: mon_class_types = 35;
pub const mon_class_types_S_JABBERWOCK: mon_class_types = 36;
pub const mon_class_types_S_KOP: mon_class_types = 37;
pub const mon_class_types_S_LICH: mon_class_types = 38;
pub const mon_class_types_S_MUMMY: mon_class_types = 39;
pub const mon_class_types_S_NAGA: mon_class_types = 40;
pub const mon_class_types_S_OGRE: mon_class_types = 41;
pub const mon_class_types_S_PUDDING: mon_class_types = 42;
pub const mon_class_types_S_QUANTMECH: mon_class_types = 43;
pub const mon_class_types_S_RUSTMONST: mon_class_types = 44;
pub const mon_class_types_S_SNAKE: mon_class_types = 45;
pub const mon_class_types_S_TROLL: mon_class_types = 46;
pub const mon_class_types_S_UMBER: mon_class_types = 47;
pub const mon_class_types_S_VAMPIRE: mon_class_types = 48;
pub const mon_class_types_S_WRAITH: mon_class_types = 49;
pub const mon_class_types_S_XORN: mon_class_types = 50;
pub const mon_class_types_S_YETI: mon_class_types = 51;
pub const mon_class_types_S_ZOMBIE: mon_class_types = 52;
pub const mon_class_types_S_HUMAN: mon_class_types = 53;
pub const mon_class_types_S_GHOST: mon_class_types = 54;
pub const mon_class_types_S_GOLEM: mon_class_types = 55;
pub const mon_class_types_S_DEMON: mon_class_types = 56;
pub const mon_class_types_S_EEL: mon_class_types = 57;
pub const mon_class_types_S_LIZARD: mon_class_types = 58;
pub const mon_class_types_S_WORM_TAIL: mon_class_types = 59;
pub const mon_class_types_S_MIMIC_DEF: mon_class_types = 60;
pub const mon_class_types_MAXMCLASSES: mon_class_types = 61;
pub type mon_class_types = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mkroom {
    pub lx: xchar,
    pub hx: xchar,
    pub ly: xchar,
    pub hy: xchar,
    pub rtype: schar,
    pub orig_rtype: schar,
    pub rlit: schar,
    pub needfill: schar,
    pub needjoining: boolean,
    pub doorct: schar,
    pub fdoor: schar,
    pub nsubrooms: schar,
    pub irregular: boolean,
    pub roomnoidx: schar,
    pub sbrooms: [*mut mkroom; 24usize],
    pub resident: *mut monst,
}
#[test]
fn bindgen_test_layout_mkroom() {
    assert_eq!(
        ::std::mem::size_of::<mkroom>(),
        216usize,
        concat!("Size of: ", stringify!(mkroom))
    );
    assert_eq!(
        ::std::mem::align_of::<mkroom>(),
        8usize,
        concat!("Alignment of ", stringify!(mkroom))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mkroom>())).lx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mkroom),
            "::",
            stringify!(lx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mkroom>())).hx as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mkroom),
            "::",
            stringify!(hx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mkroom>())).ly as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mkroom),
            "::",
            stringify!(ly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mkroom>())).hy as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(mkroom),
            "::",
            stringify!(hy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mkroom>())).rtype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mkroom),
            "::",
            stringify!(rtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mkroom>())).orig_rtype as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(mkroom),
            "::",
            stringify!(orig_rtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mkroom>())).rlit as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(mkroom),
            "::",
            stringify!(rlit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mkroom>())).needfill as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(mkroom),
            "::",
            stringify!(needfill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mkroom>())).needjoining as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mkroom),
            "::",
            stringify!(needjoining)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mkroom>())).doorct as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(mkroom),
            "::",
            stringify!(doorct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mkroom>())).fdoor as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(mkroom),
            "::",
            stringify!(fdoor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mkroom>())).nsubrooms as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(mkroom),
            "::",
            stringify!(nsubrooms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mkroom>())).irregular as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mkroom),
            "::",
            stringify!(irregular)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mkroom>())).roomnoidx as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(mkroom),
            "::",
            stringify!(roomnoidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mkroom>())).sbrooms as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mkroom),
            "::",
            stringify!(sbrooms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mkroom>())).resident as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(mkroom),
            "::",
            stringify!(resident)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shclass {
    pub name: *const ::std::os::raw::c_char,
    pub symb: ::std::os::raw::c_char,
    pub prob: ::std::os::raw::c_int,
    pub shdist: schar,
    pub iprobs: [shclass_itp; 6usize],
    pub shknms: *const *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct shclass_itp {
    pub iprob: ::std::os::raw::c_int,
    pub itype: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_shclass_itp() {
    assert_eq!(
        ::std::mem::size_of::<shclass_itp>(),
        8usize,
        concat!("Size of: ", stringify!(shclass_itp))
    );
    assert_eq!(
        ::std::mem::align_of::<shclass_itp>(),
        4usize,
        concat!("Alignment of ", stringify!(shclass_itp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shclass_itp>())).iprob as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(shclass_itp),
            "::",
            stringify!(iprob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shclass_itp>())).itype as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(shclass_itp),
            "::",
            stringify!(itype)
        )
    );
}
#[test]
fn bindgen_test_layout_shclass() {
    assert_eq!(
        ::std::mem::size_of::<shclass>(),
        80usize,
        concat!("Size of: ", stringify!(shclass))
    );
    assert_eq!(
        ::std::mem::align_of::<shclass>(),
        8usize,
        concat!("Alignment of ", stringify!(shclass))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shclass>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(shclass),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shclass>())).symb as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(shclass),
            "::",
            stringify!(symb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shclass>())).prob as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(shclass),
            "::",
            stringify!(prob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shclass>())).shdist as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(shclass),
            "::",
            stringify!(shdist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shclass>())).iprobs as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(shclass),
            "::",
            stringify!(iprobs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<shclass>())).shknms as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(shclass),
            "::",
            stringify!(shknms)
        )
    );
}
pub const roomtype_types_OROOM: roomtype_types = 0;
pub const roomtype_types_THEMEROOM: roomtype_types = 1;
pub const roomtype_types_COURT: roomtype_types = 2;
pub const roomtype_types_SWAMP: roomtype_types = 3;
pub const roomtype_types_VAULT: roomtype_types = 4;
pub const roomtype_types_BEEHIVE: roomtype_types = 5;
pub const roomtype_types_MORGUE: roomtype_types = 6;
pub const roomtype_types_BARRACKS: roomtype_types = 7;
pub const roomtype_types_ZOO: roomtype_types = 8;
pub const roomtype_types_DELPHI: roomtype_types = 9;
pub const roomtype_types_TEMPLE: roomtype_types = 10;
pub const roomtype_types_LEPREHALL: roomtype_types = 11;
pub const roomtype_types_COCKNEST: roomtype_types = 12;
pub const roomtype_types_ANTHOLE: roomtype_types = 13;
pub const roomtype_types_SHOPBASE: roomtype_types = 14;
pub const roomtype_types_ARMORSHOP: roomtype_types = 15;
pub const roomtype_types_SCROLLSHOP: roomtype_types = 16;
pub const roomtype_types_POTIONSHOP: roomtype_types = 17;
pub const roomtype_types_WEAPONSHOP: roomtype_types = 18;
pub const roomtype_types_FOODSHOP: roomtype_types = 19;
pub const roomtype_types_RINGSHOP: roomtype_types = 20;
pub const roomtype_types_WANDSHOP: roomtype_types = 21;
pub const roomtype_types_TOOLSHOP: roomtype_types = 22;
pub const roomtype_types_BOOKSHOP: roomtype_types = 23;
pub const roomtype_types_FODDERSHOP: roomtype_types = 24;
pub const roomtype_types_CANDLESHOP: roomtype_types = 25;
pub type roomtype_types = ::std::os::raw::c_int;
pub const obj_material_types_LIQUID: obj_material_types = 1;
pub const obj_material_types_WAX: obj_material_types = 2;
pub const obj_material_types_VEGGY: obj_material_types = 3;
pub const obj_material_types_FLESH: obj_material_types = 4;
pub const obj_material_types_PAPER: obj_material_types = 5;
pub const obj_material_types_CLOTH: obj_material_types = 6;
pub const obj_material_types_LEATHER: obj_material_types = 7;
pub const obj_material_types_WOOD: obj_material_types = 8;
pub const obj_material_types_BONE: obj_material_types = 9;
pub const obj_material_types_DRAGON_HIDE: obj_material_types = 10;
pub const obj_material_types_IRON: obj_material_types = 11;
pub const obj_material_types_METAL: obj_material_types = 12;
pub const obj_material_types_COPPER: obj_material_types = 13;
pub const obj_material_types_SILVER: obj_material_types = 14;
pub const obj_material_types_GOLD: obj_material_types = 15;
pub const obj_material_types_PLATINUM: obj_material_types = 16;
pub const obj_material_types_MITHRIL: obj_material_types = 17;
pub const obj_material_types_PLASTIC: obj_material_types = 18;
pub const obj_material_types_GLASS: obj_material_types = 19;
pub const obj_material_types_GEMSTONE: obj_material_types = 20;
pub const obj_material_types_MINERAL: obj_material_types = 21;
pub type obj_material_types = ::std::os::raw::c_int;
pub const obj_armor_types_ARM_SUIT: obj_armor_types = 0;
pub const obj_armor_types_ARM_SHIELD: obj_armor_types = 1;
pub const obj_armor_types_ARM_HELM: obj_armor_types = 2;
pub const obj_armor_types_ARM_GLOVES: obj_armor_types = 3;
pub const obj_armor_types_ARM_BOOTS: obj_armor_types = 4;
pub const obj_armor_types_ARM_CLOAK: obj_armor_types = 5;
pub const obj_armor_types_ARM_SHIRT: obj_armor_types = 6;
pub type obj_armor_types = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objclass {
    pub oc_name_idx: ::std::os::raw::c_short,
    pub oc_descr_idx: ::std::os::raw::c_short,
    pub oc_uname: *mut ::std::os::raw::c_char,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: u8,
    pub oc_subtyp: schar,
    pub oc_oprop: uchar,
    pub oc_class: ::std::os::raw::c_char,
    pub oc_delay: schar,
    pub oc_color: uchar,
    pub oc_prob: ::std::os::raw::c_short,
    pub oc_weight: ::std::os::raw::c_ushort,
    pub oc_cost: ::std::os::raw::c_short,
    pub oc_wsdam: schar,
    pub oc_wldam: schar,
    pub oc_oc1: schar,
    pub oc_oc2: schar,
    pub oc_nutrition: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_objclass() {
    assert_eq!(
        ::std::mem::size_of::<objclass>(),
        40usize,
        concat!("Size of: ", stringify!(objclass))
    );
    assert_eq!(
        ::std::mem::align_of::<objclass>(),
        8usize,
        concat!("Alignment of ", stringify!(objclass))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<objclass>())).oc_name_idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(objclass),
            "::",
            stringify!(oc_name_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<objclass>())).oc_descr_idx as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(objclass),
            "::",
            stringify!(oc_descr_idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<objclass>())).oc_uname as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(objclass),
            "::",
            stringify!(oc_uname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<objclass>())).oc_subtyp as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(objclass),
            "::",
            stringify!(oc_subtyp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<objclass>())).oc_oprop as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(objclass),
            "::",
            stringify!(oc_oprop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<objclass>())).oc_class as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(objclass),
            "::",
            stringify!(oc_class)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<objclass>())).oc_delay as *const _ as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(objclass),
            "::",
            stringify!(oc_delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<objclass>())).oc_color as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(objclass),
            "::",
            stringify!(oc_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<objclass>())).oc_prob as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(objclass),
            "::",
            stringify!(oc_prob)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<objclass>())).oc_weight as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(objclass),
            "::",
            stringify!(oc_weight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<objclass>())).oc_cost as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(objclass),
            "::",
            stringify!(oc_cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<objclass>())).oc_wsdam as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(objclass),
            "::",
            stringify!(oc_wsdam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<objclass>())).oc_wldam as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(objclass),
            "::",
            stringify!(oc_wldam)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<objclass>())).oc_oc1 as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(objclass),
            "::",
            stringify!(oc_oc1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<objclass>())).oc_oc2 as *const _ as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(objclass),
            "::",
            stringify!(oc_oc2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<objclass>())).oc_nutrition as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(objclass),
            "::",
            stringify!(oc_nutrition)
        )
    );
}
impl objclass {
    #[inline]
    pub fn oc_name_known(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_oc_name_known(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn oc_merge(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_oc_merge(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn oc_uses_known(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_oc_uses_known(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn oc_pre_discovered(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_oc_pre_discovered(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn oc_magic(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_oc_magic(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn oc_charged(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_oc_charged(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn oc_unique(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_oc_unique(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn oc_nowish(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_oc_nowish(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn oc_big(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_oc_big(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn oc_tough(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_oc_tough(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn oc_dir(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_oc_dir(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn oc_material(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_oc_material(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        oc_name_known: ::std::os::raw::c_uint,
        oc_merge: ::std::os::raw::c_uint,
        oc_uses_known: ::std::os::raw::c_uint,
        oc_pre_discovered: ::std::os::raw::c_uint,
        oc_magic: ::std::os::raw::c_uint,
        oc_charged: ::std::os::raw::c_uint,
        oc_unique: ::std::os::raw::c_uint,
        oc_nowish: ::std::os::raw::c_uint,
        oc_big: ::std::os::raw::c_uint,
        oc_tough: ::std::os::raw::c_uint,
        oc_dir: ::std::os::raw::c_uint,
        oc_material: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let oc_name_known: u32 = unsafe { ::std::mem::transmute(oc_name_known) };
            oc_name_known as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let oc_merge: u32 = unsafe { ::std::mem::transmute(oc_merge) };
            oc_merge as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let oc_uses_known: u32 = unsafe { ::std::mem::transmute(oc_uses_known) };
            oc_uses_known as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let oc_pre_discovered: u32 = unsafe { ::std::mem::transmute(oc_pre_discovered) };
            oc_pre_discovered as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let oc_magic: u32 = unsafe { ::std::mem::transmute(oc_magic) };
            oc_magic as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let oc_charged: u32 = unsafe { ::std::mem::transmute(oc_charged) };
            oc_charged as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let oc_unique: u32 = unsafe { ::std::mem::transmute(oc_unique) };
            oc_unique as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let oc_nowish: u32 = unsafe { ::std::mem::transmute(oc_nowish) };
            oc_nowish as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let oc_big: u32 = unsafe { ::std::mem::transmute(oc_big) };
            oc_big as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let oc_tough: u32 = unsafe { ::std::mem::transmute(oc_tough) };
            oc_tough as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let oc_dir: u32 = unsafe { ::std::mem::transmute(oc_dir) };
            oc_dir as u64
        });
        __bindgen_bitfield_unit.set(12usize, 5u8, {
            let oc_material: u32 = unsafe { ::std::mem::transmute(oc_material) };
            oc_material as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct class_sym {
    pub sym: ::std::os::raw::c_char,
    pub name: *const ::std::os::raw::c_char,
    pub explain: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_class_sym() {
    assert_eq!(
        ::std::mem::size_of::<class_sym>(),
        24usize,
        concat!("Size of: ", stringify!(class_sym))
    );
    assert_eq!(
        ::std::mem::align_of::<class_sym>(),
        8usize,
        concat!("Alignment of ", stringify!(class_sym))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<class_sym>())).sym as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(class_sym),
            "::",
            stringify!(sym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<class_sym>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(class_sym),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<class_sym>())).explain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(class_sym),
            "::",
            stringify!(explain)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objdescr {
    pub oc_name: *const ::std::os::raw::c_char,
    pub oc_descr: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_objdescr() {
    assert_eq!(
        ::std::mem::size_of::<objdescr>(),
        16usize,
        concat!("Size of: ", stringify!(objdescr))
    );
    assert_eq!(
        ::std::mem::align_of::<objdescr>(),
        8usize,
        concat!("Alignment of ", stringify!(objdescr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<objdescr>())).oc_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(objdescr),
            "::",
            stringify!(oc_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<objdescr>())).oc_descr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(objdescr),
            "::",
            stringify!(oc_descr)
        )
    );
}
extern "C" {
    pub static mut objects: [objclass; 0usize];
}
extern "C" {
    pub static mut obj_descr: [objdescr; 0usize];
}
pub const obj_class_types_RANDOM_CLASS: obj_class_types = 0;
pub const obj_class_types_ILLOBJ_CLASS: obj_class_types = 1;
pub const obj_class_types_WEAPON_CLASS: obj_class_types = 2;
pub const obj_class_types_ARMOR_CLASS: obj_class_types = 3;
pub const obj_class_types_RING_CLASS: obj_class_types = 4;
pub const obj_class_types_AMULET_CLASS: obj_class_types = 5;
pub const obj_class_types_TOOL_CLASS: obj_class_types = 6;
pub const obj_class_types_FOOD_CLASS: obj_class_types = 7;
pub const obj_class_types_POTION_CLASS: obj_class_types = 8;
pub const obj_class_types_SCROLL_CLASS: obj_class_types = 9;
pub const obj_class_types_SPBOOK_CLASS: obj_class_types = 10;
pub const obj_class_types_WAND_CLASS: obj_class_types = 11;
pub const obj_class_types_COIN_CLASS: obj_class_types = 12;
pub const obj_class_types_GEM_CLASS: obj_class_types = 13;
pub const obj_class_types_ROCK_CLASS: obj_class_types = 14;
pub const obj_class_types_BALL_CLASS: obj_class_types = 15;
pub const obj_class_types_CHAIN_CLASS: obj_class_types = 16;
pub const obj_class_types_VENOM_CLASS: obj_class_types = 17;
pub const obj_class_types_MAXOCLASSES: obj_class_types = 18;
pub type obj_class_types = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fruit {
    pub fname: [::std::os::raw::c_char; 32usize],
    pub fid: ::std::os::raw::c_int,
    pub nextf: *mut fruit,
}
#[test]
fn bindgen_test_layout_fruit() {
    assert_eq!(
        ::std::mem::size_of::<fruit>(),
        48usize,
        concat!("Size of: ", stringify!(fruit))
    );
    assert_eq!(
        ::std::mem::align_of::<fruit>(),
        8usize,
        concat!("Alignment of ", stringify!(fruit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fruit>())).fname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fruit),
            "::",
            stringify!(fname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fruit>())).fid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fruit),
            "::",
            stringify!(fid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fruit>())).nextf as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fruit),
            "::",
            stringify!(nextf)
        )
    );
}
pub const prop_types_FIRE_RES: prop_types = 1;
pub const prop_types_COLD_RES: prop_types = 2;
pub const prop_types_SLEEP_RES: prop_types = 3;
pub const prop_types_DISINT_RES: prop_types = 4;
pub const prop_types_SHOCK_RES: prop_types = 5;
pub const prop_types_POISON_RES: prop_types = 6;
pub const prop_types_ACID_RES: prop_types = 7;
pub const prop_types_STONE_RES: prop_types = 8;
pub const prop_types_DRAIN_RES: prop_types = 9;
pub const prop_types_SICK_RES: prop_types = 10;
pub const prop_types_INVULNERABLE: prop_types = 11;
pub const prop_types_ANTIMAGIC: prop_types = 12;
pub const prop_types_STUNNED: prop_types = 13;
pub const prop_types_CONFUSION: prop_types = 14;
pub const prop_types_BLINDED: prop_types = 15;
pub const prop_types_DEAF: prop_types = 16;
pub const prop_types_SICK: prop_types = 17;
pub const prop_types_STONED: prop_types = 18;
pub const prop_types_STRANGLED: prop_types = 19;
pub const prop_types_VOMITING: prop_types = 20;
pub const prop_types_GLIB: prop_types = 21;
pub const prop_types_SLIMED: prop_types = 22;
pub const prop_types_HALLUC: prop_types = 23;
pub const prop_types_HALLUC_RES: prop_types = 24;
pub const prop_types_FUMBLING: prop_types = 25;
pub const prop_types_WOUNDED_LEGS: prop_types = 26;
pub const prop_types_SLEEPY: prop_types = 27;
pub const prop_types_HUNGER: prop_types = 28;
pub const prop_types_SEE_INVIS: prop_types = 29;
pub const prop_types_TELEPAT: prop_types = 30;
pub const prop_types_WARNING: prop_types = 31;
pub const prop_types_WARN_OF_MON: prop_types = 32;
pub const prop_types_WARN_UNDEAD: prop_types = 33;
pub const prop_types_SEARCHING: prop_types = 34;
pub const prop_types_CLAIRVOYANT: prop_types = 35;
pub const prop_types_INFRAVISION: prop_types = 36;
pub const prop_types_DETECT_MONSTERS: prop_types = 37;
pub const prop_types_ADORNED: prop_types = 38;
pub const prop_types_INVIS: prop_types = 39;
pub const prop_types_DISPLACED: prop_types = 40;
pub const prop_types_STEALTH: prop_types = 41;
pub const prop_types_AGGRAVATE_MONSTER: prop_types = 42;
pub const prop_types_CONFLICT: prop_types = 43;
pub const prop_types_JUMPING: prop_types = 44;
pub const prop_types_TELEPORT: prop_types = 45;
pub const prop_types_TELEPORT_CONTROL: prop_types = 46;
pub const prop_types_LEVITATION: prop_types = 47;
pub const prop_types_FLYING: prop_types = 48;
pub const prop_types_WWALKING: prop_types = 49;
pub const prop_types_SWIMMING: prop_types = 50;
pub const prop_types_MAGICAL_BREATHING: prop_types = 51;
pub const prop_types_PASSES_WALLS: prop_types = 52;
pub const prop_types_SLOW_DIGESTION: prop_types = 53;
pub const prop_types_HALF_SPDAM: prop_types = 54;
pub const prop_types_HALF_PHDAM: prop_types = 55;
pub const prop_types_REGENERATION: prop_types = 56;
pub const prop_types_ENERGY_REGENERATION: prop_types = 57;
pub const prop_types_PROTECTION: prop_types = 58;
pub const prop_types_PROT_FROM_SHAPE_CHANGERS: prop_types = 59;
pub const prop_types_POLYMORPH: prop_types = 60;
pub const prop_types_POLYMORPH_CONTROL: prop_types = 61;
pub const prop_types_UNCHANGING: prop_types = 62;
pub const prop_types_FAST: prop_types = 63;
pub const prop_types_REFLECTING: prop_types = 64;
pub const prop_types_FREE_ACTION: prop_types = 65;
pub const prop_types_FIXED_ABIL: prop_types = 66;
pub const prop_types_LIFESAVED: prop_types = 67;
#[doc = " What the properties are ***"]
#[doc = ""]
#[doc = " note:  propertynames[] array in timeout.c has string values for these."]
#[doc = "        Property #0 is not used."]
pub type prop_types = ::std::os::raw::c_int;
#[doc = " Where the properties come from"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prop {
    #[doc = " Properties conveyed by objects"]
    pub extrinsic: ::std::os::raw::c_long,
    #[doc = " Property is blocked by an object"]
    pub blocked: ::std::os::raw::c_long,
    #[doc = " Timeouts, permanent properties, and other flags"]
    pub intrinsic: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_prop() {
    assert_eq!(
        ::std::mem::size_of::<prop>(),
        12usize,
        concat!("Size of: ", stringify!(prop))
    );
    assert_eq!(
        ::std::mem::align_of::<prop>(),
        4usize,
        concat!("Alignment of ", stringify!(prop))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop>())).extrinsic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prop),
            "::",
            stringify!(extrinsic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop>())).blocked as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(prop),
            "::",
            stringify!(blocked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prop>())).intrinsic as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prop),
            "::",
            stringify!(intrinsic)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attack {
    pub aatyp: uchar,
    pub adtyp: uchar,
    pub damn: uchar,
    pub damd: uchar,
}
#[test]
fn bindgen_test_layout_attack() {
    assert_eq!(
        ::std::mem::size_of::<attack>(),
        4usize,
        concat!("Size of: ", stringify!(attack))
    );
    assert_eq!(
        ::std::mem::align_of::<attack>(),
        1usize,
        concat!("Alignment of ", stringify!(attack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<attack>())).aatyp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attack),
            "::",
            stringify!(aatyp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<attack>())).adtyp as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(attack),
            "::",
            stringify!(adtyp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<attack>())).damn as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(attack),
            "::",
            stringify!(damn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<attack>())).damd as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(attack),
            "::",
            stringify!(damd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mhitm_data {
    pub damage: ::std::os::raw::c_int,
    pub hitflags: ::std::os::raw::c_int,
    pub done: boolean,
    pub permdmg: boolean,
    pub specialdmg: ::std::os::raw::c_int,
    pub dieroll: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mhitm_data() {
    assert_eq!(
        ::std::mem::size_of::<mhitm_data>(),
        20usize,
        concat!("Size of: ", stringify!(mhitm_data))
    );
    assert_eq!(
        ::std::mem::align_of::<mhitm_data>(),
        4usize,
        concat!("Alignment of ", stringify!(mhitm_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mhitm_data>())).damage as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mhitm_data),
            "::",
            stringify!(damage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mhitm_data>())).hitflags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mhitm_data),
            "::",
            stringify!(hitflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mhitm_data>())).done as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mhitm_data),
            "::",
            stringify!(done)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mhitm_data>())).permdmg as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(mhitm_data),
            "::",
            stringify!(permdmg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mhitm_data>())).specialdmg as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mhitm_data),
            "::",
            stringify!(specialdmg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mhitm_data>())).dieroll as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mhitm_data),
            "::",
            stringify!(dieroll)
        )
    );
}
pub const ms_sounds_MS_SILENT: ms_sounds = 0;
pub const ms_sounds_MS_BARK: ms_sounds = 1;
pub const ms_sounds_MS_MEW: ms_sounds = 2;
pub const ms_sounds_MS_ROAR: ms_sounds = 3;
pub const ms_sounds_MS_GROWL: ms_sounds = 4;
pub const ms_sounds_MS_SQEEK: ms_sounds = 5;
pub const ms_sounds_MS_SQAWK: ms_sounds = 6;
pub const ms_sounds_MS_HISS: ms_sounds = 7;
pub const ms_sounds_MS_BUZZ: ms_sounds = 8;
pub const ms_sounds_MS_GRUNT: ms_sounds = 9;
pub const ms_sounds_MS_NEIGH: ms_sounds = 10;
pub const ms_sounds_MS_MOO: ms_sounds = 11;
pub const ms_sounds_MS_WAIL: ms_sounds = 12;
pub const ms_sounds_MS_GURGLE: ms_sounds = 13;
pub const ms_sounds_MS_BURBLE: ms_sounds = 14;
pub const ms_sounds_MS_TRUMPET: ms_sounds = 15;
pub const ms_sounds_MS_ANIMAL: ms_sounds = 15;
pub const ms_sounds_MS_SHRIEK: ms_sounds = 16;
pub const ms_sounds_MS_BONES: ms_sounds = 17;
pub const ms_sounds_MS_LAUGH: ms_sounds = 18;
pub const ms_sounds_MS_MUMBLE: ms_sounds = 19;
pub const ms_sounds_MS_IMITATE: ms_sounds = 20;
pub const ms_sounds_MS_WERE: ms_sounds = 21;
pub const ms_sounds_MS_ORC: ms_sounds = 22;
pub const ms_sounds_MS_HUMANOID: ms_sounds = 23;
pub const ms_sounds_MS_ARREST: ms_sounds = 24;
pub const ms_sounds_MS_SOLDIER: ms_sounds = 25;
pub const ms_sounds_MS_GUARD: ms_sounds = 26;
pub const ms_sounds_MS_DJINNI: ms_sounds = 27;
pub const ms_sounds_MS_NURSE: ms_sounds = 28;
pub const ms_sounds_MS_SEDUCE: ms_sounds = 29;
pub const ms_sounds_MS_VAMPIRE: ms_sounds = 30;
pub const ms_sounds_MS_BRIBE: ms_sounds = 31;
pub const ms_sounds_MS_CUSS: ms_sounds = 32;
pub const ms_sounds_MS_RIDER: ms_sounds = 33;
pub const ms_sounds_MS_LEADER: ms_sounds = 34;
pub const ms_sounds_MS_NEMESIS: ms_sounds = 35;
pub const ms_sounds_MS_GUARDIAN: ms_sounds = 36;
pub const ms_sounds_MS_SELL: ms_sounds = 37;
pub const ms_sounds_MS_ORACLE: ms_sounds = 38;
pub const ms_sounds_MS_PRIEST: ms_sounds = 39;
pub const ms_sounds_MS_SPELL: ms_sounds = 40;
pub const ms_sounds_MS_BOAST: ms_sounds = 41;
pub type ms_sounds = ::std::os::raw::c_int;
pub const mgender_MALE: mgender = 0;
pub const mgender_FEMALE: mgender = 1;
pub const mgender_NEUTRAL: mgender = 2;
pub const mgender_NUM_MGENDERS: mgender = 3;
pub type mgender = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct permonst {
    pub pmnames: [*const ::std::os::raw::c_char; 3usize],
    pub mlet: ::std::os::raw::c_char,
    pub mlevel: schar,
    pub mmove: schar,
    pub ac: schar,
    pub mr: schar,
    pub maligntyp: aligntyp,
    pub geno: ::std::os::raw::c_ushort,
    pub mattk: [attack; 6usize],
    pub cwt: ::std::os::raw::c_ushort,
    pub cnutrit: ::std::os::raw::c_ushort,
    pub msound: uchar,
    pub msize: uchar,
    pub mresists: uchar,
    pub mconveys: uchar,
    pub mflags1: ::std::os::raw::c_ulong,
    pub mflags2: ::std::os::raw::c_ulong,
    pub mflags3: ::std::os::raw::c_ushort,
    pub difficulty: uchar,
    pub mcolor: uchar,
}
#[test]
fn bindgen_test_layout_permonst() {
    assert_eq!(
        ::std::mem::size_of::<permonst>(),
        80usize,
        concat!("Size of: ", stringify!(permonst))
    );
    assert_eq!(
        ::std::mem::align_of::<permonst>(),
        8usize,
        concat!("Alignment of ", stringify!(permonst))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).pmnames as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(pmnames)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).mlet as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(mlet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).mlevel as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(mlevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).mmove as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(mmove)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).ac as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(ac)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).mr as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(mr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).maligntyp as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(maligntyp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).geno as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(geno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).mattk as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(mattk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).cwt as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(cwt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).cnutrit as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(cnutrit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).msound as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(msound)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).msize as *const _ as usize },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(msize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).mresists as *const _ as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(mresists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).mconveys as *const _ as usize },
        63usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(mconveys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).mflags1 as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(mflags1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).mflags2 as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(mflags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).mflags3 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(mflags3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).difficulty as *const _ as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(difficulty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<permonst>())).mcolor as *const _ as usize },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(permonst),
            "::",
            stringify!(mcolor)
        )
    );
}
extern "C" {
    pub static mut mons: [permonst; 0usize];
}
pub const monnums_PM_GIANT_ANT: monnums = 0;
pub const monnums_PM_KILLER_BEE: monnums = 1;
pub const monnums_PM_SOLDIER_ANT: monnums = 2;
pub const monnums_PM_FIRE_ANT: monnums = 3;
pub const monnums_PM_GIANT_BEETLE: monnums = 4;
pub const monnums_PM_QUEEN_BEE: monnums = 5;
pub const monnums_PM_ACID_BLOB: monnums = 6;
pub const monnums_PM_QUIVERING_BLOB: monnums = 7;
pub const monnums_PM_GELATINOUS_CUBE: monnums = 8;
pub const monnums_PM_CHICKATRICE: monnums = 9;
pub const monnums_PM_COCKATRICE: monnums = 10;
pub const monnums_PM_PYROLISK: monnums = 11;
pub const monnums_PM_JACKAL: monnums = 12;
pub const monnums_PM_FOX: monnums = 13;
pub const monnums_PM_COYOTE: monnums = 14;
pub const monnums_PM_WEREJACKAL: monnums = 15;
pub const monnums_PM_LITTLE_DOG: monnums = 16;
pub const monnums_PM_DINGO: monnums = 17;
pub const monnums_PM_DOG: monnums = 18;
pub const monnums_PM_LARGE_DOG: monnums = 19;
pub const monnums_PM_WOLF: monnums = 20;
pub const monnums_PM_WEREWOLF: monnums = 21;
pub const monnums_PM_WINTER_WOLF_CUB: monnums = 22;
pub const monnums_PM_WARG: monnums = 23;
pub const monnums_PM_WINTER_WOLF: monnums = 24;
pub const monnums_PM_HELL_HOUND_PUP: monnums = 25;
pub const monnums_PM_HELL_HOUND: monnums = 26;
pub const monnums_PM_GAS_SPORE: monnums = 27;
pub const monnums_PM_FLOATING_EYE: monnums = 28;
pub const monnums_PM_FREEZING_SPHERE: monnums = 29;
pub const monnums_PM_FLAMING_SPHERE: monnums = 30;
pub const monnums_PM_SHOCKING_SPHERE: monnums = 31;
pub const monnums_PM_KITTEN: monnums = 32;
pub const monnums_PM_HOUSECAT: monnums = 33;
pub const monnums_PM_JAGUAR: monnums = 34;
pub const monnums_PM_LYNX: monnums = 35;
pub const monnums_PM_PANTHER: monnums = 36;
pub const monnums_PM_LARGE_CAT: monnums = 37;
pub const monnums_PM_TIGER: monnums = 38;
pub const monnums_PM_DISPLACER_BEAST: monnums = 39;
pub const monnums_PM_GREMLIN: monnums = 40;
pub const monnums_PM_GARGOYLE: monnums = 41;
pub const monnums_PM_WINGED_GARGOYLE: monnums = 42;
pub const monnums_PM_HOBBIT: monnums = 43;
pub const monnums_PM_DWARF: monnums = 44;
pub const monnums_PM_BUGBEAR: monnums = 45;
pub const monnums_PM_DWARF_LEADER: monnums = 46;
pub const monnums_PM_DWARF_RULER: monnums = 47;
pub const monnums_PM_MIND_FLAYER: monnums = 48;
pub const monnums_PM_MASTER_MIND_FLAYER: monnums = 49;
pub const monnums_PM_MANES: monnums = 50;
pub const monnums_PM_HOMUNCULUS: monnums = 51;
pub const monnums_PM_IMP: monnums = 52;
pub const monnums_PM_LEMURE: monnums = 53;
pub const monnums_PM_QUASIT: monnums = 54;
pub const monnums_PM_TENGU: monnums = 55;
pub const monnums_PM_BLUE_JELLY: monnums = 56;
pub const monnums_PM_SPOTTED_JELLY: monnums = 57;
pub const monnums_PM_OCHRE_JELLY: monnums = 58;
pub const monnums_PM_KOBOLD: monnums = 59;
pub const monnums_PM_LARGE_KOBOLD: monnums = 60;
pub const monnums_PM_KOBOLD_LEADER: monnums = 61;
pub const monnums_PM_KOBOLD_SHAMAN: monnums = 62;
pub const monnums_PM_LEPRECHAUN: monnums = 63;
pub const monnums_PM_SMALL_MIMIC: monnums = 64;
pub const monnums_PM_LARGE_MIMIC: monnums = 65;
pub const monnums_PM_GIANT_MIMIC: monnums = 66;
pub const monnums_PM_WOOD_NYMPH: monnums = 67;
pub const monnums_PM_WATER_NYMPH: monnums = 68;
pub const monnums_PM_MOUNTAIN_NYMPH: monnums = 69;
pub const monnums_PM_GOBLIN: monnums = 70;
pub const monnums_PM_HOBGOBLIN: monnums = 71;
pub const monnums_PM_ORC: monnums = 72;
pub const monnums_PM_HILL_ORC: monnums = 73;
pub const monnums_PM_MORDOR_ORC: monnums = 74;
pub const monnums_PM_URUK_HAI: monnums = 75;
pub const monnums_PM_ORC_SHAMAN: monnums = 76;
pub const monnums_PM_ORC_CAPTAIN: monnums = 77;
pub const monnums_PM_ROCK_PIERCER: monnums = 78;
pub const monnums_PM_IRON_PIERCER: monnums = 79;
pub const monnums_PM_GLASS_PIERCER: monnums = 80;
pub const monnums_PM_ROTHE: monnums = 81;
pub const monnums_PM_MUMAK: monnums = 82;
pub const monnums_PM_LEOCROTTA: monnums = 83;
pub const monnums_PM_WUMPUS: monnums = 84;
pub const monnums_PM_TITANOTHERE: monnums = 85;
pub const monnums_PM_BALUCHITHERIUM: monnums = 86;
pub const monnums_PM_MASTODON: monnums = 87;
pub const monnums_PM_SEWER_RAT: monnums = 88;
pub const monnums_PM_GIANT_RAT: monnums = 89;
pub const monnums_PM_RABID_RAT: monnums = 90;
pub const monnums_PM_WERERAT: monnums = 91;
pub const monnums_PM_ROCK_MOLE: monnums = 92;
pub const monnums_PM_WOODCHUCK: monnums = 93;
pub const monnums_PM_CAVE_SPIDER: monnums = 94;
pub const monnums_PM_CENTIPEDE: monnums = 95;
pub const monnums_PM_GIANT_SPIDER: monnums = 96;
pub const monnums_PM_SCORPION: monnums = 97;
pub const monnums_PM_LURKER_ABOVE: monnums = 98;
pub const monnums_PM_TRAPPER: monnums = 99;
pub const monnums_PM_PONY: monnums = 100;
pub const monnums_PM_WHITE_UNICORN: monnums = 101;
pub const monnums_PM_GRAY_UNICORN: monnums = 102;
pub const monnums_PM_BLACK_UNICORN: monnums = 103;
pub const monnums_PM_HORSE: monnums = 104;
pub const monnums_PM_WARHORSE: monnums = 105;
pub const monnums_PM_FOG_CLOUD: monnums = 106;
pub const monnums_PM_DUST_VORTEX: monnums = 107;
pub const monnums_PM_ICE_VORTEX: monnums = 108;
pub const monnums_PM_ENERGY_VORTEX: monnums = 109;
pub const monnums_PM_STEAM_VORTEX: monnums = 110;
pub const monnums_PM_FIRE_VORTEX: monnums = 111;
pub const monnums_PM_BABY_LONG_WORM: monnums = 112;
pub const monnums_PM_BABY_PURPLE_WORM: monnums = 113;
pub const monnums_PM_LONG_WORM: monnums = 114;
pub const monnums_PM_PURPLE_WORM: monnums = 115;
pub const monnums_PM_GRID_BUG: monnums = 116;
pub const monnums_PM_XAN: monnums = 117;
pub const monnums_PM_YELLOW_LIGHT: monnums = 118;
pub const monnums_PM_BLACK_LIGHT: monnums = 119;
pub const monnums_PM_ZRUTY: monnums = 120;
pub const monnums_PM_COUATL: monnums = 121;
pub const monnums_PM_ALEAX: monnums = 122;
pub const monnums_PM_ANGEL: monnums = 123;
pub const monnums_PM_KI_RIN: monnums = 124;
pub const monnums_PM_ARCHON: monnums = 125;
pub const monnums_PM_BAT: monnums = 126;
pub const monnums_PM_GIANT_BAT: monnums = 127;
pub const monnums_PM_RAVEN: monnums = 128;
pub const monnums_PM_VAMPIRE_BAT: monnums = 129;
pub const monnums_PM_PLAINS_CENTAUR: monnums = 130;
pub const monnums_PM_FOREST_CENTAUR: monnums = 131;
pub const monnums_PM_MOUNTAIN_CENTAUR: monnums = 132;
pub const monnums_PM_BABY_GRAY_DRAGON: monnums = 133;
pub const monnums_PM_BABY_SILVER_DRAGON: monnums = 134;
pub const monnums_PM_BABY_RED_DRAGON: monnums = 135;
pub const monnums_PM_BABY_WHITE_DRAGON: monnums = 136;
pub const monnums_PM_BABY_ORANGE_DRAGON: monnums = 137;
pub const monnums_PM_BABY_BLACK_DRAGON: monnums = 138;
pub const monnums_PM_BABY_BLUE_DRAGON: monnums = 139;
pub const monnums_PM_BABY_GREEN_DRAGON: monnums = 140;
pub const monnums_PM_BABY_YELLOW_DRAGON: monnums = 141;
pub const monnums_PM_GRAY_DRAGON: monnums = 142;
pub const monnums_PM_SILVER_DRAGON: monnums = 143;
pub const monnums_PM_RED_DRAGON: monnums = 144;
pub const monnums_PM_WHITE_DRAGON: monnums = 145;
pub const monnums_PM_ORANGE_DRAGON: monnums = 146;
pub const monnums_PM_BLACK_DRAGON: monnums = 147;
pub const monnums_PM_BLUE_DRAGON: monnums = 148;
pub const monnums_PM_GREEN_DRAGON: monnums = 149;
pub const monnums_PM_YELLOW_DRAGON: monnums = 150;
pub const monnums_PM_STALKER: monnums = 151;
pub const monnums_PM_AIR_ELEMENTAL: monnums = 152;
pub const monnums_PM_FIRE_ELEMENTAL: monnums = 153;
pub const monnums_PM_EARTH_ELEMENTAL: monnums = 154;
pub const monnums_PM_WATER_ELEMENTAL: monnums = 155;
pub const monnums_PM_LICHEN: monnums = 156;
pub const monnums_PM_BROWN_MOLD: monnums = 157;
pub const monnums_PM_YELLOW_MOLD: monnums = 158;
pub const monnums_PM_GREEN_MOLD: monnums = 159;
pub const monnums_PM_RED_MOLD: monnums = 160;
pub const monnums_PM_SHRIEKER: monnums = 161;
pub const monnums_PM_VIOLET_FUNGUS: monnums = 162;
pub const monnums_PM_GNOME: monnums = 163;
pub const monnums_PM_GNOME_LEADER: monnums = 164;
pub const monnums_PM_GNOMISH_WIZARD: monnums = 165;
pub const monnums_PM_GNOME_RULER: monnums = 166;
pub const monnums_PM_GIANT: monnums = 167;
pub const monnums_PM_STONE_GIANT: monnums = 168;
pub const monnums_PM_HILL_GIANT: monnums = 169;
pub const monnums_PM_FIRE_GIANT: monnums = 170;
pub const monnums_PM_FROST_GIANT: monnums = 171;
pub const monnums_PM_ETTIN: monnums = 172;
pub const monnums_PM_STORM_GIANT: monnums = 173;
pub const monnums_PM_TITAN: monnums = 174;
pub const monnums_PM_MINOTAUR: monnums = 175;
pub const monnums_PM_JABBERWOCK: monnums = 176;
pub const monnums_PM_KEYSTONE_KOP: monnums = 177;
pub const monnums_PM_KOP_SERGEANT: monnums = 178;
pub const monnums_PM_KOP_LIEUTENANT: monnums = 179;
pub const monnums_PM_KOP_KAPTAIN: monnums = 180;
pub const monnums_PM_LICH: monnums = 181;
pub const monnums_PM_DEMILICH: monnums = 182;
pub const monnums_PM_MASTER_LICH: monnums = 183;
pub const monnums_PM_ARCH_LICH: monnums = 184;
pub const monnums_PM_KOBOLD_MUMMY: monnums = 185;
pub const monnums_PM_GNOME_MUMMY: monnums = 186;
pub const monnums_PM_ORC_MUMMY: monnums = 187;
pub const monnums_PM_DWARF_MUMMY: monnums = 188;
pub const monnums_PM_ELF_MUMMY: monnums = 189;
pub const monnums_PM_HUMAN_MUMMY: monnums = 190;
pub const monnums_PM_ETTIN_MUMMY: monnums = 191;
pub const monnums_PM_GIANT_MUMMY: monnums = 192;
pub const monnums_PM_RED_NAGA_HATCHLING: monnums = 193;
pub const monnums_PM_BLACK_NAGA_HATCHLING: monnums = 194;
pub const monnums_PM_GOLDEN_NAGA_HATCHLING: monnums = 195;
pub const monnums_PM_GUARDIAN_NAGA_HATCHLING: monnums = 196;
pub const monnums_PM_RED_NAGA: monnums = 197;
pub const monnums_PM_BLACK_NAGA: monnums = 198;
pub const monnums_PM_GOLDEN_NAGA: monnums = 199;
pub const monnums_PM_GUARDIAN_NAGA: monnums = 200;
pub const monnums_PM_OGRE: monnums = 201;
pub const monnums_PM_OGRE_LEADER: monnums = 202;
pub const monnums_PM_OGRE_TYRANT: monnums = 203;
pub const monnums_PM_GRAY_OOZE: monnums = 204;
pub const monnums_PM_BROWN_PUDDING: monnums = 205;
pub const monnums_PM_GREEN_SLIME: monnums = 206;
pub const monnums_PM_BLACK_PUDDING: monnums = 207;
pub const monnums_PM_QUANTUM_MECHANIC: monnums = 208;
pub const monnums_PM_GENETIC_ENGINEER: monnums = 209;
pub const monnums_PM_RUST_MONSTER: monnums = 210;
pub const monnums_PM_DISENCHANTER: monnums = 211;
pub const monnums_PM_GARTER_SNAKE: monnums = 212;
pub const monnums_PM_SNAKE: monnums = 213;
pub const monnums_PM_WATER_MOCCASIN: monnums = 214;
pub const monnums_PM_PYTHON: monnums = 215;
pub const monnums_PM_PIT_VIPER: monnums = 216;
pub const monnums_PM_COBRA: monnums = 217;
pub const monnums_PM_TROLL: monnums = 218;
pub const monnums_PM_ICE_TROLL: monnums = 219;
pub const monnums_PM_ROCK_TROLL: monnums = 220;
pub const monnums_PM_WATER_TROLL: monnums = 221;
pub const monnums_PM_OLOG_HAI: monnums = 222;
pub const monnums_PM_UMBER_HULK: monnums = 223;
pub const monnums_PM_VAMPIRE: monnums = 224;
pub const monnums_PM_VAMPIRE_LEADER: monnums = 225;
pub const monnums_PM_VLAD_THE_IMPALER: monnums = 226;
pub const monnums_PM_BARROW_WIGHT: monnums = 227;
pub const monnums_PM_WRAITH: monnums = 228;
pub const monnums_PM_NAZGUL: monnums = 229;
pub const monnums_PM_XORN: monnums = 230;
pub const monnums_PM_MONKEY: monnums = 231;
pub const monnums_PM_APE: monnums = 232;
pub const monnums_PM_OWLBEAR: monnums = 233;
pub const monnums_PM_YETI: monnums = 234;
pub const monnums_PM_CARNIVOROUS_APE: monnums = 235;
pub const monnums_PM_SASQUATCH: monnums = 236;
pub const monnums_PM_KOBOLD_ZOMBIE: monnums = 237;
pub const monnums_PM_GNOME_ZOMBIE: monnums = 238;
pub const monnums_PM_ORC_ZOMBIE: monnums = 239;
pub const monnums_PM_DWARF_ZOMBIE: monnums = 240;
pub const monnums_PM_ELF_ZOMBIE: monnums = 241;
pub const monnums_PM_HUMAN_ZOMBIE: monnums = 242;
pub const monnums_PM_ETTIN_ZOMBIE: monnums = 243;
pub const monnums_PM_GHOUL: monnums = 244;
pub const monnums_PM_GIANT_ZOMBIE: monnums = 245;
pub const monnums_PM_SKELETON: monnums = 246;
pub const monnums_PM_STRAW_GOLEM: monnums = 247;
pub const monnums_PM_PAPER_GOLEM: monnums = 248;
pub const monnums_PM_ROPE_GOLEM: monnums = 249;
pub const monnums_PM_GOLD_GOLEM: monnums = 250;
pub const monnums_PM_LEATHER_GOLEM: monnums = 251;
pub const monnums_PM_WOOD_GOLEM: monnums = 252;
pub const monnums_PM_FLESH_GOLEM: monnums = 253;
pub const monnums_PM_CLAY_GOLEM: monnums = 254;
pub const monnums_PM_STONE_GOLEM: monnums = 255;
pub const monnums_PM_GLASS_GOLEM: monnums = 256;
pub const monnums_PM_IRON_GOLEM: monnums = 257;
pub const monnums_PM_HUMAN: monnums = 258;
pub const monnums_PM_HUMAN_WERERAT: monnums = 259;
pub const monnums_PM_HUMAN_WEREJACKAL: monnums = 260;
pub const monnums_PM_HUMAN_WEREWOLF: monnums = 261;
pub const monnums_PM_ELF: monnums = 262;
pub const monnums_PM_WOODLAND_ELF: monnums = 263;
pub const monnums_PM_GREEN_ELF: monnums = 264;
pub const monnums_PM_GREY_ELF: monnums = 265;
pub const monnums_PM_ELF_NOBLE: monnums = 266;
pub const monnums_PM_ELVEN_MONARCH: monnums = 267;
pub const monnums_PM_DOPPELGANGER: monnums = 268;
pub const monnums_PM_SHOPKEEPER: monnums = 269;
pub const monnums_PM_GUARD: monnums = 270;
pub const monnums_PM_PRISONER: monnums = 271;
pub const monnums_PM_ORACLE: monnums = 272;
pub const monnums_PM_ALIGNED_CLERIC: monnums = 273;
pub const monnums_PM_HIGH_CLERIC: monnums = 274;
pub const monnums_PM_SOLDIER: monnums = 275;
pub const monnums_PM_SERGEANT: monnums = 276;
pub const monnums_PM_NURSE: monnums = 277;
pub const monnums_PM_LIEUTENANT: monnums = 278;
pub const monnums_PM_CAPTAIN: monnums = 279;
pub const monnums_PM_WATCHMAN: monnums = 280;
pub const monnums_PM_WATCH_CAPTAIN: monnums = 281;
pub const monnums_PM_MEDUSA: monnums = 282;
pub const monnums_PM_WIZARD_OF_YENDOR: monnums = 283;
pub const monnums_PM_CROESUS: monnums = 284;
pub const monnums_PM_GHOST: monnums = 285;
pub const monnums_PM_SHADE: monnums = 286;
pub const monnums_PM_WATER_DEMON: monnums = 287;
pub const monnums_PM_AMOROUS_DEMON: monnums = 288;
pub const monnums_PM_HORNED_DEVIL: monnums = 289;
pub const monnums_PM_ERINYS: monnums = 290;
pub const monnums_PM_BARBED_DEVIL: monnums = 291;
pub const monnums_PM_MARILITH: monnums = 292;
pub const monnums_PM_VROCK: monnums = 293;
pub const monnums_PM_HEZROU: monnums = 294;
pub const monnums_PM_BONE_DEVIL: monnums = 295;
pub const monnums_PM_ICE_DEVIL: monnums = 296;
pub const monnums_PM_NALFESHNEE: monnums = 297;
pub const monnums_PM_PIT_FIEND: monnums = 298;
pub const monnums_PM_SANDESTIN: monnums = 299;
pub const monnums_PM_BALROG: monnums = 300;
pub const monnums_PM_JUIBLEX: monnums = 301;
pub const monnums_PM_YEENOGHU: monnums = 302;
pub const monnums_PM_ORCUS: monnums = 303;
pub const monnums_PM_GERYON: monnums = 304;
pub const monnums_PM_DISPATER: monnums = 305;
pub const monnums_PM_BAALZEBUB: monnums = 306;
pub const monnums_PM_ASMODEUS: monnums = 307;
pub const monnums_PM_DEMOGORGON: monnums = 308;
pub const monnums_PM_DEATH: monnums = 309;
pub const monnums_PM_PESTILENCE: monnums = 310;
pub const monnums_PM_FAMINE: monnums = 311;
pub const monnums_PM_MAIL_DAEMON: monnums = 312;
pub const monnums_PM_DJINNI: monnums = 313;
pub const monnums_PM_JELLYFISH: monnums = 314;
pub const monnums_PM_PIRANHA: monnums = 315;
pub const monnums_PM_SHARK: monnums = 316;
pub const monnums_PM_GIANT_EEL: monnums = 317;
pub const monnums_PM_ELECTRIC_EEL: monnums = 318;
pub const monnums_PM_KRAKEN: monnums = 319;
pub const monnums_PM_NEWT: monnums = 320;
pub const monnums_PM_GECKO: monnums = 321;
pub const monnums_PM_IGUANA: monnums = 322;
pub const monnums_PM_BABY_CROCODILE: monnums = 323;
pub const monnums_PM_LIZARD: monnums = 324;
pub const monnums_PM_CHAMELEON: monnums = 325;
pub const monnums_PM_CROCODILE: monnums = 326;
pub const monnums_PM_SALAMANDER: monnums = 327;
pub const monnums_PM_LONG_WORM_TAIL: monnums = 328;
pub const monnums_PM_ARCHEOLOGIST: monnums = 329;
pub const monnums_PM_BARBARIAN: monnums = 330;
pub const monnums_PM_CAVE_DWELLER: monnums = 331;
pub const monnums_PM_HEALER: monnums = 332;
pub const monnums_PM_KNIGHT: monnums = 333;
pub const monnums_PM_MONK: monnums = 334;
pub const monnums_PM_CLERIC: monnums = 335;
pub const monnums_PM_RANGER: monnums = 336;
pub const monnums_PM_ROGUE: monnums = 337;
pub const monnums_PM_SAMURAI: monnums = 338;
pub const monnums_PM_TOURIST: monnums = 339;
pub const monnums_PM_VALKYRIE: monnums = 340;
pub const monnums_PM_WIZARD: monnums = 341;
pub const monnums_PM_LORD_CARNARVON: monnums = 342;
pub const monnums_PM_PELIAS: monnums = 343;
pub const monnums_PM_SHAMAN_KARNOV: monnums = 344;
pub const monnums_PM_HIPPOCRATES: monnums = 345;
pub const monnums_PM_KING_ARTHUR: monnums = 346;
pub const monnums_PM_GRAND_MASTER: monnums = 347;
pub const monnums_PM_ARCH_PRIEST: monnums = 348;
pub const monnums_PM_ORION: monnums = 349;
pub const monnums_PM_MASTER_OF_THIEVES: monnums = 350;
pub const monnums_PM_LORD_SATO: monnums = 351;
pub const monnums_PM_TWOFLOWER: monnums = 352;
pub const monnums_PM_NORN: monnums = 353;
pub const monnums_PM_NEFERET_THE_GREEN: monnums = 354;
pub const monnums_PM_MINION_OF_HUHETOTL: monnums = 355;
pub const monnums_PM_THOTH_AMON: monnums = 356;
pub const monnums_PM_CHROMATIC_DRAGON: monnums = 357;
pub const monnums_PM_CYCLOPS: monnums = 358;
pub const monnums_PM_IXOTH: monnums = 359;
pub const monnums_PM_MASTER_KAEN: monnums = 360;
pub const monnums_PM_NALZOK: monnums = 361;
pub const monnums_PM_SCORPIUS: monnums = 362;
pub const monnums_PM_MASTER_ASSASSIN: monnums = 363;
pub const monnums_PM_ASHIKAGA_TAKAUJI: monnums = 364;
pub const monnums_PM_LORD_SURTUR: monnums = 365;
pub const monnums_PM_DARK_ONE: monnums = 366;
pub const monnums_PM_STUDENT: monnums = 367;
pub const monnums_PM_CHIEFTAIN: monnums = 368;
pub const monnums_PM_NEANDERTHAL: monnums = 369;
pub const monnums_PM_ATTENDANT: monnums = 370;
pub const monnums_PM_PAGE: monnums = 371;
pub const monnums_PM_ABBOT: monnums = 372;
pub const monnums_PM_ACOLYTE: monnums = 373;
pub const monnums_PM_HUNTER: monnums = 374;
pub const monnums_PM_THUG: monnums = 375;
pub const monnums_PM_NINJA: monnums = 376;
pub const monnums_PM_ROSHI: monnums = 377;
pub const monnums_PM_GUIDE: monnums = 378;
pub const monnums_PM_WARRIOR: monnums = 379;
pub const monnums_PM_APPRENTICE: monnums = 380;
pub const monnums_NUMMONS: monnums = 381;
pub type monnums = ::std::os::raw::c_int;
pub type winid = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union any {
    pub a_void: genericptr_t,
    pub a_obj: *mut obj,
    pub a_monst: *mut monst,
    pub a_int: ::std::os::raw::c_int,
    pub a_char: ::std::os::raw::c_char,
    pub a_schar: schar,
    pub a_uchar: uchar,
    pub a_uint: ::std::os::raw::c_uint,
    pub a_long: ::std::os::raw::c_long,
    pub a_ulong: ::std::os::raw::c_ulong,
    pub a_iptr: *mut ::std::os::raw::c_int,
    pub a_lptr: *mut ::std::os::raw::c_long,
    pub a_ulptr: *mut ::std::os::raw::c_ulong,
    pub a_uptr: *mut ::std::os::raw::c_uint,
    pub a_string: *const ::std::os::raw::c_char,
    pub a_nfunc: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub a_mask32: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_any() {
    assert_eq!(
        ::std::mem::size_of::<any>(),
        8usize,
        concat!("Size of: ", stringify!(any))
    );
    assert_eq!(
        ::std::mem::align_of::<any>(),
        8usize,
        concat!("Alignment of ", stringify!(any))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).a_void as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(a_void)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).a_obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(a_obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).a_monst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(a_monst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).a_int as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(a_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).a_char as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(a_char)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).a_schar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(a_schar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).a_uchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(a_uchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).a_uint as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(a_uint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).a_long as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(a_long)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).a_ulong as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(a_ulong)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).a_iptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(a_iptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).a_lptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(a_lptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).a_ulptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(a_ulptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).a_uptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(a_uptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).a_string as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(a_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).a_nfunc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(a_nfunc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<any>())).a_mask32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(any),
            "::",
            stringify!(a_mask32)
        )
    );
}
pub type anything = any;
pub const any_types_ANY_VOID: any_types = 1;
pub const any_types_ANY_OBJ: any_types = 2;
pub const any_types_ANY_MONST: any_types = 3;
pub const any_types_ANY_INT: any_types = 4;
pub const any_types_ANY_CHAR: any_types = 5;
pub const any_types_ANY_UCHAR: any_types = 6;
pub const any_types_ANY_SCHAR: any_types = 7;
pub const any_types_ANY_UINT: any_types = 8;
pub const any_types_ANY_LONG: any_types = 9;
pub const any_types_ANY_ULONG: any_types = 10;
pub const any_types_ANY_IPTR: any_types = 11;
pub const any_types_ANY_UPTR: any_types = 12;
pub const any_types_ANY_LPTR: any_types = 13;
pub const any_types_ANY_ULPTR: any_types = 14;
pub const any_types_ANY_STR: any_types = 15;
pub const any_types_ANY_NFUNC: any_types = 16;
pub const any_types_ANY_MASK32: any_types = 17;
pub type any_types = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gi {
    pub glyph: ::std::os::raw::c_int,
    pub color: ::std::os::raw::c_int,
    pub ttychar: ::std::os::raw::c_int,
    pub symidx: ::std::os::raw::c_short,
    pub glyphflags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_gi() {
    assert_eq!(
        ::std::mem::size_of::<gi>(),
        20usize,
        concat!("Size of: ", stringify!(gi))
    );
    assert_eq!(
        ::std::mem::align_of::<gi>(),
        4usize,
        concat!("Alignment of ", stringify!(gi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gi>())).glyph as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(gi), "::", stringify!(glyph))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gi>())).color as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(gi), "::", stringify!(color))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gi>())).ttychar as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gi),
            "::",
            stringify!(ttychar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gi>())).symidx as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(gi),
            "::",
            stringify!(symidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gi>())).glyphflags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(gi),
            "::",
            stringify!(glyphflags)
        )
    );
}
pub type glyph_info = gi;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mi {
    pub item: anything,
    pub count: ::std::os::raw::c_long,
    pub itemflags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_mi() {
    assert_eq!(
        ::std::mem::size_of::<mi>(),
        16usize,
        concat!("Size of: ", stringify!(mi))
    );
    assert_eq!(
        ::std::mem::align_of::<mi>(),
        8usize,
        concat!("Alignment of ", stringify!(mi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mi>())).item as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(mi), "::", stringify!(item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mi>())).count as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(mi), "::", stringify!(count))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mi>())).itemflags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mi),
            "::",
            stringify!(itemflags)
        )
    );
}
pub type menu_item = mi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dig_info {
    pub effort: ::std::os::raw::c_int,
    pub level: d_level,
    pub pos: coord,
    pub lastdigtime: ::std::os::raw::c_long,
    pub down: boolean,
    pub chew: boolean,
    pub warned: boolean,
    pub quiet: boolean,
}
#[test]
fn bindgen_test_layout_dig_info() {
    assert_eq!(
        ::std::mem::size_of::<dig_info>(),
        16usize,
        concat!("Size of: ", stringify!(dig_info))
    );
    assert_eq!(
        ::std::mem::align_of::<dig_info>(),
        4usize,
        concat!("Alignment of ", stringify!(dig_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dig_info>())).effort as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dig_info),
            "::",
            stringify!(effort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dig_info>())).level as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dig_info),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dig_info>())).pos as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(dig_info),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dig_info>())).lastdigtime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dig_info),
            "::",
            stringify!(lastdigtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dig_info>())).down as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dig_info),
            "::",
            stringify!(down)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dig_info>())).chew as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(dig_info),
            "::",
            stringify!(chew)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dig_info>())).warned as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(dig_info),
            "::",
            stringify!(warned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dig_info>())).quiet as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(dig_info),
            "::",
            stringify!(quiet)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tin_info {
    pub tin: *mut obj,
    pub o_id: ::std::os::raw::c_uint,
    pub usedtime: ::std::os::raw::c_int,
    pub reqtime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tin_info() {
    assert_eq!(
        ::std::mem::size_of::<tin_info>(),
        24usize,
        concat!("Size of: ", stringify!(tin_info))
    );
    assert_eq!(
        ::std::mem::align_of::<tin_info>(),
        8usize,
        concat!("Alignment of ", stringify!(tin_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tin_info>())).tin as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tin_info),
            "::",
            stringify!(tin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tin_info>())).o_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tin_info),
            "::",
            stringify!(o_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tin_info>())).usedtime as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tin_info),
            "::",
            stringify!(usedtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tin_info>())).reqtime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tin_info),
            "::",
            stringify!(reqtime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct book_info {
    pub book: *mut obj,
    pub o_id: ::std::os::raw::c_uint,
    pub delay: schar,
}
#[test]
fn bindgen_test_layout_book_info() {
    assert_eq!(
        ::std::mem::size_of::<book_info>(),
        16usize,
        concat!("Size of: ", stringify!(book_info))
    );
    assert_eq!(
        ::std::mem::align_of::<book_info>(),
        8usize,
        concat!("Alignment of ", stringify!(book_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<book_info>())).book as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(book_info),
            "::",
            stringify!(book)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<book_info>())).o_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(book_info),
            "::",
            stringify!(o_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<book_info>())).delay as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(book_info),
            "::",
            stringify!(delay)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct takeoff_info {
    pub mask: ::std::os::raw::c_long,
    pub what: ::std::os::raw::c_long,
    pub delay: ::std::os::raw::c_int,
    pub cancelled_don: boolean,
    pub disrobing: [::std::os::raw::c_char; 31usize],
}
#[test]
fn bindgen_test_layout_takeoff_info() {
    assert_eq!(
        ::std::mem::size_of::<takeoff_info>(),
        44usize,
        concat!("Size of: ", stringify!(takeoff_info))
    );
    assert_eq!(
        ::std::mem::align_of::<takeoff_info>(),
        4usize,
        concat!("Alignment of ", stringify!(takeoff_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<takeoff_info>())).mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(takeoff_info),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<takeoff_info>())).what as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(takeoff_info),
            "::",
            stringify!(what)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<takeoff_info>())).delay as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(takeoff_info),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<takeoff_info>())).cancelled_don as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(takeoff_info),
            "::",
            stringify!(cancelled_don)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<takeoff_info>())).disrobing as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(takeoff_info),
            "::",
            stringify!(disrobing)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct victual_info {
    pub piece: *mut obj,
    pub o_id: ::std::os::raw::c_uint,
    pub usedtime: ::std::os::raw::c_int,
    pub reqtime: ::std::os::raw::c_int,
    pub nmod: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_victual_info() {
    assert_eq!(
        ::std::mem::size_of::<victual_info>(),
        32usize,
        concat!("Size of: ", stringify!(victual_info))
    );
    assert_eq!(
        ::std::mem::align_of::<victual_info>(),
        8usize,
        concat!("Alignment of ", stringify!(victual_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<victual_info>())).piece as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(victual_info),
            "::",
            stringify!(piece)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<victual_info>())).o_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(victual_info),
            "::",
            stringify!(o_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<victual_info>())).usedtime as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(victual_info),
            "::",
            stringify!(usedtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<victual_info>())).reqtime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(victual_info),
            "::",
            stringify!(reqtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<victual_info>())).nmod as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(victual_info),
            "::",
            stringify!(nmod)
        )
    );
}
impl victual_info {
    #[inline]
    pub fn canchoke(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_canchoke(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn fullwarn(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fullwarn(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn eating(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_eating(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn doreset(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_doreset(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        canchoke: ::std::os::raw::c_uint,
        fullwarn: ::std::os::raw::c_uint,
        eating: ::std::os::raw::c_uint,
        doreset: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let canchoke: u32 = unsafe { ::std::mem::transmute(canchoke) };
            canchoke as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let fullwarn: u32 = unsafe { ::std::mem::transmute(fullwarn) };
            fullwarn as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let eating: u32 = unsafe { ::std::mem::transmute(eating) };
            eating as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let doreset: u32 = unsafe { ::std::mem::transmute(doreset) };
            doreset as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct engrave_info {
    pub text: [::std::os::raw::c_char; 256usize],
    pub nextc: *mut ::std::os::raw::c_char,
    pub stylus: *mut obj,
    pub type_: xchar,
    pub pos: coord,
    pub actionct: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_engrave_info() {
    assert_eq!(
        ::std::mem::size_of::<engrave_info>(),
        280usize,
        concat!("Size of: ", stringify!(engrave_info))
    );
    assert_eq!(
        ::std::mem::align_of::<engrave_info>(),
        8usize,
        concat!("Alignment of ", stringify!(engrave_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<engrave_info>())).text as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(engrave_info),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<engrave_info>())).nextc as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(engrave_info),
            "::",
            stringify!(nextc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<engrave_info>())).stylus as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(engrave_info),
            "::",
            stringify!(stylus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<engrave_info>())).type_ as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(engrave_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<engrave_info>())).pos as *const _ as usize },
        273usize,
        concat!(
            "Offset of field: ",
            stringify!(engrave_info),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<engrave_info>())).actionct as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(engrave_info),
            "::",
            stringify!(actionct)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct warntype_info {
    pub obj: ::std::os::raw::c_ulong,
    pub polyd: ::std::os::raw::c_ulong,
    pub species: *mut permonst,
    pub speciesidx: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_warntype_info() {
    assert_eq!(
        ::std::mem::size_of::<warntype_info>(),
        24usize,
        concat!("Size of: ", stringify!(warntype_info))
    );
    assert_eq!(
        ::std::mem::align_of::<warntype_info>(),
        8usize,
        concat!("Alignment of ", stringify!(warntype_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<warntype_info>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(warntype_info),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<warntype_info>())).polyd as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(warntype_info),
            "::",
            stringify!(polyd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<warntype_info>())).species as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(warntype_info),
            "::",
            stringify!(species)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<warntype_info>())).speciesidx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(warntype_info),
            "::",
            stringify!(speciesidx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct polearm_info {
    pub hitmon: *mut monst,
    pub m_id: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_polearm_info() {
    assert_eq!(
        ::std::mem::size_of::<polearm_info>(),
        16usize,
        concat!("Size of: ", stringify!(polearm_info))
    );
    assert_eq!(
        ::std::mem::align_of::<polearm_info>(),
        8usize,
        concat!("Alignment of ", stringify!(polearm_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<polearm_info>())).hitmon as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(polearm_info),
            "::",
            stringify!(hitmon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<polearm_info>())).m_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(polearm_info),
            "::",
            stringify!(m_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct obj_split {
    pub parent_oid: ::std::os::raw::c_uint,
    pub child_oid: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_obj_split() {
    assert_eq!(
        ::std::mem::size_of::<obj_split>(),
        8usize,
        concat!("Size of: ", stringify!(obj_split))
    );
    assert_eq!(
        ::std::mem::align_of::<obj_split>(),
        4usize,
        concat!("Alignment of ", stringify!(obj_split))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj_split>())).parent_oid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(obj_split),
            "::",
            stringify!(parent_oid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj_split>())).child_oid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(obj_split),
            "::",
            stringify!(child_oid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tribute_info {
    pub tributesz: size_t,
    pub enabled: boolean,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u16; 3usize],
}
#[test]
fn bindgen_test_layout_tribute_info() {
    assert_eq!(
        ::std::mem::size_of::<tribute_info>(),
        16usize,
        concat!("Size of: ", stringify!(tribute_info))
    );
    assert_eq!(
        ::std::mem::align_of::<tribute_info>(),
        8usize,
        concat!("Alignment of ", stringify!(tribute_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tribute_info>())).tributesz as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tribute_info),
            "::",
            stringify!(tributesz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tribute_info>())).enabled as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tribute_info),
            "::",
            stringify!(enabled)
        )
    );
}
impl tribute_info {
    #[inline]
    pub fn bookstock(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bookstock(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Deathnotice(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Deathnotice(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bookstock: ::std::os::raw::c_uint,
        Deathnotice: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bookstock: u32 = unsafe { ::std::mem::transmute(bookstock) };
            bookstock as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let Deathnotice: u32 = unsafe { ::std::mem::transmute(Deathnotice) };
            Deathnotice as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct novel_tracking {
    pub id: ::std::os::raw::c_uint,
    pub count: ::std::os::raw::c_int,
    pub pasg: [xchar; 30usize],
}
#[test]
fn bindgen_test_layout_novel_tracking() {
    assert_eq!(
        ::std::mem::size_of::<novel_tracking>(),
        40usize,
        concat!("Size of: ", stringify!(novel_tracking))
    );
    assert_eq!(
        ::std::mem::align_of::<novel_tracking>(),
        4usize,
        concat!("Alignment of ", stringify!(novel_tracking))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<novel_tracking>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(novel_tracking),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<novel_tracking>())).count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(novel_tracking),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<novel_tracking>())).pasg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(novel_tracking),
            "::",
            stringify!(pasg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct achievement_tracking {
    pub mines_prize_oid: ::std::os::raw::c_uint,
    pub soko_prize_oid: ::std::os::raw::c_uint,
    pub castle_prize_old: ::std::os::raw::c_uint,
    pub minetn_reached: boolean,
}
#[test]
fn bindgen_test_layout_achievement_tracking() {
    assert_eq!(
        ::std::mem::size_of::<achievement_tracking>(),
        16usize,
        concat!("Size of: ", stringify!(achievement_tracking))
    );
    assert_eq!(
        ::std::mem::align_of::<achievement_tracking>(),
        4usize,
        concat!("Alignment of ", stringify!(achievement_tracking))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<achievement_tracking>())).mines_prize_oid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(achievement_tracking),
            "::",
            stringify!(mines_prize_oid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<achievement_tracking>())).soko_prize_oid as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(achievement_tracking),
            "::",
            stringify!(soko_prize_oid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<achievement_tracking>())).castle_prize_old as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(achievement_tracking),
            "::",
            stringify!(castle_prize_old)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<achievement_tracking>())).minetn_reached as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(achievement_tracking),
            "::",
            stringify!(minetn_reached)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct context_info {
    pub ident: ::std::os::raw::c_uint,
    pub no_of_wizards: ::std::os::raw::c_uint,
    pub run: ::std::os::raw::c_uint,
    pub startingpet_mid: ::std::os::raw::c_uint,
    pub current_fruit: ::std::os::raw::c_int,
    pub mysteryforce: ::std::os::raw::c_int,
    pub rndencode: ::std::os::raw::c_int,
    pub warnlevel: ::std::os::raw::c_int,
    pub next_attrib_check: ::std::os::raw::c_long,
    pub seer_turn: ::std::os::raw::c_long,
    pub stethoscope_move: ::std::os::raw::c_long,
    pub stethoscope_movement: ::std::os::raw::c_short,
    pub travel: boolean,
    pub travel1: boolean,
    pub forcefight: boolean,
    pub nopick: boolean,
    pub made_amulet: boolean,
    pub mon_moving: boolean,
    pub move_: boolean,
    pub mv: boolean,
    pub bypasses: boolean,
    pub botl: boolean,
    pub botlx: boolean,
    pub door_opened: boolean,
    pub enhance_tip: boolean,
    pub digging: dig_info,
    pub victual: victual_info,
    pub engraving: engrave_info,
    pub tin: tin_info,
    pub spbook: book_info,
    pub takeoff: takeoff_info,
    pub warntype: warntype_info,
    pub polearm: polearm_info,
    pub objsplit: obj_split,
    pub tribute: tribute_info,
    pub novel: novel_tracking,
    pub achieveo: achievement_tracking,
}
#[test]
fn bindgen_test_layout_context_info() {
    assert_eq!(
        ::std::mem::size_of::<context_info>(),
        600usize,
        concat!("Size of: ", stringify!(context_info))
    );
    assert_eq!(
        ::std::mem::align_of::<context_info>(),
        8usize,
        concat!("Alignment of ", stringify!(context_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).ident as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(ident)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).no_of_wizards as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(no_of_wizards)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).run as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(run)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).startingpet_mid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(startingpet_mid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).current_fruit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(current_fruit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).mysteryforce as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(mysteryforce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).rndencode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(rndencode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).warnlevel as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(warnlevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).next_attrib_check as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(next_attrib_check)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).seer_turn as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(seer_turn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).stethoscope_move as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(stethoscope_move)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<context_info>())).stethoscope_movement as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(stethoscope_movement)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).travel as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(travel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).travel1 as *const _ as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(travel1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).forcefight as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(forcefight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).nopick as *const _ as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(nopick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).made_amulet as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(made_amulet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).mon_moving as *const _ as usize },
        51usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(mon_moving)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).move_ as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(move_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).mv as *const _ as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(mv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).bypasses as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(bypasses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).botl as *const _ as usize },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(botl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).botlx as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(botlx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).door_opened as *const _ as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(door_opened)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).enhance_tip as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(enhance_tip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).digging as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(digging)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).victual as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(victual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).engraving as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(engraving)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).tin as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(tin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).spbook as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(spbook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).takeoff as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(takeoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).warntype as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(warntype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).polearm as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(polearm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).objsplit as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(objsplit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).tribute as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(tribute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).novel as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(novel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<context_info>())).achieveo as *const _ as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(context_info),
            "::",
            stringify!(achieveo)
        )
    );
}
pub const levl_typ_types_STONE: levl_typ_types = 0;
pub const levl_typ_types_VWALL: levl_typ_types = 1;
pub const levl_typ_types_HWALL: levl_typ_types = 2;
pub const levl_typ_types_TLCORNER: levl_typ_types = 3;
pub const levl_typ_types_TRCORNER: levl_typ_types = 4;
pub const levl_typ_types_BLCORNER: levl_typ_types = 5;
pub const levl_typ_types_BRCORNER: levl_typ_types = 6;
pub const levl_typ_types_CROSSWALL: levl_typ_types = 7;
pub const levl_typ_types_TUWALL: levl_typ_types = 8;
pub const levl_typ_types_TDWALL: levl_typ_types = 9;
pub const levl_typ_types_TLWALL: levl_typ_types = 10;
pub const levl_typ_types_TRWALL: levl_typ_types = 11;
pub const levl_typ_types_DBWALL: levl_typ_types = 12;
pub const levl_typ_types_TREE: levl_typ_types = 13;
pub const levl_typ_types_SDOOR: levl_typ_types = 14;
pub const levl_typ_types_SCORR: levl_typ_types = 15;
pub const levl_typ_types_POOL: levl_typ_types = 16;
pub const levl_typ_types_MOAT: levl_typ_types = 17;
pub const levl_typ_types_WATER: levl_typ_types = 18;
pub const levl_typ_types_DRAWBRIDGE_UP: levl_typ_types = 19;
pub const levl_typ_types_LAVAPOOL: levl_typ_types = 20;
pub const levl_typ_types_IRONBARS: levl_typ_types = 21;
pub const levl_typ_types_DOOR: levl_typ_types = 22;
pub const levl_typ_types_CORR: levl_typ_types = 23;
pub const levl_typ_types_ROOM: levl_typ_types = 24;
pub const levl_typ_types_STAIRS: levl_typ_types = 25;
pub const levl_typ_types_LADDER: levl_typ_types = 26;
pub const levl_typ_types_FOUNTAIN: levl_typ_types = 27;
pub const levl_typ_types_THRONE: levl_typ_types = 28;
pub const levl_typ_types_SINK: levl_typ_types = 29;
pub const levl_typ_types_GRAVE: levl_typ_types = 30;
pub const levl_typ_types_ALTAR: levl_typ_types = 31;
pub const levl_typ_types_ICE: levl_typ_types = 32;
pub const levl_typ_types_DRAWBRIDGE_DOWN: levl_typ_types = 33;
pub const levl_typ_types_AIR: levl_typ_types = 34;
pub const levl_typ_types_CLOUD: levl_typ_types = 35;
pub const levl_typ_types_MAX_TYPE: levl_typ_types = 36;
pub const levl_typ_types_MATCH_WALL: levl_typ_types = 37;
pub const levl_typ_types_INVALID_TYPE: levl_typ_types = 127;
pub type levl_typ_types = ::std::os::raw::c_int;
pub const screen_symbols_S_stone: screen_symbols = 0;
pub const screen_symbols_S_vwall: screen_symbols = 1;
pub const screen_symbols_S_hwall: screen_symbols = 2;
pub const screen_symbols_S_tlcorn: screen_symbols = 3;
pub const screen_symbols_S_trcorn: screen_symbols = 4;
pub const screen_symbols_S_blcorn: screen_symbols = 5;
pub const screen_symbols_S_brcorn: screen_symbols = 6;
pub const screen_symbols_S_crwall: screen_symbols = 7;
pub const screen_symbols_S_tuwall: screen_symbols = 8;
pub const screen_symbols_S_tdwall: screen_symbols = 9;
pub const screen_symbols_S_tlwall: screen_symbols = 10;
pub const screen_symbols_S_trwall: screen_symbols = 11;
pub const screen_symbols_S_ndoor: screen_symbols = 12;
pub const screen_symbols_S_vodoor: screen_symbols = 13;
pub const screen_symbols_S_hodoor: screen_symbols = 14;
pub const screen_symbols_S_vcdoor: screen_symbols = 15;
pub const screen_symbols_S_hcdoor: screen_symbols = 16;
pub const screen_symbols_S_bars: screen_symbols = 17;
pub const screen_symbols_S_tree: screen_symbols = 18;
pub const screen_symbols_S_room: screen_symbols = 19;
pub const screen_symbols_S_darkroom: screen_symbols = 20;
pub const screen_symbols_S_corr: screen_symbols = 21;
pub const screen_symbols_S_litcorr: screen_symbols = 22;
pub const screen_symbols_S_upstair: screen_symbols = 23;
pub const screen_symbols_S_dnstair: screen_symbols = 24;
pub const screen_symbols_S_upladder: screen_symbols = 25;
pub const screen_symbols_S_dnladder: screen_symbols = 26;
pub const screen_symbols_S_altar: screen_symbols = 27;
pub const screen_symbols_S_grave: screen_symbols = 28;
pub const screen_symbols_S_throne: screen_symbols = 29;
pub const screen_symbols_S_sink: screen_symbols = 30;
pub const screen_symbols_S_fountain: screen_symbols = 31;
pub const screen_symbols_S_pool: screen_symbols = 32;
pub const screen_symbols_S_ice: screen_symbols = 33;
pub const screen_symbols_S_lava: screen_symbols = 34;
pub const screen_symbols_S_vodbridge: screen_symbols = 35;
pub const screen_symbols_S_hodbridge: screen_symbols = 36;
pub const screen_symbols_S_vcdbridge: screen_symbols = 37;
pub const screen_symbols_S_hcdbridge: screen_symbols = 38;
pub const screen_symbols_S_air: screen_symbols = 39;
pub const screen_symbols_S_cloud: screen_symbols = 40;
pub const screen_symbols_S_water: screen_symbols = 41;
pub const screen_symbols_S_arrow_trap: screen_symbols = 42;
pub const screen_symbols_S_dart_trap: screen_symbols = 43;
pub const screen_symbols_S_falling_rock_trap: screen_symbols = 44;
pub const screen_symbols_S_squeaky_board: screen_symbols = 45;
pub const screen_symbols_S_bear_trap: screen_symbols = 46;
pub const screen_symbols_S_land_mine: screen_symbols = 47;
pub const screen_symbols_S_rolling_boulder_trap: screen_symbols = 48;
pub const screen_symbols_S_sleeping_gas_trap: screen_symbols = 49;
pub const screen_symbols_S_rust_trap: screen_symbols = 50;
pub const screen_symbols_S_fire_trap: screen_symbols = 51;
pub const screen_symbols_S_pit: screen_symbols = 52;
pub const screen_symbols_S_spiked_pit: screen_symbols = 53;
pub const screen_symbols_S_hole: screen_symbols = 54;
pub const screen_symbols_S_trap_door: screen_symbols = 55;
pub const screen_symbols_S_teleportation_trap: screen_symbols = 56;
pub const screen_symbols_S_level_teleporter: screen_symbols = 57;
pub const screen_symbols_S_magic_portal: screen_symbols = 58;
pub const screen_symbols_S_web: screen_symbols = 59;
pub const screen_symbols_S_statue_trap: screen_symbols = 60;
pub const screen_symbols_S_magic_trap: screen_symbols = 61;
pub const screen_symbols_S_anti_magic_trap: screen_symbols = 62;
pub const screen_symbols_S_polymorph_trap: screen_symbols = 63;
pub const screen_symbols_S_vibrating_square: screen_symbols = 64;
pub const screen_symbols_S_vbeam: screen_symbols = 65;
pub const screen_symbols_S_hbeam: screen_symbols = 66;
pub const screen_symbols_S_lslant: screen_symbols = 67;
pub const screen_symbols_S_rslant: screen_symbols = 68;
pub const screen_symbols_S_digbeam: screen_symbols = 69;
pub const screen_symbols_S_flashbeam: screen_symbols = 70;
pub const screen_symbols_S_boomleft: screen_symbols = 71;
pub const screen_symbols_S_boomright: screen_symbols = 72;
pub const screen_symbols_S_ss1: screen_symbols = 73;
pub const screen_symbols_S_ss2: screen_symbols = 74;
pub const screen_symbols_S_ss3: screen_symbols = 75;
pub const screen_symbols_S_ss4: screen_symbols = 76;
pub const screen_symbols_S_poisoncloud: screen_symbols = 77;
pub const screen_symbols_S_goodpos: screen_symbols = 78;
pub const screen_symbols_S_sw_tl: screen_symbols = 79;
pub const screen_symbols_S_sw_tc: screen_symbols = 80;
pub const screen_symbols_S_sw_tr: screen_symbols = 81;
pub const screen_symbols_S_sw_ml: screen_symbols = 82;
pub const screen_symbols_S_sw_mr: screen_symbols = 83;
pub const screen_symbols_S_sw_bl: screen_symbols = 84;
pub const screen_symbols_S_sw_bc: screen_symbols = 85;
pub const screen_symbols_S_sw_br: screen_symbols = 86;
pub const screen_symbols_S_explode1: screen_symbols = 87;
pub const screen_symbols_S_explode2: screen_symbols = 88;
pub const screen_symbols_S_explode3: screen_symbols = 89;
pub const screen_symbols_S_explode4: screen_symbols = 90;
pub const screen_symbols_S_explode5: screen_symbols = 91;
pub const screen_symbols_S_explode6: screen_symbols = 92;
pub const screen_symbols_S_explode7: screen_symbols = 93;
pub const screen_symbols_S_explode8: screen_symbols = 94;
pub const screen_symbols_S_explode9: screen_symbols = 95;
pub const screen_symbols_MAXPCHARS: screen_symbols = 96;
pub type screen_symbols = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symdef {
    pub sym: uchar,
    pub explanation: *const ::std::os::raw::c_char,
    pub color: uchar,
}
#[test]
fn bindgen_test_layout_symdef() {
    assert_eq!(
        ::std::mem::size_of::<symdef>(),
        24usize,
        concat!("Size of: ", stringify!(symdef))
    );
    assert_eq!(
        ::std::mem::align_of::<symdef>(),
        8usize,
        concat!("Alignment of ", stringify!(symdef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<symdef>())).sym as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(symdef),
            "::",
            stringify!(sym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<symdef>())).explanation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(symdef),
            "::",
            stringify!(explanation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<symdef>())).color as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(symdef),
            "::",
            stringify!(color)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symparse {
    pub range: ::std::os::raw::c_uint,
    pub idx: ::std::os::raw::c_int,
    pub name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_symparse() {
    assert_eq!(
        ::std::mem::size_of::<symparse>(),
        16usize,
        concat!("Size of: ", stringify!(symparse))
    );
    assert_eq!(
        ::std::mem::align_of::<symparse>(),
        8usize,
        concat!("Alignment of ", stringify!(symparse))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<symparse>())).range as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(symparse),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<symparse>())).idx as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(symparse),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<symparse>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(symparse),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct symsetentry {
    pub next: *mut symsetentry,
    pub name: *mut ::std::os::raw::c_char,
    pub desc: *mut ::std::os::raw::c_char,
    pub idx: ::std::os::raw::c_int,
    pub handling: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_symsetentry() {
    assert_eq!(
        ::std::mem::size_of::<symsetentry>(),
        40usize,
        concat!("Size of: ", stringify!(symsetentry))
    );
    assert_eq!(
        ::std::mem::align_of::<symsetentry>(),
        8usize,
        concat!("Alignment of ", stringify!(symsetentry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<symsetentry>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(symsetentry),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<symsetentry>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(symsetentry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<symsetentry>())).desc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(symsetentry),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<symsetentry>())).idx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(symsetentry),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<symsetentry>())).handling as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(symsetentry),
            "::",
            stringify!(handling)
        )
    );
}
impl symsetentry {
    #[inline]
    pub fn nocolor(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nocolor(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn primary(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_primary(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rogue(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rogue(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn explicitly(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_explicitly(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        nocolor: ::std::os::raw::c_uint,
        primary: ::std::os::raw::c_uint,
        rogue: ::std::os::raw::c_uint,
        explicitly: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let nocolor: u32 = unsafe { ::std::mem::transmute(nocolor) };
            nocolor as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let primary: u32 = unsafe { ::std::mem::transmute(primary) };
            primary as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let rogue: u32 = unsafe { ::std::mem::transmute(rogue) };
            rogue as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let explicitly: u32 = unsafe { ::std::mem::transmute(explicitly) };
            explicitly as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static defsyms: [symdef; 96usize];
}
extern "C" {
    pub static def_warnsyms: [symdef; 6usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rm {
    pub glyph: ::std::os::raw::c_int,
    pub typ: schar,
    pub seenv: uchar,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u32,
}
#[test]
fn bindgen_test_layout_rm() {
    assert_eq!(
        ::std::mem::size_of::<rm>(),
        12usize,
        concat!("Size of: ", stringify!(rm))
    );
    assert_eq!(
        ::std::mem::align_of::<rm>(),
        4usize,
        concat!("Alignment of ", stringify!(rm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rm>())).glyph as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(rm), "::", stringify!(glyph))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rm>())).typ as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(rm), "::", stringify!(typ))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rm>())).seenv as *const _ as usize },
        5usize,
        concat!("Offset of field: ", stringify!(rm), "::", stringify!(seenv))
    );
}
impl rm {
    #[inline]
    pub fn flags(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_flags(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn horizontal(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_horizontal(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lit(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lit(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn waslit(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_waslit(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn roomno(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_roomno(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn edge(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_edge(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn candig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_candig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        flags: ::std::os::raw::c_uint,
        horizontal: ::std::os::raw::c_uint,
        lit: ::std::os::raw::c_uint,
        waslit: ::std::os::raw::c_uint,
        roomno: ::std::os::raw::c_uint,
        edge: ::std::os::raw::c_uint,
        candig: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let flags: u32 = unsafe { ::std::mem::transmute(flags) };
            flags as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let horizontal: u32 = unsafe { ::std::mem::transmute(horizontal) };
            horizontal as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let lit: u32 = unsafe { ::std::mem::transmute(lit) };
            lit as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let waslit: u32 = unsafe { ::std::mem::transmute(waslit) };
            waslit as u64
        });
        __bindgen_bitfield_unit.set(8usize, 6u8, {
            let roomno: u32 = unsafe { ::std::mem::transmute(roomno) };
            roomno as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let edge: u32 = unsafe { ::std::mem::transmute(edge) };
            edge as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let candig: u32 = unsafe { ::std::mem::transmute(candig) };
            candig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct damage {
    pub next: *mut damage,
    pub when: ::std::os::raw::c_long,
    pub cost: ::std::os::raw::c_long,
    pub place: coord,
    pub typ: schar,
}
#[test]
fn bindgen_test_layout_damage() {
    assert_eq!(
        ::std::mem::size_of::<damage>(),
        24usize,
        concat!("Size of: ", stringify!(damage))
    );
    assert_eq!(
        ::std::mem::align_of::<damage>(),
        8usize,
        concat!("Alignment of ", stringify!(damage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<damage>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(damage),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<damage>())).when as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(damage),
            "::",
            stringify!(when)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<damage>())).cost as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(damage),
            "::",
            stringify!(cost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<damage>())).place as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(damage),
            "::",
            stringify!(place)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<damage>())).typ as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(damage),
            "::",
            stringify!(typ)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cemetery {
    pub next: *mut cemetery,
    pub who: [::std::os::raw::c_char; 49usize],
    pub how: [::std::os::raw::c_char; 101usize],
    pub when: [::std::os::raw::c_char; 15usize],
    pub frpx: xchar,
    pub frpy: xchar,
    pub bonesknown: boolean,
}
#[test]
fn bindgen_test_layout_cemetery() {
    assert_eq!(
        ::std::mem::size_of::<cemetery>(),
        176usize,
        concat!("Size of: ", stringify!(cemetery))
    );
    assert_eq!(
        ::std::mem::align_of::<cemetery>(),
        8usize,
        concat!("Alignment of ", stringify!(cemetery))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cemetery>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cemetery),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cemetery>())).who as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cemetery),
            "::",
            stringify!(who)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cemetery>())).how as *const _ as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(cemetery),
            "::",
            stringify!(how)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cemetery>())).when as *const _ as usize },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(cemetery),
            "::",
            stringify!(when)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cemetery>())).frpx as *const _ as usize },
        173usize,
        concat!(
            "Offset of field: ",
            stringify!(cemetery),
            "::",
            stringify!(frpx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cemetery>())).frpy as *const _ as usize },
        174usize,
        concat!(
            "Offset of field: ",
            stringify!(cemetery),
            "::",
            stringify!(frpy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cemetery>())).bonesknown as *const _ as usize },
        175usize,
        concat!(
            "Offset of field: ",
            stringify!(cemetery),
            "::",
            stringify!(bonesknown)
        )
    );
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct levelflags {
    pub nfountains: uchar,
    pub nsinks: uchar,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_levelflags() {
    assert_eq!(
        ::std::mem::size_of::<levelflags>(),
        8usize,
        concat!("Size of: ", stringify!(levelflags))
    );
    assert_eq!(
        ::std::mem::align_of::<levelflags>(),
        4usize,
        concat!("Alignment of ", stringify!(levelflags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<levelflags>())).nfountains as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(levelflags),
            "::",
            stringify!(nfountains)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<levelflags>())).nsinks as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(levelflags),
            "::",
            stringify!(nsinks)
        )
    );
}
impl levelflags {
    #[inline]
    pub fn has_shop(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_shop(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_vault(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_vault(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_zoo(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_zoo(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_court(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_court(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_morgue(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_morgue(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_beehive(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_beehive(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_barracks(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_barracks(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_temple(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_temple(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_swamp(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_has_swamp(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn noteleport(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_noteleport(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hardfloor(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hardfloor(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nommap(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nommap(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn hero_memory(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_hero_memory(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn shortsighted(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_shortsighted(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn graveyard(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_graveyard(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn sokoban_rules(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sokoban_rules(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_maze_lev(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_maze_lev(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_cavernous_lev(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_cavernous_lev(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn arboreal(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_arboreal(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wizard_bones(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wizard_bones(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn corrmaze(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_corrmaze(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        has_shop: ::std::os::raw::c_uint,
        has_vault: ::std::os::raw::c_uint,
        has_zoo: ::std::os::raw::c_uint,
        has_court: ::std::os::raw::c_uint,
        has_morgue: ::std::os::raw::c_uint,
        has_beehive: ::std::os::raw::c_uint,
        has_barracks: ::std::os::raw::c_uint,
        has_temple: ::std::os::raw::c_uint,
        has_swamp: ::std::os::raw::c_uint,
        noteleport: ::std::os::raw::c_uint,
        hardfloor: ::std::os::raw::c_uint,
        nommap: ::std::os::raw::c_uint,
        hero_memory: ::std::os::raw::c_uint,
        shortsighted: ::std::os::raw::c_uint,
        graveyard: ::std::os::raw::c_uint,
        sokoban_rules: ::std::os::raw::c_uint,
        is_maze_lev: ::std::os::raw::c_uint,
        is_cavernous_lev: ::std::os::raw::c_uint,
        arboreal: ::std::os::raw::c_uint,
        wizard_bones: ::std::os::raw::c_uint,
        corrmaze: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let has_shop: u32 = unsafe { ::std::mem::transmute(has_shop) };
            has_shop as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let has_vault: u32 = unsafe { ::std::mem::transmute(has_vault) };
            has_vault as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let has_zoo: u32 = unsafe { ::std::mem::transmute(has_zoo) };
            has_zoo as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let has_court: u32 = unsafe { ::std::mem::transmute(has_court) };
            has_court as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let has_morgue: u32 = unsafe { ::std::mem::transmute(has_morgue) };
            has_morgue as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let has_beehive: u32 = unsafe { ::std::mem::transmute(has_beehive) };
            has_beehive as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let has_barracks: u32 = unsafe { ::std::mem::transmute(has_barracks) };
            has_barracks as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let has_temple: u32 = unsafe { ::std::mem::transmute(has_temple) };
            has_temple as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let has_swamp: u32 = unsafe { ::std::mem::transmute(has_swamp) };
            has_swamp as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let noteleport: u32 = unsafe { ::std::mem::transmute(noteleport) };
            noteleport as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let hardfloor: u32 = unsafe { ::std::mem::transmute(hardfloor) };
            hardfloor as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let nommap: u32 = unsafe { ::std::mem::transmute(nommap) };
            nommap as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let hero_memory: u32 = unsafe { ::std::mem::transmute(hero_memory) };
            hero_memory as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let shortsighted: u32 = unsafe { ::std::mem::transmute(shortsighted) };
            shortsighted as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let graveyard: u32 = unsafe { ::std::mem::transmute(graveyard) };
            graveyard as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let sokoban_rules: u32 = unsafe { ::std::mem::transmute(sokoban_rules) };
            sokoban_rules as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let is_maze_lev: u32 = unsafe { ::std::mem::transmute(is_maze_lev) };
            is_maze_lev as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let is_cavernous_lev: u32 = unsafe { ::std::mem::transmute(is_cavernous_lev) };
            is_cavernous_lev as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let arboreal: u32 = unsafe { ::std::mem::transmute(arboreal) };
            arboreal as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let wizard_bones: u32 = unsafe { ::std::mem::transmute(wizard_bones) };
            wizard_bones as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let corrmaze: u32 = unsafe { ::std::mem::transmute(corrmaze) };
            corrmaze as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct dlevel_t {
    pub locations: [[rm; 21usize]; 80usize],
    pub objects: [[*mut obj; 21usize]; 80usize],
    pub monsters: [[*mut monst; 21usize]; 80usize],
    pub objlist: *mut obj,
    pub buriedobjlist: *mut obj,
    pub monlist: *mut monst,
    pub damagelist: *mut damage,
    pub bonesinfo: *mut cemetery,
    pub flags: levelflags,
}
#[test]
fn bindgen_test_layout_dlevel_t() {
    assert_eq!(
        ::std::mem::size_of::<dlevel_t>(),
        47088usize,
        concat!("Size of: ", stringify!(dlevel_t))
    );
    assert_eq!(
        ::std::mem::align_of::<dlevel_t>(),
        8usize,
        concat!("Alignment of ", stringify!(dlevel_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlevel_t>())).locations as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dlevel_t),
            "::",
            stringify!(locations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlevel_t>())).objects as *const _ as usize },
        20160usize,
        concat!(
            "Offset of field: ",
            stringify!(dlevel_t),
            "::",
            stringify!(objects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlevel_t>())).monsters as *const _ as usize },
        33600usize,
        concat!(
            "Offset of field: ",
            stringify!(dlevel_t),
            "::",
            stringify!(monsters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlevel_t>())).objlist as *const _ as usize },
        47040usize,
        concat!(
            "Offset of field: ",
            stringify!(dlevel_t),
            "::",
            stringify!(objlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlevel_t>())).buriedobjlist as *const _ as usize },
        47048usize,
        concat!(
            "Offset of field: ",
            stringify!(dlevel_t),
            "::",
            stringify!(buriedobjlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlevel_t>())).monlist as *const _ as usize },
        47056usize,
        concat!(
            "Offset of field: ",
            stringify!(dlevel_t),
            "::",
            stringify!(monlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlevel_t>())).damagelist as *const _ as usize },
        47064usize,
        concat!(
            "Offset of field: ",
            stringify!(dlevel_t),
            "::",
            stringify!(damagelist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlevel_t>())).bonesinfo as *const _ as usize },
        47072usize,
        concat!(
            "Offset of field: ",
            stringify!(dlevel_t),
            "::",
            stringify!(bonesinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dlevel_t>())).flags as *const _ as usize },
        47080usize,
        concat!(
            "Offset of field: ",
            stringify!(dlevel_t),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn def_char_to_objclass(arg1: ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn def_char_to_monclass(arg1: ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn def_char_is_furniture(arg1: ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct condmap {
    pub id: *const ::std::os::raw::c_char,
    pub bitmask: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_condmap() {
    assert_eq!(
        ::std::mem::size_of::<condmap>(),
        16usize,
        concat!("Size of: ", stringify!(condmap))
    );
    assert_eq!(
        ::std::mem::align_of::<condmap>(),
        8usize,
        concat!("Alignment of ", stringify!(condmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condmap>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(condmap),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condmap>())).bitmask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(condmap),
            "::",
            stringify!(bitmask)
        )
    );
}
pub const statusfields_BL_CHARACTERISTICS: statusfields = -3;
pub const statusfields_BL_RESET: statusfields = -2;
pub const statusfields_BL_FLUSH: statusfields = -1;
pub const statusfields_BL_TITLE: statusfields = 0;
pub const statusfields_BL_STR: statusfields = 1;
pub const statusfields_BL_DX: statusfields = 2;
pub const statusfields_BL_CO: statusfields = 3;
pub const statusfields_BL_IN: statusfields = 4;
pub const statusfields_BL_WI: statusfields = 5;
pub const statusfields_BL_CH: statusfields = 6;
pub const statusfields_BL_ALIGN: statusfields = 7;
pub const statusfields_BL_SCORE: statusfields = 8;
pub const statusfields_BL_CAP: statusfields = 9;
pub const statusfields_BL_GOLD: statusfields = 10;
pub const statusfields_BL_ENE: statusfields = 11;
pub const statusfields_BL_ENEMAX: statusfields = 12;
pub const statusfields_BL_XP: statusfields = 13;
pub const statusfields_BL_AC: statusfields = 14;
pub const statusfields_BL_HD: statusfields = 15;
pub const statusfields_BL_TIME: statusfields = 16;
pub const statusfields_BL_HUNGER: statusfields = 17;
pub const statusfields_BL_HP: statusfields = 18;
pub const statusfields_BL_HPMAX: statusfields = 19;
pub const statusfields_BL_LEVELDESC: statusfields = 20;
pub const statusfields_BL_EXP: statusfields = 21;
pub const statusfields_BL_CONDITION: statusfields = 22;
pub const statusfields_MAXBLSTATS: statusfields = 23;
pub type statusfields = ::std::os::raw::c_int;
pub const relationships_NO_LTEQGT: relationships = -1;
pub const relationships_EQ_VALUE: relationships = 0;
pub const relationships_LT_VALUE: relationships = 1;
pub const relationships_LE_VALUE: relationships = 2;
pub const relationships_GE_VALUE: relationships = 3;
pub const relationships_GT_VALUE: relationships = 4;
pub const relationships_TXT_VALUE: relationships = 5;
pub type relationships = ::std::os::raw::c_int;
pub const blconditions_bl_bareh: blconditions = 0;
pub const blconditions_bl_blind: blconditions = 1;
pub const blconditions_bl_busy: blconditions = 2;
pub const blconditions_bl_conf: blconditions = 3;
pub const blconditions_bl_deaf: blconditions = 4;
pub const blconditions_bl_elf_iron: blconditions = 5;
pub const blconditions_bl_fly: blconditions = 6;
pub const blconditions_bl_foodpois: blconditions = 7;
pub const blconditions_bl_glowhands: blconditions = 8;
pub const blconditions_bl_grab: blconditions = 9;
pub const blconditions_bl_hallu: blconditions = 10;
pub const blconditions_bl_held: blconditions = 11;
pub const blconditions_bl_icy: blconditions = 12;
pub const blconditions_bl_inlava: blconditions = 13;
pub const blconditions_bl_lev: blconditions = 14;
pub const blconditions_bl_parlyz: blconditions = 15;
pub const blconditions_bl_ride: blconditions = 16;
pub const blconditions_bl_sleeping: blconditions = 17;
pub const blconditions_bl_slime: blconditions = 18;
pub const blconditions_bl_slippery: blconditions = 19;
pub const blconditions_bl_stone: blconditions = 20;
pub const blconditions_bl_strngl: blconditions = 21;
pub const blconditions_bl_stun: blconditions = 22;
pub const blconditions_bl_submerged: blconditions = 23;
pub const blconditions_bl_termill: blconditions = 24;
pub const blconditions_bl_tethered: blconditions = 25;
pub const blconditions_bl_trapped: blconditions = 26;
pub const blconditions_bl_unconsc: blconditions = 27;
pub const blconditions_bl_woundedl: blconditions = 28;
pub const blconditions_bl_holding: blconditions = 29;
pub const blconditions_CONDITION_COUNT: blconditions = 30;
pub type blconditions = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct conditions_t {
    pub ranking: ::std::os::raw::c_int,
    pub mask: ::std::os::raw::c_long,
    pub c: blconditions,
    pub text: [*const ::std::os::raw::c_char; 3usize],
}
#[test]
fn bindgen_test_layout_conditions_t() {
    assert_eq!(
        ::std::mem::size_of::<conditions_t>(),
        40usize,
        concat!("Size of: ", stringify!(conditions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<conditions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(conditions_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<conditions_t>())).ranking as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(conditions_t),
            "::",
            stringify!(ranking)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<conditions_t>())).mask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(conditions_t),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<conditions_t>())).c as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(conditions_t),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<conditions_t>())).text as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(conditions_t),
            "::",
            stringify!(text)
        )
    );
}
extern "C" {
    pub static conditions: [conditions_t; 30usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct condtests_t {
    pub c: blconditions,
    pub useroption: *const ::std::os::raw::c_char,
    pub opt: optchoice,
    pub enabled: boolean,
    pub choice: boolean,
    pub test: boolean,
}
#[test]
fn bindgen_test_layout_condtests_t() {
    assert_eq!(
        ::std::mem::size_of::<condtests_t>(),
        24usize,
        concat!("Size of: ", stringify!(condtests_t))
    );
    assert_eq!(
        ::std::mem::align_of::<condtests_t>(),
        8usize,
        concat!("Alignment of ", stringify!(condtests_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condtests_t>())).c as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(condtests_t),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condtests_t>())).useroption as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(condtests_t),
            "::",
            stringify!(useroption)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condtests_t>())).opt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(condtests_t),
            "::",
            stringify!(opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condtests_t>())).enabled as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(condtests_t),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condtests_t>())).choice as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(condtests_t),
            "::",
            stringify!(choice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<condtests_t>())).test as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(condtests_t),
            "::",
            stringify!(test)
        )
    );
}
extern "C" {
    pub static mut condtests: [condtests_t; 30usize];
}
extern "C" {
    pub static mut cond_idx: [::std::os::raw::c_int; 30usize];
}
pub const hlattribs_HL_UNDEF: hlattribs = 0;
pub const hlattribs_HL_NONE: hlattribs = 1;
pub const hlattribs_HL_BOLD: hlattribs = 2;
pub const hlattribs_HL_INVERSE: hlattribs = 4;
pub const hlattribs_HL_ULINE: hlattribs = 8;
pub const hlattribs_HL_BLINK: hlattribs = 16;
pub const hlattribs_HL_DIM: hlattribs = 32;
pub type hlattribs = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hilite_s {
    pub fld: statusfields,
    pub set: boolean,
    pub anytype: ::std::os::raw::c_uint,
    pub value: anything,
    pub behavior: ::std::os::raw::c_int,
    pub textmatch: [::std::os::raw::c_char; 80usize],
    pub rel: relationships,
    pub coloridx: ::std::os::raw::c_int,
    pub next: *mut hilite_s,
}
#[test]
fn bindgen_test_layout_hilite_s() {
    assert_eq!(
        ::std::mem::size_of::<hilite_s>(),
        128usize,
        concat!("Size of: ", stringify!(hilite_s))
    );
    assert_eq!(
        ::std::mem::align_of::<hilite_s>(),
        8usize,
        concat!("Alignment of ", stringify!(hilite_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hilite_s>())).fld as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hilite_s),
            "::",
            stringify!(fld)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hilite_s>())).set as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hilite_s),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hilite_s>())).anytype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hilite_s),
            "::",
            stringify!(anytype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hilite_s>())).value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hilite_s),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hilite_s>())).behavior as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hilite_s),
            "::",
            stringify!(behavior)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hilite_s>())).textmatch as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hilite_s),
            "::",
            stringify!(textmatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hilite_s>())).rel as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(hilite_s),
            "::",
            stringify!(rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hilite_s>())).coloridx as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(hilite_s),
            "::",
            stringify!(coloridx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hilite_s>())).next as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(hilite_s),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct istat_s {
    pub fldname: *const ::std::os::raw::c_char,
    pub fldfmt: *const ::std::os::raw::c_char,
    pub time: ::std::os::raw::c_long,
    pub chg: boolean,
    pub percent_matters: boolean,
    pub percent_value: ::std::os::raw::c_short,
    pub anytype: ::std::os::raw::c_uint,
    pub a: anything,
    pub val: *mut ::std::os::raw::c_char,
    pub valwidth: ::std::os::raw::c_int,
    pub idxmax: statusfields,
    pub fld: statusfields,
    pub hilite_rule: *mut hilite_s,
    pub thresholds: *mut hilite_s,
}
#[test]
fn bindgen_test_layout_istat_s() {
    assert_eq!(
        ::std::mem::size_of::<istat_s>(),
        80usize,
        concat!("Size of: ", stringify!(istat_s))
    );
    assert_eq!(
        ::std::mem::align_of::<istat_s>(),
        8usize,
        concat!("Alignment of ", stringify!(istat_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<istat_s>())).fldname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(istat_s),
            "::",
            stringify!(fldname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<istat_s>())).fldfmt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(istat_s),
            "::",
            stringify!(fldfmt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<istat_s>())).time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(istat_s),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<istat_s>())).chg as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(istat_s),
            "::",
            stringify!(chg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<istat_s>())).percent_matters as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(istat_s),
            "::",
            stringify!(percent_matters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<istat_s>())).percent_value as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(istat_s),
            "::",
            stringify!(percent_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<istat_s>())).anytype as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(istat_s),
            "::",
            stringify!(anytype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<istat_s>())).a as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(istat_s),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<istat_s>())).val as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(istat_s),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<istat_s>())).valwidth as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(istat_s),
            "::",
            stringify!(valwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<istat_s>())).idxmax as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(istat_s),
            "::",
            stringify!(idxmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<istat_s>())).fld as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(istat_s),
            "::",
            stringify!(fld)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<istat_s>())).hilite_rule as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(istat_s),
            "::",
            stringify!(hilite_rule)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<istat_s>())).thresholds as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(istat_s),
            "::",
            stringify!(thresholds)
        )
    );
}
extern "C" {
    pub static mut status_fieldnames: [*const ::std::os::raw::c_char; 0usize];
}
pub const GM_FLAGS: ::std::os::raw::c_int = 0;
pub const GM_TTYCHAR: ::std::os::raw::c_int = 1;
pub const GM_COLOR: ::std::os::raw::c_int = 2;
pub const NUM_GLYPHMOD: ::std::os::raw::c_int = 3;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nhrect {
    pub lx: xchar,
    pub ly: xchar,
    pub hx: xchar,
    pub hy: xchar,
}
#[test]
fn bindgen_test_layout_nhrect() {
    assert_eq!(
        ::std::mem::size_of::<nhrect>(),
        4usize,
        concat!("Size of: ", stringify!(nhrect))
    );
    assert_eq!(
        ::std::mem::align_of::<nhrect>(),
        1usize,
        concat!("Alignment of ", stringify!(nhrect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nhrect>())).lx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nhrect),
            "::",
            stringify!(lx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nhrect>())).ly as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(nhrect),
            "::",
            stringify!(ly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nhrect>())).hx as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nhrect),
            "::",
            stringify!(hx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nhrect>())).hy as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(nhrect),
            "::",
            stringify!(hy)
        )
    );
}
pub type NhRect = nhrect;
pub type callback_proc =
    ::std::option::Option<unsafe extern "C" fn(arg1: genericptr_t, arg2: genericptr_t) -> boolean>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NhRegion {
    pub bounding_box: NhRect,
    pub rects: *mut NhRect,
    pub nrects: ::std::os::raw::c_short,
    pub attach_2_u: boolean,
    pub attach_2_m: ::std::os::raw::c_uint,
    pub enter_msg: *const ::std::os::raw::c_char,
    pub leave_msg: *const ::std::os::raw::c_char,
    pub ttl: ::std::os::raw::c_long,
    pub expire_f: ::std::os::raw::c_short,
    pub can_enter_f: ::std::os::raw::c_short,
    pub enter_f: ::std::os::raw::c_short,
    pub can_leave_f: ::std::os::raw::c_short,
    pub leave_f: ::std::os::raw::c_short,
    pub inside_f: ::std::os::raw::c_short,
    pub player_flags: ::std::os::raw::c_uint,
    pub monsters: *mut ::std::os::raw::c_uint,
    pub n_monst: ::std::os::raw::c_short,
    pub max_monst: ::std::os::raw::c_short,
    pub visible: boolean,
    pub glyph: ::std::os::raw::c_int,
    pub arg: anything,
}
#[test]
fn bindgen_test_layout_NhRegion() {
    assert_eq!(
        ::std::mem::size_of::<NhRegion>(),
        96usize,
        concat!("Size of: ", stringify!(NhRegion))
    );
    assert_eq!(
        ::std::mem::align_of::<NhRegion>(),
        8usize,
        concat!("Alignment of ", stringify!(NhRegion))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).bounding_box as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(bounding_box)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).rects as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(rects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).nrects as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(nrects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).attach_2_u as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(attach_2_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).attach_2_m as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(attach_2_m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).enter_msg as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(enter_msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).leave_msg as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(leave_msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).ttl as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(ttl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).expire_f as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(expire_f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).can_enter_f as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(can_enter_f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).enter_f as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(enter_f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).can_leave_f as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(can_leave_f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).leave_f as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(leave_f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).inside_f as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(inside_f)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).player_flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(player_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).monsters as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(monsters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).n_monst as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(n_monst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).max_monst as *const _ as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(max_monst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).visible as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(visible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).glyph as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(glyph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NhRegion>())).arg as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(NhRegion),
            "::",
            stringify!(arg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dgn_topology {
    pub d_oracle_level: d_level,
    pub d_bigroom_level: d_level,
    pub d_rogue_level: d_level,
    pub d_medusa_level: d_level,
    pub d_stronghold_level: d_level,
    pub d_valley_level: d_level,
    pub d_wiz1_level: d_level,
    pub d_wiz2_level: d_level,
    pub d_wiz3_level: d_level,
    pub d_juiblex_level: d_level,
    pub d_orcus_level: d_level,
    pub d_baalzebub_level: d_level,
    pub d_asmodeus_level: d_level,
    pub d_portal_level: d_level,
    pub d_sanctum_level: d_level,
    pub d_earth_level: d_level,
    pub d_water_level: d_level,
    pub d_fire_level: d_level,
    pub d_air_level: d_level,
    pub d_astral_level: d_level,
    pub d_tower_dnum: xchar,
    pub d_sokoban_dnum: xchar,
    pub d_mines_dnum: xchar,
    pub d_quest_dnum: xchar,
    pub d_qstart_level: d_level,
    pub d_qlocate_level: d_level,
    pub d_nemesis_level: d_level,
    pub d_knox_level: d_level,
    pub d_mineend_level: d_level,
    pub d_sokoend_level: d_level,
}
#[test]
fn bindgen_test_layout_dgn_topology() {
    assert_eq!(
        ::std::mem::size_of::<dgn_topology>(),
        56usize,
        concat!("Size of: ", stringify!(dgn_topology))
    );
    assert_eq!(
        ::std::mem::align_of::<dgn_topology>(),
        1usize,
        concat!("Alignment of ", stringify!(dgn_topology))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_oracle_level as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_oracle_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_bigroom_level as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_bigroom_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_rogue_level as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_rogue_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_medusa_level as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_medusa_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_stronghold_level as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_stronghold_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_valley_level as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_valley_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_wiz1_level as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_wiz1_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_wiz2_level as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_wiz2_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_wiz3_level as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_wiz3_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_juiblex_level as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_juiblex_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_orcus_level as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_orcus_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_baalzebub_level as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_baalzebub_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_asmodeus_level as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_asmodeus_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_portal_level as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_portal_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_sanctum_level as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_sanctum_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_earth_level as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_earth_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_water_level as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_water_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_fire_level as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_fire_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_air_level as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_air_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_astral_level as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_astral_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_tower_dnum as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_tower_dnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_sokoban_dnum as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_sokoban_dnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_mines_dnum as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_mines_dnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_quest_dnum as *const _ as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_quest_dnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_qstart_level as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_qstart_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_qlocate_level as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_qlocate_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_nemesis_level as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_nemesis_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_knox_level as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_knox_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_mineend_level as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_mineend_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<dgn_topology>())).d_sokoend_level as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(dgn_topology),
            "::",
            stringify!(d_sokoend_level)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct q_score {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub leader_m_id: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_q_score() {
    assert_eq!(
        ::std::mem::size_of::<q_score>(),
        8usize,
        concat!("Size of: ", stringify!(q_score))
    );
    assert_eq!(
        ::std::mem::align_of::<q_score>(),
        4usize,
        concat!("Alignment of ", stringify!(q_score))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<q_score>())).leader_m_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(q_score),
            "::",
            stringify!(leader_m_id)
        )
    );
}
impl q_score {
    #[inline]
    pub fn first_start(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_first_start(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn met_leader(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_met_leader(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn not_ready(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_not_ready(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn pissed_off(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_pissed_off(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn got_quest(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_got_quest(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn first_locate(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_first_locate(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn met_intermed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_met_intermed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn got_final(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_got_final(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn made_goal(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_made_goal(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn met_nemesis(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_met_nemesis(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn killed_nemesis(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_killed_nemesis(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_battle(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_battle(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cheater(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cheater(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn touched_artifact(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_touched_artifact(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn offered_artifact(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_offered_artifact(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn got_thanks(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_got_thanks(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ldrgend(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_ldrgend(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn nemgend(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_nemgend(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn godgend(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_godgend(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn leader_is_dead(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_leader_is_dead(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        first_start: ::std::os::raw::c_uint,
        met_leader: ::std::os::raw::c_uint,
        not_ready: ::std::os::raw::c_uint,
        pissed_off: ::std::os::raw::c_uint,
        got_quest: ::std::os::raw::c_uint,
        first_locate: ::std::os::raw::c_uint,
        met_intermed: ::std::os::raw::c_uint,
        got_final: ::std::os::raw::c_uint,
        made_goal: ::std::os::raw::c_uint,
        met_nemesis: ::std::os::raw::c_uint,
        killed_nemesis: ::std::os::raw::c_uint,
        in_battle: ::std::os::raw::c_uint,
        cheater: ::std::os::raw::c_uint,
        touched_artifact: ::std::os::raw::c_uint,
        offered_artifact: ::std::os::raw::c_uint,
        got_thanks: ::std::os::raw::c_uint,
        ldrgend: ::std::os::raw::c_uint,
        nemgend: ::std::os::raw::c_uint,
        godgend: ::std::os::raw::c_uint,
        leader_is_dead: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let first_start: u32 = unsafe { ::std::mem::transmute(first_start) };
            first_start as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let met_leader: u32 = unsafe { ::std::mem::transmute(met_leader) };
            met_leader as u64
        });
        __bindgen_bitfield_unit.set(2usize, 3u8, {
            let not_ready: u32 = unsafe { ::std::mem::transmute(not_ready) };
            not_ready as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let pissed_off: u32 = unsafe { ::std::mem::transmute(pissed_off) };
            pissed_off as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let got_quest: u32 = unsafe { ::std::mem::transmute(got_quest) };
            got_quest as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let first_locate: u32 = unsafe { ::std::mem::transmute(first_locate) };
            first_locate as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let met_intermed: u32 = unsafe { ::std::mem::transmute(met_intermed) };
            met_intermed as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let got_final: u32 = unsafe { ::std::mem::transmute(got_final) };
            got_final as u64
        });
        __bindgen_bitfield_unit.set(10usize, 3u8, {
            let made_goal: u32 = unsafe { ::std::mem::transmute(made_goal) };
            made_goal as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let met_nemesis: u32 = unsafe { ::std::mem::transmute(met_nemesis) };
            met_nemesis as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let killed_nemesis: u32 = unsafe { ::std::mem::transmute(killed_nemesis) };
            killed_nemesis as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let in_battle: u32 = unsafe { ::std::mem::transmute(in_battle) };
            in_battle as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let cheater: u32 = unsafe { ::std::mem::transmute(cheater) };
            cheater as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let touched_artifact: u32 = unsafe { ::std::mem::transmute(touched_artifact) };
            touched_artifact as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let offered_artifact: u32 = unsafe { ::std::mem::transmute(offered_artifact) };
            offered_artifact as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let got_thanks: u32 = unsafe { ::std::mem::transmute(got_thanks) };
            got_thanks as u64
        });
        __bindgen_bitfield_unit.set(20usize, 2u8, {
            let ldrgend: u32 = unsafe { ::std::mem::transmute(ldrgend) };
            ldrgend as u64
        });
        __bindgen_bitfield_unit.set(22usize, 2u8, {
            let nemgend: u32 = unsafe { ::std::mem::transmute(nemgend) };
            nemgend as u64
        });
        __bindgen_bitfield_unit.set(24usize, 2u8, {
            let godgend: u32 = unsafe { ::std::mem::transmute(godgend) };
            godgend as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let leader_is_dead: u32 = unsafe { ::std::mem::transmute(leader_is_dead) };
            leader_is_dead as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut tune: [::std::os::raw::c_char; 6usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sinfo {
    pub gameover: ::std::os::raw::c_int,
    pub stopprint: ::std::os::raw::c_int,
    pub done_hup: ::std::os::raw::c_int,
    pub preserve_locks: ::std::os::raw::c_int,
    pub something_worth_saving: ::std::os::raw::c_int,
    pub panicking: ::std::os::raw::c_int,
    pub exiting: ::std::os::raw::c_int,
    pub saving: ::std::os::raw::c_int,
    pub restoring: ::std::os::raw::c_int,
    pub in_moveloop: ::std::os::raw::c_int,
    pub in_impossible: ::std::os::raw::c_int,
    pub in_self_recover: ::std::os::raw::c_int,
    pub in_parseoptions: ::std::os::raw::c_int,
    pub config_error_ready: ::std::os::raw::c_int,
    pub in_paniclog: ::std::os::raw::c_int,
    pub wizkit_wishing: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sinfo() {
    assert_eq!(
        ::std::mem::size_of::<sinfo>(),
        64usize,
        concat!("Size of: ", stringify!(sinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(sinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sinfo>())).gameover as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sinfo),
            "::",
            stringify!(gameover)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sinfo>())).stopprint as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sinfo),
            "::",
            stringify!(stopprint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sinfo>())).done_hup as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sinfo),
            "::",
            stringify!(done_hup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sinfo>())).preserve_locks as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sinfo),
            "::",
            stringify!(preserve_locks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sinfo>())).something_worth_saving as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sinfo),
            "::",
            stringify!(something_worth_saving)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sinfo>())).panicking as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sinfo),
            "::",
            stringify!(panicking)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sinfo>())).exiting as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sinfo),
            "::",
            stringify!(exiting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sinfo>())).saving as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(sinfo),
            "::",
            stringify!(saving)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sinfo>())).restoring as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sinfo),
            "::",
            stringify!(restoring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sinfo>())).in_moveloop as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(sinfo),
            "::",
            stringify!(in_moveloop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sinfo>())).in_impossible as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sinfo),
            "::",
            stringify!(in_impossible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sinfo>())).in_self_recover as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(sinfo),
            "::",
            stringify!(in_self_recover)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sinfo>())).in_parseoptions as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sinfo),
            "::",
            stringify!(in_parseoptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sinfo>())).config_error_ready as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(sinfo),
            "::",
            stringify!(config_error_ready)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sinfo>())).in_paniclog as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sinfo),
            "::",
            stringify!(in_paniclog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sinfo>())).wizkit_wishing as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(sinfo),
            "::",
            stringify!(wizkit_wishing)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fieldlevel_content {
    pub deflt: boolean,
    pub binary: boolean,
    pub json: boolean,
}
#[test]
fn bindgen_test_layout_fieldlevel_content() {
    assert_eq!(
        ::std::mem::size_of::<fieldlevel_content>(),
        3usize,
        concat!("Size of: ", stringify!(fieldlevel_content))
    );
    assert_eq!(
        ::std::mem::align_of::<fieldlevel_content>(),
        1usize,
        concat!("Alignment of ", stringify!(fieldlevel_content))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldlevel_content>())).deflt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldlevel_content),
            "::",
            stringify!(deflt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldlevel_content>())).binary as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldlevel_content),
            "::",
            stringify!(binary)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fieldlevel_content>())).json as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fieldlevel_content),
            "::",
            stringify!(json)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NHFILE {
    pub fd: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
    pub ftype: ::std::os::raw::c_int,
    pub fnidx: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_long,
    pub structlevel: boolean,
    pub fieldlevel: boolean,
    pub addinfo: boolean,
    pub eof: boolean,
    pub bendian: boolean,
    pub fpdef: *mut FILE,
    pub fpdefmap: *mut FILE,
    pub fplog: *mut FILE,
    pub fpdebug: *mut FILE,
    pub style: fieldlevel_content,
}
#[test]
fn bindgen_test_layout_NHFILE() {
    assert_eq!(
        ::std::mem::size_of::<NHFILE>(),
        72usize,
        concat!("Size of: ", stringify!(NHFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<NHFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(NHFILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NHFILE>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NHFILE),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NHFILE>())).mode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NHFILE),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NHFILE>())).ftype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NHFILE),
            "::",
            stringify!(ftype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NHFILE>())).fnidx as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(NHFILE),
            "::",
            stringify!(fnidx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NHFILE>())).count as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NHFILE),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NHFILE>())).structlevel as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(NHFILE),
            "::",
            stringify!(structlevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NHFILE>())).fieldlevel as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(NHFILE),
            "::",
            stringify!(fieldlevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NHFILE>())).addinfo as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(NHFILE),
            "::",
            stringify!(addinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NHFILE>())).eof as *const _ as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(NHFILE),
            "::",
            stringify!(eof)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NHFILE>())).bendian as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NHFILE),
            "::",
            stringify!(bendian)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NHFILE>())).fpdef as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NHFILE),
            "::",
            stringify!(fpdef)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NHFILE>())).fpdefmap as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(NHFILE),
            "::",
            stringify!(fpdefmap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NHFILE>())).fplog as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(NHFILE),
            "::",
            stringify!(fplog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NHFILE>())).fpdebug as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(NHFILE),
            "::",
            stringify!(fpdebug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NHFILE>())).style as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(NHFILE),
            "::",
            stringify!(style)
        )
    );
}
extern "C" {
    pub static mut quitchars: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut vowels: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut ynchars: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut ynqchars: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut ynaqchars: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut ynNaqchars: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut yn_number: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut disclosure_options: [::std::os::raw::c_char; 0usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct kinfo {
    pub next: *mut kinfo,
    pub id: ::std::os::raw::c_int,
    pub format: ::std::os::raw::c_int,
    pub name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_kinfo() {
    assert_eq!(
        ::std::mem::size_of::<kinfo>(),
        272usize,
        concat!("Size of: ", stringify!(kinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<kinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(kinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kinfo>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(kinfo),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kinfo>())).id as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(kinfo), "::", stringify!(id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kinfo>())).format as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(kinfo),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<kinfo>())).name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(kinfo),
            "::",
            stringify!(name)
        )
    );
}
extern "C" {
    pub static mut xdir: [schar; 0usize];
}
extern "C" {
    pub static mut ydir: [schar; 0usize];
}
extern "C" {
    pub static mut zdir: [schar; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multishot {
    pub n: ::std::os::raw::c_int,
    pub i: ::std::os::raw::c_int,
    pub o: ::std::os::raw::c_short,
    pub s: boolean,
}
#[test]
fn bindgen_test_layout_multishot() {
    assert_eq!(
        ::std::mem::size_of::<multishot>(),
        12usize,
        concat!("Size of: ", stringify!(multishot))
    );
    assert_eq!(
        ::std::mem::align_of::<multishot>(),
        4usize,
        concat!("Alignment of ", stringify!(multishot))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multishot>())).n as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multishot),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multishot>())).i as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(multishot),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multishot>())).o as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multishot),
            "::",
            stringify!(o)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multishot>())).s as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(multishot),
            "::",
            stringify!(s)
        )
    );
}
extern "C" {
    pub static mut has_strong_rngseed: boolean;
}
extern "C" {
    pub static mut shield_static: [::std::os::raw::c_int; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spell {
    pub sp_id: ::std::os::raw::c_short,
    pub sp_lev: xchar,
    pub sp_know: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_spell() {
    assert_eq!(
        ::std::mem::size_of::<spell>(),
        8usize,
        concat!("Size of: ", stringify!(spell))
    );
    assert_eq!(
        ::std::mem::align_of::<spell>(),
        4usize,
        concat!("Alignment of ", stringify!(spell))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spell>())).sp_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(spell),
            "::",
            stringify!(sp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spell>())).sp_lev as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(spell),
            "::",
            stringify!(sp_lev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spell>())).sp_know as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(spell),
            "::",
            stringify!(sp_know)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct menucoloring {
    pub match_: *mut nhregex,
    pub origstr: *mut ::std::os::raw::c_char,
    pub color: ::std::os::raw::c_int,
    pub attr: ::std::os::raw::c_int,
    pub next: *mut menucoloring,
}
#[test]
fn bindgen_test_layout_menucoloring() {
    assert_eq!(
        ::std::mem::size_of::<menucoloring>(),
        32usize,
        concat!("Size of: ", stringify!(menucoloring))
    );
    assert_eq!(
        ::std::mem::align_of::<menucoloring>(),
        8usize,
        concat!("Alignment of ", stringify!(menucoloring))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<menucoloring>())).match_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(menucoloring),
            "::",
            stringify!(match_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<menucoloring>())).origstr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(menucoloring),
            "::",
            stringify!(origstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<menucoloring>())).color as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(menucoloring),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<menucoloring>())).attr as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(menucoloring),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<menucoloring>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(menucoloring),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    pub static mut zapcolors: [::std::os::raw::c_int; 0usize];
}
extern "C" {
    pub static def_oc_syms: [class_sym; 18usize];
}
extern "C" {
    pub static mut oc_syms: [uchar; 18usize];
}
extern "C" {
    pub static def_monsyms: [class_sym; 61usize];
}
extern "C" {
    pub static mut monsyms: [uchar; 61usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vptrs {
    pub v_nexthere: *mut obj,
    pub v_ocontainer: *mut obj,
    pub v_ocarry: *mut monst,
}
#[test]
fn bindgen_test_layout_vptrs() {
    assert_eq!(
        ::std::mem::size_of::<vptrs>(),
        8usize,
        concat!("Size of: ", stringify!(vptrs))
    );
    assert_eq!(
        ::std::mem::align_of::<vptrs>(),
        8usize,
        concat!("Alignment of ", stringify!(vptrs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vptrs>())).v_nexthere as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vptrs),
            "::",
            stringify!(v_nexthere)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vptrs>())).v_ocontainer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vptrs),
            "::",
            stringify!(v_ocontainer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vptrs>())).v_ocarry as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vptrs),
            "::",
            stringify!(v_ocarry)
        )
    );
}
#[doc = "    oextra -- collection of all object extensions"]
#[doc = "     (see the note at the bottom of this file before adding oextra fields)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct oextra {
    pub oname: *mut ::std::os::raw::c_char,
    pub omonst: *mut monst,
    pub omailcmd: *mut ::std::os::raw::c_char,
    pub omid: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_oextra() {
    assert_eq!(
        ::std::mem::size_of::<oextra>(),
        32usize,
        concat!("Size of: ", stringify!(oextra))
    );
    assert_eq!(
        ::std::mem::align_of::<oextra>(),
        8usize,
        concat!("Alignment of ", stringify!(oextra))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oextra>())).oname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(oextra),
            "::",
            stringify!(oname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oextra>())).omonst as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(oextra),
            "::",
            stringify!(omonst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oextra>())).omailcmd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(oextra),
            "::",
            stringify!(omailcmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<oextra>())).omid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(oextra),
            "::",
            stringify!(omid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct obj {
    pub nobj: *mut obj,
    pub v: vptrs,
    pub cobj: *mut obj,
    pub o_id: ::std::os::raw::c_uint,
    pub ox: xchar,
    pub oy: xchar,
    pub otyp: ::std::os::raw::c_short,
    pub owt: ::std::os::raw::c_uint,
    pub quan: ::std::os::raw::c_long,
    pub spe: schar,
    pub oclass: ::std::os::raw::c_char,
    pub invlet: ::std::os::raw::c_char,
    pub oartifact: ::std::os::raw::c_char,
    pub where_: xchar,
    pub timed: xchar,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub corpsenm: ::std::os::raw::c_int,
    pub usecount: ::std::os::raw::c_int,
    pub oeaten: ::std::os::raw::c_uint,
    pub age: ::std::os::raw::c_long,
    pub owornmask: ::std::os::raw::c_long,
    pub dbid: ::std::os::raw::c_long,
    pub lua_ref_cnt: ::std::os::raw::c_uint,
    pub omigr_from_dnum: xchar,
    pub omigr_from_dlevel: xchar,
    pub oextra: *mut oextra,
}
#[test]
fn bindgen_test_layout_obj() {
    assert_eq!(
        ::std::mem::size_of::<obj>(),
        96usize,
        concat!("Size of: ", stringify!(obj))
    );
    assert_eq!(
        ::std::mem::align_of::<obj>(),
        8usize,
        concat!("Alignment of ", stringify!(obj))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).nobj as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(obj), "::", stringify!(nobj))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).v as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(obj), "::", stringify!(v))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).cobj as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(obj), "::", stringify!(cobj))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).o_id as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(obj), "::", stringify!(o_id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).ox as *const _ as usize },
        28usize,
        concat!("Offset of field: ", stringify!(obj), "::", stringify!(ox))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).oy as *const _ as usize },
        29usize,
        concat!("Offset of field: ", stringify!(obj), "::", stringify!(oy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).otyp as *const _ as usize },
        30usize,
        concat!("Offset of field: ", stringify!(obj), "::", stringify!(otyp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).owt as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(obj), "::", stringify!(owt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).quan as *const _ as usize },
        36usize,
        concat!("Offset of field: ", stringify!(obj), "::", stringify!(quan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).spe as *const _ as usize },
        40usize,
        concat!("Offset of field: ", stringify!(obj), "::", stringify!(spe))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).oclass as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(obj),
            "::",
            stringify!(oclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).invlet as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(obj),
            "::",
            stringify!(invlet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).oartifact as *const _ as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(obj),
            "::",
            stringify!(oartifact)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).where_ as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(obj),
            "::",
            stringify!(where_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).timed as *const _ as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(obj),
            "::",
            stringify!(timed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).corpsenm as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(obj),
            "::",
            stringify!(corpsenm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).usecount as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(obj),
            "::",
            stringify!(usecount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).oeaten as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(obj),
            "::",
            stringify!(oeaten)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).age as *const _ as usize },
        64usize,
        concat!("Offset of field: ", stringify!(obj), "::", stringify!(age))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).owornmask as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(obj),
            "::",
            stringify!(owornmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).dbid as *const _ as usize },
        72usize,
        concat!("Offset of field: ", stringify!(obj), "::", stringify!(dbid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).lua_ref_cnt as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(obj),
            "::",
            stringify!(lua_ref_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).omigr_from_dnum as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(obj),
            "::",
            stringify!(omigr_from_dnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).omigr_from_dlevel as *const _ as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(obj),
            "::",
            stringify!(omigr_from_dlevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<obj>())).oextra as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(obj),
            "::",
            stringify!(oextra)
        )
    );
}
impl obj {
    #[inline]
    pub fn cursed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cursed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn blessed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_blessed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unpaid(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_unpaid(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn no_charge(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_no_charge(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn known(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_known(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dknown(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dknown(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bknown(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bknown(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rknown(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rknown(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn oeroded(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_oeroded(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn oeroded2(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_oeroded2(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn oerodeproof(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_oerodeproof(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn olocked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_olocked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn obroken(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_obroken(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn otrapped(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_otrapped(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn recharged(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_recharged(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn lamplit(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lamplit(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn globby(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_globby(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn greased(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_greased(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nomerge(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nomerge(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn was_thrown(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_was_thrown(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_use(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_use(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bypass(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bypass(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn cknown(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_cknown(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn lknown(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_lknown(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cursed: ::std::os::raw::c_uint,
        blessed: ::std::os::raw::c_uint,
        unpaid: ::std::os::raw::c_uint,
        no_charge: ::std::os::raw::c_uint,
        known: ::std::os::raw::c_uint,
        dknown: ::std::os::raw::c_uint,
        bknown: ::std::os::raw::c_uint,
        rknown: ::std::os::raw::c_uint,
        oeroded: ::std::os::raw::c_uint,
        oeroded2: ::std::os::raw::c_uint,
        oerodeproof: ::std::os::raw::c_uint,
        olocked: ::std::os::raw::c_uint,
        obroken: ::std::os::raw::c_uint,
        otrapped: ::std::os::raw::c_uint,
        recharged: ::std::os::raw::c_uint,
        lamplit: ::std::os::raw::c_uint,
        globby: ::std::os::raw::c_uint,
        greased: ::std::os::raw::c_uint,
        nomerge: ::std::os::raw::c_uint,
        was_thrown: ::std::os::raw::c_uint,
        in_use: ::std::os::raw::c_uint,
        bypass: ::std::os::raw::c_uint,
        cknown: ::std::os::raw::c_uint,
        lknown: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let cursed: u32 = unsafe { ::std::mem::transmute(cursed) };
            cursed as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let blessed: u32 = unsafe { ::std::mem::transmute(blessed) };
            blessed as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let unpaid: u32 = unsafe { ::std::mem::transmute(unpaid) };
            unpaid as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let no_charge: u32 = unsafe { ::std::mem::transmute(no_charge) };
            no_charge as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let known: u32 = unsafe { ::std::mem::transmute(known) };
            known as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let dknown: u32 = unsafe { ::std::mem::transmute(dknown) };
            dknown as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bknown: u32 = unsafe { ::std::mem::transmute(bknown) };
            bknown as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let rknown: u32 = unsafe { ::std::mem::transmute(rknown) };
            rknown as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let oeroded: u32 = unsafe { ::std::mem::transmute(oeroded) };
            oeroded as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let oeroded2: u32 = unsafe { ::std::mem::transmute(oeroded2) };
            oeroded2 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let oerodeproof: u32 = unsafe { ::std::mem::transmute(oerodeproof) };
            oerodeproof as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let olocked: u32 = unsafe { ::std::mem::transmute(olocked) };
            olocked as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let obroken: u32 = unsafe { ::std::mem::transmute(obroken) };
            obroken as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let otrapped: u32 = unsafe { ::std::mem::transmute(otrapped) };
            otrapped as u64
        });
        __bindgen_bitfield_unit.set(16usize, 3u8, {
            let recharged: u32 = unsafe { ::std::mem::transmute(recharged) };
            recharged as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let lamplit: u32 = unsafe { ::std::mem::transmute(lamplit) };
            lamplit as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let globby: u32 = unsafe { ::std::mem::transmute(globby) };
            globby as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let greased: u32 = unsafe { ::std::mem::transmute(greased) };
            greased as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let nomerge: u32 = unsafe { ::std::mem::transmute(nomerge) };
            nomerge as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let was_thrown: u32 = unsafe { ::std::mem::transmute(was_thrown) };
            was_thrown as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let in_use: u32 = unsafe { ::std::mem::transmute(in_use) };
            in_use as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let bypass: u32 = unsafe { ::std::mem::transmute(bypass) };
            bypass as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let cknown: u32 = unsafe { ::std::mem::transmute(cknown) };
            cknown as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let lknown: u32 = unsafe { ::std::mem::transmute(lknown) };
            lknown as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut uarm: *mut obj;
}
extern "C" {
    pub static mut uarmc: *mut obj;
}
extern "C" {
    pub static mut uarmh: *mut obj;
}
extern "C" {
    pub static mut uarms: *mut obj;
}
extern "C" {
    pub static mut uarmg: *mut obj;
}
extern "C" {
    pub static mut uarmf: *mut obj;
}
extern "C" {
    pub static mut uarmu: *mut obj;
}
extern "C" {
    pub static mut uskin: *mut obj;
}
extern "C" {
    pub static mut uamul: *mut obj;
}
extern "C" {
    pub static mut uleft: *mut obj;
}
extern "C" {
    pub static mut uright: *mut obj;
}
extern "C" {
    pub static mut ublindf: *mut obj;
}
extern "C" {
    pub static mut uwep: *mut obj;
}
extern "C" {
    pub static mut uswapwep: *mut obj;
}
extern "C" {
    pub static mut uquiver: *mut obj;
}
extern "C" {
    pub static mut uchain: *mut obj;
}
extern "C" {
    pub static mut uball: *mut obj;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct engr {
    pub nxt_engr: *mut engr,
    pub engr_txt: *mut ::std::os::raw::c_char,
    pub engr_x: xchar,
    pub engr_y: xchar,
    pub engr_lth: ::std::os::raw::c_uint,
    pub engr_time: ::std::os::raw::c_long,
    pub engr_type: xchar,
}
#[test]
fn bindgen_test_layout_engr() {
    assert_eq!(
        ::std::mem::size_of::<engr>(),
        32usize,
        concat!("Size of: ", stringify!(engr))
    );
    assert_eq!(
        ::std::mem::align_of::<engr>(),
        8usize,
        concat!("Alignment of ", stringify!(engr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<engr>())).nxt_engr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(engr),
            "::",
            stringify!(nxt_engr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<engr>())).engr_txt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(engr),
            "::",
            stringify!(engr_txt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<engr>())).engr_x as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(engr),
            "::",
            stringify!(engr_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<engr>())).engr_y as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(engr),
            "::",
            stringify!(engr_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<engr>())).engr_lth as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(engr),
            "::",
            stringify!(engr_lth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<engr>())).engr_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(engr),
            "::",
            stringify!(engr_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<engr>())).engr_type as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(engr),
            "::",
            stringify!(engr_type)
        )
    );
}
extern "C" {
    pub static mut head_engr: *mut engr;
}
pub const attrib_types_A_STR: attrib_types = 0;
pub const attrib_types_A_INT: attrib_types = 1;
pub const attrib_types_A_WIS: attrib_types = 2;
pub const attrib_types_A_DEX: attrib_types = 3;
pub const attrib_types_A_CON: attrib_types = 4;
pub const attrib_types_A_CHA: attrib_types = 5;
pub const attrib_types_A_MAX: attrib_types = 6;
pub type attrib_types = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct attribs {
    pub a: [schar; 6usize],
}
#[test]
fn bindgen_test_layout_attribs() {
    assert_eq!(
        ::std::mem::size_of::<attribs>(),
        6usize,
        concat!("Size of: ", stringify!(attribs))
    );
    assert_eq!(
        ::std::mem::align_of::<attribs>(),
        1usize,
        concat!("Alignment of ", stringify!(attribs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<attribs>())).a as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(attribs),
            "::",
            stringify!(a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fakecorridor {
    pub fx: xchar,
    pub fy: xchar,
    pub ftyp: xchar,
}
#[test]
fn bindgen_test_layout_fakecorridor() {
    assert_eq!(
        ::std::mem::size_of::<fakecorridor>(),
        3usize,
        concat!("Size of: ", stringify!(fakecorridor))
    );
    assert_eq!(
        ::std::mem::align_of::<fakecorridor>(),
        1usize,
        concat!("Alignment of ", stringify!(fakecorridor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fakecorridor>())).fx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fakecorridor),
            "::",
            stringify!(fx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fakecorridor>())).fy as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(fakecorridor),
            "::",
            stringify!(fy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fakecorridor>())).ftyp as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(fakecorridor),
            "::",
            stringify!(ftyp)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct egd {
    pub fcbeg: ::std::os::raw::c_int,
    pub fcend: ::std::os::raw::c_int,
    pub vroom: ::std::os::raw::c_int,
    pub gdx: xchar,
    pub gdy: xchar,
    pub ogx: xchar,
    pub ogy: xchar,
    pub gdlevel: d_level,
    pub warncnt: xchar,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 4usize],
    pub fakecorr: [fakecorridor; 101usize],
}
#[test]
fn bindgen_test_layout_egd() {
    assert_eq!(
        ::std::mem::size_of::<egd>(),
        328usize,
        concat!("Size of: ", stringify!(egd))
    );
    assert_eq!(
        ::std::mem::align_of::<egd>(),
        4usize,
        concat!("Alignment of ", stringify!(egd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<egd>())).fcbeg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(egd),
            "::",
            stringify!(fcbeg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<egd>())).fcend as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(egd),
            "::",
            stringify!(fcend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<egd>())).vroom as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(egd),
            "::",
            stringify!(vroom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<egd>())).gdx as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(egd), "::", stringify!(gdx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<egd>())).gdy as *const _ as usize },
        13usize,
        concat!("Offset of field: ", stringify!(egd), "::", stringify!(gdy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<egd>())).ogx as *const _ as usize },
        14usize,
        concat!("Offset of field: ", stringify!(egd), "::", stringify!(ogx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<egd>())).ogy as *const _ as usize },
        15usize,
        concat!("Offset of field: ", stringify!(egd), "::", stringify!(ogy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<egd>())).gdlevel as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(egd),
            "::",
            stringify!(gdlevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<egd>())).warncnt as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(egd),
            "::",
            stringify!(warncnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<egd>())).fakecorr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(egd),
            "::",
            stringify!(fakecorr)
        )
    );
}
impl egd {
    #[inline]
    pub fn gddone(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gddone(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn witness(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_witness(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn unused(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_unused(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        gddone: ::std::os::raw::c_uint,
        witness: ::std::os::raw::c_uint,
        unused: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let gddone: u32 = unsafe { ::std::mem::transmute(gddone) };
            gddone as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let witness: u32 = unsafe { ::std::mem::transmute(witness) };
            witness as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let unused: u32 = unsafe { ::std::mem::transmute(unused) };
            unused as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = "     formerly epri.h -- temple priest extension"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct epri {
    pub shralign: aligntyp,
    pub shroom: schar,
    pub shrpos: coord,
    pub shrlevel: d_level,
    pub intone_time: ::std::os::raw::c_long,
    pub enter_time: ::std::os::raw::c_long,
    pub hostile_time: ::std::os::raw::c_long,
    pub peaceful_time: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_epri() {
    assert_eq!(
        ::std::mem::size_of::<epri>(),
        24usize,
        concat!("Size of: ", stringify!(epri))
    );
    assert_eq!(
        ::std::mem::align_of::<epri>(),
        4usize,
        concat!("Alignment of ", stringify!(epri))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<epri>())).shralign as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(epri),
            "::",
            stringify!(shralign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<epri>())).shroom as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(epri),
            "::",
            stringify!(shroom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<epri>())).shrpos as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(epri),
            "::",
            stringify!(shrpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<epri>())).shrlevel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(epri),
            "::",
            stringify!(shrlevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<epri>())).intone_time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(epri),
            "::",
            stringify!(intone_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<epri>())).enter_time as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(epri),
            "::",
            stringify!(enter_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<epri>())).hostile_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(epri),
            "::",
            stringify!(hostile_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<epri>())).peaceful_time as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(epri),
            "::",
            stringify!(peaceful_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bill_x {
    pub bo_id: ::std::os::raw::c_uint,
    pub useup: boolean,
    pub price: ::std::os::raw::c_long,
    pub bquan: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_bill_x() {
    assert_eq!(
        ::std::mem::size_of::<bill_x>(),
        16usize,
        concat!("Size of: ", stringify!(bill_x))
    );
    assert_eq!(
        ::std::mem::align_of::<bill_x>(),
        4usize,
        concat!("Alignment of ", stringify!(bill_x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bill_x>())).bo_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bill_x),
            "::",
            stringify!(bo_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bill_x>())).useup as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bill_x),
            "::",
            stringify!(useup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bill_x>())).price as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bill_x),
            "::",
            stringify!(price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bill_x>())).bquan as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(bill_x),
            "::",
            stringify!(bquan)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct eshk {
    pub robbed: ::std::os::raw::c_long,
    pub credit: ::std::os::raw::c_long,
    pub debit: ::std::os::raw::c_long,
    pub loan: ::std::os::raw::c_long,
    pub shoptype: ::std::os::raw::c_int,
    pub shoproom: schar,
    pub unused: schar,
    pub following: boolean,
    pub surcharge: boolean,
    pub dismiss_kops: boolean,
    pub shk: coord,
    pub shd: coord,
    pub shoplevel: d_level,
    pub billct: ::std::os::raw::c_int,
    pub bill: [bill_x; 200usize],
    pub bill_p: *mut bill_x,
    pub visitct: ::std::os::raw::c_int,
    pub customer: [::std::os::raw::c_char; 32usize],
    pub shknam: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_eshk() {
    assert_eq!(
        ::std::mem::size_of::<eshk>(),
        3320usize,
        concat!("Size of: ", stringify!(eshk))
    );
    assert_eq!(
        ::std::mem::align_of::<eshk>(),
        8usize,
        concat!("Alignment of ", stringify!(eshk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).robbed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(eshk),
            "::",
            stringify!(robbed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).credit as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(eshk),
            "::",
            stringify!(credit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).debit as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(eshk),
            "::",
            stringify!(debit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).loan as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(eshk),
            "::",
            stringify!(loan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).shoptype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(eshk),
            "::",
            stringify!(shoptype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).shoproom as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(eshk),
            "::",
            stringify!(shoproom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).unused as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(eshk),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).following as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(eshk),
            "::",
            stringify!(following)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).surcharge as *const _ as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(eshk),
            "::",
            stringify!(surcharge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).dismiss_kops as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(eshk),
            "::",
            stringify!(dismiss_kops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).shk as *const _ as usize },
        25usize,
        concat!("Offset of field: ", stringify!(eshk), "::", stringify!(shk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).shd as *const _ as usize },
        27usize,
        concat!("Offset of field: ", stringify!(eshk), "::", stringify!(shd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).shoplevel as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(eshk),
            "::",
            stringify!(shoplevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).billct as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(eshk),
            "::",
            stringify!(billct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).bill as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(eshk),
            "::",
            stringify!(bill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).bill_p as *const _ as usize },
        3240usize,
        concat!(
            "Offset of field: ",
            stringify!(eshk),
            "::",
            stringify!(bill_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).visitct as *const _ as usize },
        3248usize,
        concat!(
            "Offset of field: ",
            stringify!(eshk),
            "::",
            stringify!(visitct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).customer as *const _ as usize },
        3252usize,
        concat!(
            "Offset of field: ",
            stringify!(eshk),
            "::",
            stringify!(customer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<eshk>())).shknam as *const _ as usize },
        3284usize,
        concat!(
            "Offset of field: ",
            stringify!(eshk),
            "::",
            stringify!(shknam)
        )
    );
}
#[doc = "     formerly emin.h -- minion extension"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct emin {
    pub min_align: aligntyp,
    pub renegade: boolean,
}
#[test]
fn bindgen_test_layout_emin() {
    assert_eq!(
        ::std::mem::size_of::<emin>(),
        2usize,
        concat!("Size of: ", stringify!(emin))
    );
    assert_eq!(
        ::std::mem::align_of::<emin>(),
        1usize,
        concat!("Alignment of ", stringify!(emin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emin>())).min_align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(emin),
            "::",
            stringify!(min_align)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<emin>())).renegade as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(emin),
            "::",
            stringify!(renegade)
        )
    );
}
pub const dogfood_types_DOGFOOD: dogfood_types = 0;
pub const dogfood_types_CADAVER: dogfood_types = 1;
pub const dogfood_types_ACCFOOD: dogfood_types = 2;
pub const dogfood_types_MANFOOD: dogfood_types = 3;
pub const dogfood_types_APPORT: dogfood_types = 4;
pub const dogfood_types_POISON: dogfood_types = 5;
pub const dogfood_types_UNDEF: dogfood_types = 6;
pub const dogfood_types_TABU: dogfood_types = 7;
#[doc = "     formerly edog.h -- pet extension"]
pub type dogfood_types = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct edog {
    pub droptime: ::std::os::raw::c_long,
    pub dropdist: ::std::os::raw::c_uint,
    pub apport: ::std::os::raw::c_int,
    pub whistletime: ::std::os::raw::c_long,
    pub hungrytime: ::std::os::raw::c_long,
    pub ogoal: coord,
    pub abuse: ::std::os::raw::c_int,
    pub revivals: ::std::os::raw::c_int,
    pub mhpmax_penalty: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_edog() {
    assert_eq!(
        ::std::mem::size_of::<edog>(),
        40usize,
        concat!("Size of: ", stringify!(edog))
    );
    assert_eq!(
        ::std::mem::align_of::<edog>(),
        4usize,
        concat!("Alignment of ", stringify!(edog))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<edog>())).droptime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(edog),
            "::",
            stringify!(droptime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<edog>())).dropdist as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(edog),
            "::",
            stringify!(dropdist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<edog>())).apport as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(edog),
            "::",
            stringify!(apport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<edog>())).whistletime as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(edog),
            "::",
            stringify!(whistletime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<edog>())).hungrytime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(edog),
            "::",
            stringify!(hungrytime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<edog>())).ogoal as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(edog),
            "::",
            stringify!(ogoal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<edog>())).abuse as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(edog),
            "::",
            stringify!(abuse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<edog>())).revivals as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(edog),
            "::",
            stringify!(revivals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<edog>())).mhpmax_penalty as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(edog),
            "::",
            stringify!(mhpmax_penalty)
        )
    );
}
impl edog {
    #[inline]
    pub fn killed_by_u(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_killed_by_u(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        killed_by_u: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let killed_by_u: u32 = unsafe { ::std::mem::transmute(killed_by_u) };
            killed_by_u as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = "     mextra.h -- collection of all monster extensions"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mextra {
    pub mgivenname: *mut ::std::os::raw::c_char,
    pub egd: *mut egd,
    pub epri: *mut epri,
    pub eshk: *mut eshk,
    pub emin: *mut emin,
    pub edog: *mut edog,
    pub mcorpsenm: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mextra() {
    assert_eq!(
        ::std::mem::size_of::<mextra>(),
        56usize,
        concat!("Size of: ", stringify!(mextra))
    );
    assert_eq!(
        ::std::mem::align_of::<mextra>(),
        8usize,
        concat!("Alignment of ", stringify!(mextra))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mextra>())).mgivenname as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mextra),
            "::",
            stringify!(mgivenname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mextra>())).egd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mextra),
            "::",
            stringify!(egd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mextra>())).epri as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mextra),
            "::",
            stringify!(epri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mextra>())).eshk as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mextra),
            "::",
            stringify!(eshk)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mextra>())).emin as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mextra),
            "::",
            stringify!(emin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mextra>())).edog as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mextra),
            "::",
            stringify!(edog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mextra>())).mcorpsenm as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mextra),
            "::",
            stringify!(mcorpsenm)
        )
    );
}
pub const wpn_chk_flags_NO_WEAPON_WANTED: wpn_chk_flags = 0;
pub const wpn_chk_flags_NEED_WEAPON: wpn_chk_flags = 1;
pub const wpn_chk_flags_NEED_RANGED_WEAPON: wpn_chk_flags = 2;
pub const wpn_chk_flags_NEED_HTH_WEAPON: wpn_chk_flags = 3;
pub const wpn_chk_flags_NEED_PICK_AXE: wpn_chk_flags = 4;
pub const wpn_chk_flags_NEED_AXE: wpn_chk_flags = 5;
pub const wpn_chk_flags_NEED_PICK_OR_AXE: wpn_chk_flags = 6;
pub type wpn_chk_flags = ::std::os::raw::c_int;
pub const m_ap_types_M_AP_NOTHING: m_ap_types = 0;
pub const m_ap_types_M_AP_FURNITURE: m_ap_types = 1;
pub const m_ap_types_M_AP_OBJECT: m_ap_types = 2;
pub const m_ap_types_M_AP_MONSTER: m_ap_types = 3;
pub type m_ap_types = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct monst {
    pub nmon: *mut monst,
    pub data: *mut permonst,
    pub m_id: ::std::os::raw::c_uint,
    pub mnum: ::std::os::raw::c_short,
    pub cham: ::std::os::raw::c_short,
    pub movement: ::std::os::raw::c_short,
    pub m_lev: uchar,
    pub malign: aligntyp,
    pub mx: xchar,
    pub my: xchar,
    pub mux: xchar,
    pub muy: xchar,
    pub mtrack: [coord; 4usize],
    pub mhp: ::std::os::raw::c_int,
    pub mhpmax: ::std::os::raw::c_int,
    pub mappearance: ::std::os::raw::c_uint,
    pub m_ap_type: uchar,
    pub mtame: schar,
    pub mextrinsics: ::std::os::raw::c_ushort,
    pub mspec_used: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 7usize]>,
    pub mstrategy: ::std::os::raw::c_ulong,
    pub mtrapseen: ::std::os::raw::c_long,
    pub mlstmv: ::std::os::raw::c_long,
    pub mstate: ::std::os::raw::c_long,
    pub migflags: ::std::os::raw::c_long,
    pub mspare1: ::std::os::raw::c_long,
    pub minvent: *mut obj,
    pub mw: *mut obj,
    pub misc_worn_check: ::std::os::raw::c_long,
    pub weapon_check: xchar,
    pub meating: ::std::os::raw::c_int,
    pub mextra: *mut mextra,
}
#[test]
fn bindgen_test_layout_monst() {
    assert_eq!(
        ::std::mem::size_of::<monst>(),
        136usize,
        concat!("Size of: ", stringify!(monst))
    );
    assert_eq!(
        ::std::mem::align_of::<monst>(),
        8usize,
        concat!("Alignment of ", stringify!(monst))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).nmon as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(nmon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).m_id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(m_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).mnum as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(mnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).cham as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(cham)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).movement as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(movement)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).m_lev as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(m_lev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).malign as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(malign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).mx as *const _ as usize },
        28usize,
        concat!("Offset of field: ", stringify!(monst), "::", stringify!(mx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).my as *const _ as usize },
        29usize,
        concat!("Offset of field: ", stringify!(monst), "::", stringify!(my))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).mux as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(mux)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).muy as *const _ as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(muy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).mtrack as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(mtrack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).mhp as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(mhp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).mhpmax as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(mhpmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).mappearance as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(mappearance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).m_ap_type as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(m_ap_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).mtame as *const _ as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(mtame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).mextrinsics as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(mextrinsics)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).mspec_used as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(mspec_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).mstrategy as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(mstrategy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).mtrapseen as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(mtrapseen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).mlstmv as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(mlstmv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).mstate as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(mstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).migflags as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(migflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).mspare1 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(mspare1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).minvent as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(minvent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).mw as *const _ as usize },
        104usize,
        concat!("Offset of field: ", stringify!(monst), "::", stringify!(mw))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).misc_worn_check as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(misc_worn_check)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).weapon_check as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(weapon_check)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).meating as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(meating)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<monst>())).mextra as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(monst),
            "::",
            stringify!(mextra)
        )
    );
}
impl monst {
    #[inline]
    pub fn female(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_female(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn minvis(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_minvis(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn invis_blkd(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_invis_blkd(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn perminvis(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_perminvis(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mcan(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mcan(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mburied(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mburied(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mundetected(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mundetected(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mcansee(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mcansee(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mspeed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_mspeed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn permspeed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_permspeed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn mrevived(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mrevived(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mcloned(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mcloned(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mavenge(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mavenge(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mflee(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mflee(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mfleetim(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_mfleetim(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn msleeping(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_msleeping(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mblinded(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_mblinded(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn mstun(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mstun(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mfrozen(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_mfrozen(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn mcanmove(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(39usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mcanmove(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(39usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mconf(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(40usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mconf(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(40usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mpeaceful(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(41usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mpeaceful(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(41usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mtrapped(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(42usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mtrapped(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(42usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mleashed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(43usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mleashed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(43usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isshk(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(44usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isshk(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(44usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isminion(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(45usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isminion(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(45usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn isgd(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(46usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isgd(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(46usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ispriest(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(47usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ispriest(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(47usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn iswiz(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(48usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_iswiz(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(48usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn wormno(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(49usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_wormno(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(49usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn mtemplit(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(54usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mtemplit(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(54usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        female: ::std::os::raw::c_uint,
        minvis: ::std::os::raw::c_uint,
        invis_blkd: ::std::os::raw::c_uint,
        perminvis: ::std::os::raw::c_uint,
        mcan: ::std::os::raw::c_uint,
        mburied: ::std::os::raw::c_uint,
        mundetected: ::std::os::raw::c_uint,
        mcansee: ::std::os::raw::c_uint,
        mspeed: ::std::os::raw::c_uint,
        permspeed: ::std::os::raw::c_uint,
        mrevived: ::std::os::raw::c_uint,
        mcloned: ::std::os::raw::c_uint,
        mavenge: ::std::os::raw::c_uint,
        mflee: ::std::os::raw::c_uint,
        mfleetim: ::std::os::raw::c_uint,
        msleeping: ::std::os::raw::c_uint,
        mblinded: ::std::os::raw::c_uint,
        mstun: ::std::os::raw::c_uint,
        mfrozen: ::std::os::raw::c_uint,
        mcanmove: ::std::os::raw::c_uint,
        mconf: ::std::os::raw::c_uint,
        mpeaceful: ::std::os::raw::c_uint,
        mtrapped: ::std::os::raw::c_uint,
        mleashed: ::std::os::raw::c_uint,
        isshk: ::std::os::raw::c_uint,
        isminion: ::std::os::raw::c_uint,
        isgd: ::std::os::raw::c_uint,
        ispriest: ::std::os::raw::c_uint,
        iswiz: ::std::os::raw::c_uint,
        wormno: ::std::os::raw::c_uint,
        mtemplit: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 7usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 7usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let female: u32 = unsafe { ::std::mem::transmute(female) };
            female as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let minvis: u32 = unsafe { ::std::mem::transmute(minvis) };
            minvis as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let invis_blkd: u32 = unsafe { ::std::mem::transmute(invis_blkd) };
            invis_blkd as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let perminvis: u32 = unsafe { ::std::mem::transmute(perminvis) };
            perminvis as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let mcan: u32 = unsafe { ::std::mem::transmute(mcan) };
            mcan as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let mburied: u32 = unsafe { ::std::mem::transmute(mburied) };
            mburied as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let mundetected: u32 = unsafe { ::std::mem::transmute(mundetected) };
            mundetected as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let mcansee: u32 = unsafe { ::std::mem::transmute(mcansee) };
            mcansee as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let mspeed: u32 = unsafe { ::std::mem::transmute(mspeed) };
            mspeed as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let permspeed: u32 = unsafe { ::std::mem::transmute(permspeed) };
            permspeed as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let mrevived: u32 = unsafe { ::std::mem::transmute(mrevived) };
            mrevived as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let mcloned: u32 = unsafe { ::std::mem::transmute(mcloned) };
            mcloned as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let mavenge: u32 = unsafe { ::std::mem::transmute(mavenge) };
            mavenge as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let mflee: u32 = unsafe { ::std::mem::transmute(mflee) };
            mflee as u64
        });
        __bindgen_bitfield_unit.set(16usize, 7u8, {
            let mfleetim: u32 = unsafe { ::std::mem::transmute(mfleetim) };
            mfleetim as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let msleeping: u32 = unsafe { ::std::mem::transmute(msleeping) };
            msleeping as u64
        });
        __bindgen_bitfield_unit.set(24usize, 7u8, {
            let mblinded: u32 = unsafe { ::std::mem::transmute(mblinded) };
            mblinded as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let mstun: u32 = unsafe { ::std::mem::transmute(mstun) };
            mstun as u64
        });
        __bindgen_bitfield_unit.set(32usize, 7u8, {
            let mfrozen: u32 = unsafe { ::std::mem::transmute(mfrozen) };
            mfrozen as u64
        });
        __bindgen_bitfield_unit.set(39usize, 1u8, {
            let mcanmove: u32 = unsafe { ::std::mem::transmute(mcanmove) };
            mcanmove as u64
        });
        __bindgen_bitfield_unit.set(40usize, 1u8, {
            let mconf: u32 = unsafe { ::std::mem::transmute(mconf) };
            mconf as u64
        });
        __bindgen_bitfield_unit.set(41usize, 1u8, {
            let mpeaceful: u32 = unsafe { ::std::mem::transmute(mpeaceful) };
            mpeaceful as u64
        });
        __bindgen_bitfield_unit.set(42usize, 1u8, {
            let mtrapped: u32 = unsafe { ::std::mem::transmute(mtrapped) };
            mtrapped as u64
        });
        __bindgen_bitfield_unit.set(43usize, 1u8, {
            let mleashed: u32 = unsafe { ::std::mem::transmute(mleashed) };
            mleashed as u64
        });
        __bindgen_bitfield_unit.set(44usize, 1u8, {
            let isshk: u32 = unsafe { ::std::mem::transmute(isshk) };
            isshk as u64
        });
        __bindgen_bitfield_unit.set(45usize, 1u8, {
            let isminion: u32 = unsafe { ::std::mem::transmute(isminion) };
            isminion as u64
        });
        __bindgen_bitfield_unit.set(46usize, 1u8, {
            let isgd: u32 = unsafe { ::std::mem::transmute(isgd) };
            isgd as u64
        });
        __bindgen_bitfield_unit.set(47usize, 1u8, {
            let ispriest: u32 = unsafe { ::std::mem::transmute(ispriest) };
            ispriest as u64
        });
        __bindgen_bitfield_unit.set(48usize, 1u8, {
            let iswiz: u32 = unsafe { ::std::mem::transmute(iswiz) };
            iswiz as u64
        });
        __bindgen_bitfield_unit.set(49usize, 5u8, {
            let wormno: u32 = unsafe { ::std::mem::transmute(wormno) };
            wormno as u64
        });
        __bindgen_bitfield_unit.set(54usize, 1u8, {
            let mtemplit: u32 = unsafe { ::std::mem::transmute(mtemplit) };
            mtemplit as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const p_skills_P_NONE: p_skills = 0;
pub const p_skills_P_DAGGER: p_skills = 1;
pub const p_skills_P_KNIFE: p_skills = 2;
pub const p_skills_P_AXE: p_skills = 3;
pub const p_skills_P_PICK_AXE: p_skills = 4;
pub const p_skills_P_SHORT_SWORD: p_skills = 5;
pub const p_skills_P_BROAD_SWORD: p_skills = 6;
pub const p_skills_P_LONG_SWORD: p_skills = 7;
pub const p_skills_P_TWO_HANDED_SWORD: p_skills = 8;
pub const p_skills_P_SCIMITAR: p_skills = 9;
pub const p_skills_P_SABER: p_skills = 10;
pub const p_skills_P_CLUB: p_skills = 11;
pub const p_skills_P_MACE: p_skills = 12;
pub const p_skills_P_MORNING_STAR: p_skills = 13;
pub const p_skills_P_FLAIL: p_skills = 14;
pub const p_skills_P_HAMMER: p_skills = 15;
pub const p_skills_P_QUARTERSTAFF: p_skills = 16;
pub const p_skills_P_POLEARMS: p_skills = 17;
pub const p_skills_P_SPEAR: p_skills = 18;
pub const p_skills_P_TRIDENT: p_skills = 19;
pub const p_skills_P_LANCE: p_skills = 20;
pub const p_skills_P_BOW: p_skills = 21;
pub const p_skills_P_SLING: p_skills = 22;
pub const p_skills_P_CROSSBOW: p_skills = 23;
pub const p_skills_P_DART: p_skills = 24;
pub const p_skills_P_SHURIKEN: p_skills = 25;
pub const p_skills_P_BOOMERANG: p_skills = 26;
pub const p_skills_P_WHIP: p_skills = 27;
pub const p_skills_P_UNICORN_HORN: p_skills = 28;
pub const p_skills_P_ATTACK_SPELL: p_skills = 29;
pub const p_skills_P_HEALING_SPELL: p_skills = 30;
pub const p_skills_P_DIVINATION_SPELL: p_skills = 31;
pub const p_skills_P_ENCHANTMENT_SPELL: p_skills = 32;
pub const p_skills_P_CLERIC_SPELL: p_skills = 33;
pub const p_skills_P_ESCAPE_SPELL: p_skills = 34;
pub const p_skills_P_MATTER_SPELL: p_skills = 35;
pub const p_skills_P_BARE_HANDED_COMBAT: p_skills = 36;
pub const p_skills_P_TWO_WEAPON_COMBAT: p_skills = 37;
pub const p_skills_P_RIDING: p_skills = 38;
pub const p_skills_P_NUM_SKILLS: p_skills = 39;
pub type p_skills = ::std::os::raw::c_int;
pub const skill_levels_P_ISRESTRICTED: skill_levels = 0;
pub const skill_levels_P_UNSKILLED: skill_levels = 1;
pub const skill_levels_P_BASIC: skill_levels = 2;
pub const skill_levels_P_SKILLED: skill_levels = 3;
pub const skill_levels_P_EXPERT: skill_levels = 4;
pub const skill_levels_P_MASTER: skill_levels = 5;
pub const skill_levels_P_GRAND_MASTER: skill_levels = 6;
pub type skill_levels = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct skills {
    pub skill: xchar,
    pub max_skill: xchar,
    pub advance: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_skills() {
    assert_eq!(
        ::std::mem::size_of::<skills>(),
        4usize,
        concat!("Size of: ", stringify!(skills))
    );
    assert_eq!(
        ::std::mem::align_of::<skills>(),
        2usize,
        concat!("Alignment of ", stringify!(skills))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<skills>())).skill as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(skills),
            "::",
            stringify!(skill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<skills>())).max_skill as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(skills),
            "::",
            stringify!(max_skill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<skills>())).advance as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(skills),
            "::",
            stringify!(advance)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct def_skill {
    pub skill: xchar,
    pub skmax: xchar,
}
#[test]
fn bindgen_test_layout_def_skill() {
    assert_eq!(
        ::std::mem::size_of::<def_skill>(),
        2usize,
        concat!("Size of: ", stringify!(def_skill))
    );
    assert_eq!(
        ::std::mem::align_of::<def_skill>(),
        1usize,
        concat!("Alignment of ", stringify!(def_skill))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<def_skill>())).skill as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(def_skill),
            "::",
            stringify!(skill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<def_skill>())).skmax as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(def_skill),
            "::",
            stringify!(skmax)
        )
    );
}
#[doc = " Substructures"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RoleName {
    pub m: *const ::std::os::raw::c_char,
    pub f: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_RoleName() {
    assert_eq!(
        ::std::mem::size_of::<RoleName>(),
        16usize,
        concat!("Size of: ", stringify!(RoleName))
    );
    assert_eq!(
        ::std::mem::align_of::<RoleName>(),
        8usize,
        concat!("Alignment of ", stringify!(RoleName))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoleName>())).m as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RoleName),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoleName>())).f as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RoleName),
            "::",
            stringify!(f)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RoleAdvance {
    pub infix: xchar,
    pub inrnd: xchar,
    pub lofix: xchar,
    pub lornd: xchar,
    pub hifix: xchar,
    pub hirnd: xchar,
}
#[test]
fn bindgen_test_layout_RoleAdvance() {
    assert_eq!(
        ::std::mem::size_of::<RoleAdvance>(),
        6usize,
        concat!("Size of: ", stringify!(RoleAdvance))
    );
    assert_eq!(
        ::std::mem::align_of::<RoleAdvance>(),
        1usize,
        concat!("Alignment of ", stringify!(RoleAdvance))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoleAdvance>())).infix as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RoleAdvance),
            "::",
            stringify!(infix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoleAdvance>())).inrnd as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(RoleAdvance),
            "::",
            stringify!(inrnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoleAdvance>())).lofix as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(RoleAdvance),
            "::",
            stringify!(lofix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoleAdvance>())).lornd as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(RoleAdvance),
            "::",
            stringify!(lornd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoleAdvance>())).hifix as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(RoleAdvance),
            "::",
            stringify!(hifix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<RoleAdvance>())).hirnd as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(RoleAdvance),
            "::",
            stringify!(hirnd)
        )
    );
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct u_have {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_u_have() {
    assert_eq!(
        ::std::mem::size_of::<u_have>(),
        4usize,
        concat!("Size of: ", stringify!(u_have))
    );
    assert_eq!(
        ::std::mem::align_of::<u_have>(),
        4usize,
        concat!("Alignment of ", stringify!(u_have))
    );
}
impl u_have {
    #[inline]
    pub fn amulet(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_amulet(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bell(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bell(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn book(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_book(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn menorah(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_menorah(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn questart(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_questart(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unused(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_unused(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        amulet: ::std::os::raw::c_uint,
        bell: ::std::os::raw::c_uint,
        book: ::std::os::raw::c_uint,
        menorah: ::std::os::raw::c_uint,
        questart: ::std::os::raw::c_uint,
        unused: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let amulet: u32 = unsafe { ::std::mem::transmute(amulet) };
            amulet as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bell: u32 = unsafe { ::std::mem::transmute(bell) };
            bell as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let book: u32 = unsafe { ::std::mem::transmute(book) };
            book as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let menorah: u32 = unsafe { ::std::mem::transmute(menorah) };
            menorah as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let questart: u32 = unsafe { ::std::mem::transmute(questart) };
            questart as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let unused: u32 = unsafe { ::std::mem::transmute(unused) };
            unused as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct u_event {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub __bindgen_padding_0: u16,
}
#[test]
fn bindgen_test_layout_u_event() {
    assert_eq!(
        ::std::mem::size_of::<u_event>(),
        4usize,
        concat!("Size of: ", stringify!(u_event))
    );
    assert_eq!(
        ::std::mem::align_of::<u_event>(),
        4usize,
        concat!("Alignment of ", stringify!(u_event))
    );
}
impl u_event {
    #[inline]
    pub fn minor_oracle(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_minor_oracle(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn major_oracle(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_major_oracle(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn read_tribute(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_read_tribute(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn qcalled(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_qcalled(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn qexpelled(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_qexpelled(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn qcompleted(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_qcompleted(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uheard_tune(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_uheard_tune(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn uopened_dbridge(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uopened_dbridge(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn invoked(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_invoked(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn gehennom_entered(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_gehennom_entered(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uhand_of_elbereth(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_uhand_of_elbereth(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn udemigod(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_udemigod(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uvibrated(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uvibrated(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ascended(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ascended(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        minor_oracle: ::std::os::raw::c_uint,
        major_oracle: ::std::os::raw::c_uint,
        read_tribute: ::std::os::raw::c_uint,
        qcalled: ::std::os::raw::c_uint,
        qexpelled: ::std::os::raw::c_uint,
        qcompleted: ::std::os::raw::c_uint,
        uheard_tune: ::std::os::raw::c_uint,
        uopened_dbridge: ::std::os::raw::c_uint,
        invoked: ::std::os::raw::c_uint,
        gehennom_entered: ::std::os::raw::c_uint,
        uhand_of_elbereth: ::std::os::raw::c_uint,
        udemigod: ::std::os::raw::c_uint,
        uvibrated: ::std::os::raw::c_uint,
        ascended: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let minor_oracle: u32 = unsafe { ::std::mem::transmute(minor_oracle) };
            minor_oracle as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let major_oracle: u32 = unsafe { ::std::mem::transmute(major_oracle) };
            major_oracle as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let read_tribute: u32 = unsafe { ::std::mem::transmute(read_tribute) };
            read_tribute as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let qcalled: u32 = unsafe { ::std::mem::transmute(qcalled) };
            qcalled as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let qexpelled: u32 = unsafe { ::std::mem::transmute(qexpelled) };
            qexpelled as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let qcompleted: u32 = unsafe { ::std::mem::transmute(qcompleted) };
            qcompleted as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let uheard_tune: u32 = unsafe { ::std::mem::transmute(uheard_tune) };
            uheard_tune as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let uopened_dbridge: u32 = unsafe { ::std::mem::transmute(uopened_dbridge) };
            uopened_dbridge as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let invoked: u32 = unsafe { ::std::mem::transmute(invoked) };
            invoked as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let gehennom_entered: u32 = unsafe { ::std::mem::transmute(gehennom_entered) };
            gehennom_entered as u64
        });
        __bindgen_bitfield_unit.set(11usize, 2u8, {
            let uhand_of_elbereth: u32 = unsafe { ::std::mem::transmute(uhand_of_elbereth) };
            uhand_of_elbereth as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let udemigod: u32 = unsafe { ::std::mem::transmute(udemigod) };
            udemigod as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let uvibrated: u32 = unsafe { ::std::mem::transmute(uvibrated) };
            uvibrated as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let ascended: u32 = unsafe { ::std::mem::transmute(ascended) };
            ascended as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const achivements_ACH_BELL: achivements = 1;
pub const achivements_ACH_HELL: achivements = 2;
pub const achivements_ACH_CNDL: achivements = 3;
pub const achivements_ACH_BOOK: achivements = 4;
pub const achivements_ACH_INVK: achivements = 5;
pub const achivements_ACH_AMUL: achivements = 6;
pub const achivements_ACH_ENDG: achivements = 7;
pub const achivements_ACH_ASTR: achivements = 8;
pub const achivements_ACH_UWIN: achivements = 9;
pub const achivements_ACH_MINE_PRIZE: achivements = 10;
pub const achivements_ACH_SOKO_PRIZE: achivements = 11;
pub const achivements_ACH_MEDU: achivements = 12;
pub const achivements_ACH_BLND: achivements = 13;
pub const achivements_ACH_NUDE: achivements = 14;
pub const achivements_ACH_MINE: achivements = 15;
pub const achivements_ACH_TOWN: achivements = 16;
pub const achivements_ACH_SHOP: achivements = 17;
pub const achivements_ACH_TMPL: achivements = 18;
pub const achivements_ACH_ORCL: achivements = 19;
pub const achivements_ACH_NOVL: achivements = 20;
pub const achivements_ACH_SOKO: achivements = 21;
pub const achivements_ACH_BGRM: achivements = 22;
pub const achivements_ACH_RNK1: achivements = 23;
pub const achivements_ACH_RNK2: achivements = 24;
pub const achivements_ACH_RNK3: achivements = 25;
pub const achivements_ACH_RNK4: achivements = 26;
pub const achivements_ACH_RNK5: achivements = 27;
pub const achivements_ACH_RNK6: achivements = 28;
pub const achivements_ACH_RNK7: achivements = 29;
pub const achivements_ACH_RNK8: achivements = 30;
pub const achivements_N_ACH: achivements = 32;
pub type achivements = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct u_realtime {
    pub realtime: ::std::os::raw::c_long,
    pub start_timing: time_t,
    pub finish_time: time_t,
}
#[test]
fn bindgen_test_layout_u_realtime() {
    assert_eq!(
        ::std::mem::size_of::<u_realtime>(),
        24usize,
        concat!("Size of: ", stringify!(u_realtime))
    );
    assert_eq!(
        ::std::mem::align_of::<u_realtime>(),
        8usize,
        concat!("Alignment of ", stringify!(u_realtime))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_realtime>())).realtime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_realtime),
            "::",
            stringify!(realtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_realtime>())).start_timing as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(u_realtime),
            "::",
            stringify!(start_timing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_realtime>())).finish_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(u_realtime),
            "::",
            stringify!(finish_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct u_conduct {
    pub unvegetarian: ::std::os::raw::c_long,
    pub unvegan: ::std::os::raw::c_long,
    pub food: ::std::os::raw::c_long,
    pub gnostic: ::std::os::raw::c_long,
    pub weaphit: ::std::os::raw::c_long,
    pub killer: ::std::os::raw::c_long,
    pub literate: ::std::os::raw::c_long,
    pub polypiles: ::std::os::raw::c_long,
    pub polyselfs: ::std::os::raw::c_long,
    pub wishes: ::std::os::raw::c_long,
    pub wisharti: ::std::os::raw::c_long,
    pub sokocheat: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_u_conduct() {
    assert_eq!(
        ::std::mem::size_of::<u_conduct>(),
        48usize,
        concat!("Size of: ", stringify!(u_conduct))
    );
    assert_eq!(
        ::std::mem::align_of::<u_conduct>(),
        4usize,
        concat!("Alignment of ", stringify!(u_conduct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_conduct>())).unvegetarian as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_conduct),
            "::",
            stringify!(unvegetarian)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_conduct>())).unvegan as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(u_conduct),
            "::",
            stringify!(unvegan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_conduct>())).food as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(u_conduct),
            "::",
            stringify!(food)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_conduct>())).gnostic as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(u_conduct),
            "::",
            stringify!(gnostic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_conduct>())).weaphit as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(u_conduct),
            "::",
            stringify!(weaphit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_conduct>())).killer as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(u_conduct),
            "::",
            stringify!(killer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_conduct>())).literate as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(u_conduct),
            "::",
            stringify!(literate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_conduct>())).polypiles as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(u_conduct),
            "::",
            stringify!(polypiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_conduct>())).polyselfs as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(u_conduct),
            "::",
            stringify!(polyselfs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_conduct>())).wishes as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(u_conduct),
            "::",
            stringify!(wishes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_conduct>())).wisharti as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(u_conduct),
            "::",
            stringify!(wisharti)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_conduct>())).sokocheat as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(u_conduct),
            "::",
            stringify!(sokocheat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct u_roleplay {
    pub blind: boolean,
    pub nudist: boolean,
    pub numbones: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_u_roleplay() {
    assert_eq!(
        ::std::mem::size_of::<u_roleplay>(),
        8usize,
        concat!("Size of: ", stringify!(u_roleplay))
    );
    assert_eq!(
        ::std::mem::align_of::<u_roleplay>(),
        4usize,
        concat!("Alignment of ", stringify!(u_roleplay))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_roleplay>())).blind as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(u_roleplay),
            "::",
            stringify!(blind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_roleplay>())).nudist as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(u_roleplay),
            "::",
            stringify!(nudist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<u_roleplay>())).numbones as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(u_roleplay),
            "::",
            stringify!(numbones)
        )
    );
}
#[doc = " Unified structure containing role information"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Role {
    #[doc = " Strings that name various things"]
    pub name: RoleName,
    pub rank: [RoleName; 9usize],
    pub lgod: *const ::std::os::raw::c_char,
    pub ngod: *const ::std::os::raw::c_char,
    pub cgod: *const ::std::os::raw::c_char,
    pub filecode: *const ::std::os::raw::c_char,
    pub homebase: *const ::std::os::raw::c_char,
    pub intermed: *const ::std::os::raw::c_char,
    #[doc = " Indices of important monsters and objects"]
    pub malenum: ::std::os::raw::c_short,
    #[doc = " Indices of important monsters and objects"]
    pub femalenum: ::std::os::raw::c_short,
    #[doc = " Indices of important monsters and objects"]
    pub petnum: ::std::os::raw::c_short,
    #[doc = " Indices of important monsters and objects"]
    pub ldrnum: ::std::os::raw::c_short,
    #[doc = " Indices of important monsters and objects"]
    pub guardnum: ::std::os::raw::c_short,
    #[doc = " Indices of important monsters and objects"]
    pub neminum: ::std::os::raw::c_short,
    #[doc = " Indices of important monsters and objects"]
    pub enemy1num: ::std::os::raw::c_short,
    #[doc = " Indices of important monsters and objects"]
    pub enemy2num: ::std::os::raw::c_short,
    pub enemy1sym: ::std::os::raw::c_char,
    pub enemy2sym: ::std::os::raw::c_char,
    pub questarti: ::std::os::raw::c_short,
    #[doc = " Bitmasks"]
    pub allow: ::std::os::raw::c_short,
    #[doc = " Attributes (from attrib.c and exper.c)"]
    pub attrbase: [xchar; 6usize],
    pub attrdist: [xchar; 6usize],
    pub hpadv: RoleAdvance,
    pub enadv: RoleAdvance,
    pub xlev: xchar,
    pub initrecord: xchar,
    #[doc = " Spell statistics (from spell.c)"]
    pub spelbase: ::std::os::raw::c_int,
    pub spelheal: ::std::os::raw::c_int,
    pub spelshld: ::std::os::raw::c_int,
    pub spelarmr: ::std::os::raw::c_int,
    pub spelstat: ::std::os::raw::c_int,
    pub spelspec: ::std::os::raw::c_int,
    pub spelsbon: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Role() {
    assert_eq!(
        ::std::mem::size_of::<Role>(),
        288usize,
        concat!("Size of: ", stringify!(Role))
    );
    assert_eq!(
        ::std::mem::align_of::<Role>(),
        8usize,
        concat!("Alignment of ", stringify!(Role))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).rank as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(rank)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).lgod as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(lgod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).ngod as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(ngod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).cgod as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(cgod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).filecode as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(filecode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).homebase as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(homebase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).intermed as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(intermed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).malenum as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(malenum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).femalenum as *const _ as usize },
        210usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(femalenum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).petnum as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(petnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).ldrnum as *const _ as usize },
        214usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(ldrnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).guardnum as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(guardnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).neminum as *const _ as usize },
        218usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(neminum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).enemy1num as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(enemy1num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).enemy2num as *const _ as usize },
        222usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(enemy2num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).enemy1sym as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(enemy1sym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).enemy2sym as *const _ as usize },
        225usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(enemy2sym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).questarti as *const _ as usize },
        226usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(questarti)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).allow as *const _ as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(allow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).attrbase as *const _ as usize },
        230usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(attrbase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).attrdist as *const _ as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(attrdist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).hpadv as *const _ as usize },
        242usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(hpadv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).enadv as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(enadv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).xlev as *const _ as usize },
        254usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(xlev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).initrecord as *const _ as usize },
        255usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(initrecord)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).spelbase as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(spelbase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).spelheal as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(spelheal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).spelshld as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(spelshld)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).spelarmr as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(spelarmr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).spelstat as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(spelstat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).spelspec as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(spelspec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Role>())).spelsbon as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(Role),
            "::",
            stringify!(spelsbon)
        )
    );
}
extern "C" {
    pub static mut roles: [Role; 0usize];
}
#[doc = " Unified structure specifying race information"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Race {
    #[doc = " Strings that name various things"]
    pub noun: *const ::std::os::raw::c_char,
    pub adj: *const ::std::os::raw::c_char,
    pub coll: *const ::std::os::raw::c_char,
    pub filecode: *const ::std::os::raw::c_char,
    pub individual: RoleName,
    #[doc = " Indices of important monsters and objects"]
    pub malenum: ::std::os::raw::c_short,
    #[doc = " Indices of important monsters and objects"]
    pub femalenum: ::std::os::raw::c_short,
    #[doc = " Indices of important monsters and objects"]
    pub mummynum: ::std::os::raw::c_short,
    #[doc = " Indices of important monsters and objects"]
    pub zombienum: ::std::os::raw::c_short,
    #[doc = " Bitmasks"]
    pub allow: ::std::os::raw::c_short,
    pub selfmask: ::std::os::raw::c_short,
    pub lovemask: ::std::os::raw::c_short,
    pub hatemask: ::std::os::raw::c_short,
    #[doc = " Attributes"]
    pub attrmin: [xchar; 6usize],
    pub attrmax: [xchar; 6usize],
    pub hpadv: RoleAdvance,
    pub enadv: RoleAdvance,
}
#[test]
fn bindgen_test_layout_Race() {
    assert_eq!(
        ::std::mem::size_of::<Race>(),
        88usize,
        concat!("Size of: ", stringify!(Race))
    );
    assert_eq!(
        ::std::mem::align_of::<Race>(),
        8usize,
        concat!("Alignment of ", stringify!(Race))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Race>())).noun as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Race),
            "::",
            stringify!(noun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Race>())).adj as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Race), "::", stringify!(adj))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Race>())).coll as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Race),
            "::",
            stringify!(coll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Race>())).filecode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Race),
            "::",
            stringify!(filecode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Race>())).individual as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Race),
            "::",
            stringify!(individual)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Race>())).malenum as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Race),
            "::",
            stringify!(malenum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Race>())).femalenum as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(Race),
            "::",
            stringify!(femalenum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Race>())).mummynum as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Race),
            "::",
            stringify!(mummynum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Race>())).zombienum as *const _ as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(Race),
            "::",
            stringify!(zombienum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Race>())).allow as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Race),
            "::",
            stringify!(allow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Race>())).selfmask as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(Race),
            "::",
            stringify!(selfmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Race>())).lovemask as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Race),
            "::",
            stringify!(lovemask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Race>())).hatemask as *const _ as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(Race),
            "::",
            stringify!(hatemask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Race>())).attrmin as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Race),
            "::",
            stringify!(attrmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Race>())).attrmax as *const _ as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(Race),
            "::",
            stringify!(attrmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Race>())).hpadv as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(Race),
            "::",
            stringify!(hpadv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Race>())).enadv as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(Race),
            "::",
            stringify!(enadv)
        )
    );
}
extern "C" {
    pub static mut races: [Race; 0usize];
}
#[doc = " Unified structure specifying gender information"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gender {
    pub adj: *const ::std::os::raw::c_char,
    pub he: *const ::std::os::raw::c_char,
    pub him: *const ::std::os::raw::c_char,
    pub his: *const ::std::os::raw::c_char,
    pub filecode: *const ::std::os::raw::c_char,
    pub allow: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_Gender() {
    assert_eq!(
        ::std::mem::size_of::<Gender>(),
        48usize,
        concat!("Size of: ", stringify!(Gender))
    );
    assert_eq!(
        ::std::mem::align_of::<Gender>(),
        8usize,
        concat!("Alignment of ", stringify!(Gender))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Gender>())).adj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Gender),
            "::",
            stringify!(adj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Gender>())).he as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Gender),
            "::",
            stringify!(he)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Gender>())).him as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Gender),
            "::",
            stringify!(him)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Gender>())).his as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Gender),
            "::",
            stringify!(his)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Gender>())).filecode as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Gender),
            "::",
            stringify!(filecode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Gender>())).allow as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Gender),
            "::",
            stringify!(allow)
        )
    );
}
extern "C" {
    pub static mut genders: [Gender; 0usize];
}
#[doc = " Unified structure specifying alignment information"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Align {
    pub noun: *const ::std::os::raw::c_char,
    pub adj: *const ::std::os::raw::c_char,
    pub filecode: *const ::std::os::raw::c_char,
    pub allow: ::std::os::raw::c_short,
    pub value: aligntyp,
}
#[test]
fn bindgen_test_layout_Align() {
    assert_eq!(
        ::std::mem::size_of::<Align>(),
        32usize,
        concat!("Size of: ", stringify!(Align))
    );
    assert_eq!(
        ::std::mem::align_of::<Align>(),
        8usize,
        concat!("Alignment of ", stringify!(Align))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Align>())).noun as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Align),
            "::",
            stringify!(noun)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Align>())).adj as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Align),
            "::",
            stringify!(adj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Align>())).filecode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Align),
            "::",
            stringify!(filecode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Align>())).allow as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Align),
            "::",
            stringify!(allow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Align>())).value as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(Align),
            "::",
            stringify!(value)
        )
    );
}
extern "C" {
    pub static mut aligns: [Align; 0usize];
}
pub const utraptypes_TT_BEARTRAP: utraptypes = 0;
pub const utraptypes_TT_PIT: utraptypes = 1;
pub const utraptypes_TT_WEB: utraptypes = 2;
pub const utraptypes_TT_LAVA: utraptypes = 3;
pub const utraptypes_TT_INFLOOR: utraptypes = 4;
pub const utraptypes_TT_BURIEDBALL: utraptypes = 5;
pub type utraptypes = ::std::os::raw::c_int;
pub const utotypes_UTOTYPE_NONE: utotypes = 0;
pub const utotypes_UTOTYPE_ATSTAIRS: utotypes = 1;
pub const utotypes_UTOTYPE_FALLING: utotypes = 2;
pub const utotypes_UTOTYPE_PORTAL: utotypes = 4;
pub const utotypes_UTOTYPE_RMPORTAL: utotypes = 16;
pub const utotypes_UTOTYPE_DEFERRED: utotypes = 32;
pub type utotypes = ::std::os::raw::c_int;
#[doc = " Information about the player"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct you {
    pub ux: xchar,
    pub uy: xchar,
    pub dx: schar,
    pub dy: schar,
    pub dz: schar,
    pub di: schar,
    pub tx: xchar,
    pub ty: xchar,
    pub ux0: xchar,
    pub uy0: xchar,
    pub uz: d_level,
    pub uz0: d_level,
    pub utolev: d_level,
    pub utotype: uchar,
    pub umoved: boolean,
    pub last_str_turn: ::std::os::raw::c_int,
    pub ulevel: ::std::os::raw::c_int,
    pub ulevelmax: ::std::os::raw::c_int,
    pub utrap: ::std::os::raw::c_uint,
    pub utraptype: ::std::os::raw::c_uint,
    pub urooms: [::std::os::raw::c_char; 5usize],
    pub urooms0: [::std::os::raw::c_char; 5usize],
    pub uentered: [::std::os::raw::c_char; 5usize],
    pub ushops: [::std::os::raw::c_char; 5usize],
    pub ushops0: [::std::os::raw::c_char; 5usize],
    pub ushops_entered: [::std::os::raw::c_char; 5usize],
    pub ushops_left: [::std::os::raw::c_char; 5usize],
    pub uhunger: ::std::os::raw::c_int,
    pub uhs: ::std::os::raw::c_uint,
    pub uprops: [prop; 68usize],
    pub umconf: ::std::os::raw::c_uint,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub nv_range: ::std::os::raw::c_int,
    pub xray_range: ::std::os::raw::c_int,
    pub bglyph: ::std::os::raw::c_int,
    pub cglyph: ::std::os::raw::c_int,
    pub bc_order: ::std::os::raw::c_int,
    pub bc_felt: ::std::os::raw::c_int,
    pub umonster: ::std::os::raw::c_int,
    pub umonnum: ::std::os::raw::c_int,
    pub mh: ::std::os::raw::c_int,
    pub mhmax: ::std::os::raw::c_int,
    pub mtimedone: ::std::os::raw::c_int,
    pub macurr: attribs,
    pub mamax: attribs,
    pub ulycn: ::std::os::raw::c_int,
    pub ucreamed: ::std::os::raw::c_uint,
    pub uswldtim: ::std::os::raw::c_uint,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub udg_cnt: ::std::os::raw::c_uint,
    pub uevent: u_event,
    pub uhave: u_have,
    pub uconduct: u_conduct,
    pub uroleplay: u_roleplay,
    pub acurr: attribs,
    pub aexe: attribs,
    pub abon: attribs,
    pub amax: attribs,
    pub atemp: attribs,
    pub atime: attribs,
    pub ualign: align,
    pub ualignbase: [aligntyp; 2usize],
    pub uluck: schar,
    pub moreluck: schar,
    pub uhitinc: schar,
    pub udaminc: schar,
    pub uac: schar,
    pub uspellprot: uchar,
    pub usptime: uchar,
    pub uspmtime: uchar,
    pub uhp: ::std::os::raw::c_int,
    pub uhpmax: ::std::os::raw::c_int,
    pub uen: ::std::os::raw::c_int,
    pub uenmax: ::std::os::raw::c_int,
    pub uhpinc: [xchar; 30usize],
    pub ueninc: [xchar; 30usize],
    pub ugangr: ::std::os::raw::c_int,
    pub ugifts: ::std::os::raw::c_int,
    pub ublessed: ::std::os::raw::c_int,
    pub ublesscnt: ::std::os::raw::c_int,
    pub umoney0: ::std::os::raw::c_long,
    pub uspare1: ::std::os::raw::c_long,
    pub uexp: ::std::os::raw::c_long,
    pub urexp: ::std::os::raw::c_long,
    pub ucleansed: ::std::os::raw::c_long,
    pub usleep: ::std::os::raw::c_long,
    pub uinvault: ::std::os::raw::c_int,
    pub ustuck: *mut monst,
    pub usteed: *mut monst,
    pub ugallop: ::std::os::raw::c_long,
    pub urideturns: ::std::os::raw::c_int,
    pub umortality: ::std::os::raw::c_int,
    pub ugrave_arise: ::std::os::raw::c_int,
    pub weapon_slots: ::std::os::raw::c_int,
    pub skills_advanced: ::std::os::raw::c_int,
    pub skill_record: [xchar; 60usize],
    pub weapon_skills: [skills; 39usize],
    pub twoweap: boolean,
    pub mcham: ::std::os::raw::c_short,
    pub uachieved: [schar; 32usize],
}
#[test]
fn bindgen_test_layout_you() {
    assert_eq!(
        ::std::mem::size_of::<you>(),
        1520usize,
        concat!("Size of: ", stringify!(you))
    );
    assert_eq!(
        ::std::mem::align_of::<you>(),
        8usize,
        concat!("Alignment of ", stringify!(you))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ux as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(ux))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uy as *const _ as usize },
        1usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(uy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).dx as *const _ as usize },
        2usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(dx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).dy as *const _ as usize },
        3usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(dy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).dz as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(dz))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).di as *const _ as usize },
        5usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(di))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).tx as *const _ as usize },
        6usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(tx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ty as *const _ as usize },
        7usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(ty))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ux0 as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(ux0))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uy0 as *const _ as usize },
        9usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(uy0))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uz as *const _ as usize },
        10usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(uz))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uz0 as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(uz0))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).utolev as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(utolev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).utotype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(utotype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).umoved as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(umoved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).last_str_turn as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(last_str_turn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ulevel as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ulevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ulevelmax as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ulevelmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).utrap as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(utrap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).utraptype as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(utraptype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).urooms as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(urooms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).urooms0 as *const _ as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(urooms0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uentered as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(uentered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ushops as *const _ as usize },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ushops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ushops0 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ushops0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ushops_entered as *const _ as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ushops_entered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ushops_left as *const _ as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ushops_left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uhunger as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(uhunger)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uhs as *const _ as usize },
        80usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(uhs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uprops as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(uprops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).umconf as *const _ as usize },
        900usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(umconf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).nv_range as *const _ as usize },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(nv_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).xray_range as *const _ as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(xray_range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).bglyph as *const _ as usize },
        916usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(bglyph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).cglyph as *const _ as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(cglyph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).bc_order as *const _ as usize },
        924usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(bc_order)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).bc_felt as *const _ as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(bc_felt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).umonster as *const _ as usize },
        932usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(umonster)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).umonnum as *const _ as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(umonnum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).mh as *const _ as usize },
        940usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(mh))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).mhmax as *const _ as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(mhmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).mtimedone as *const _ as usize },
        948usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(mtimedone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).macurr as *const _ as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(macurr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).mamax as *const _ as usize },
        958usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(mamax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ulycn as *const _ as usize },
        964usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ulycn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ucreamed as *const _ as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ucreamed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uswldtim as *const _ as usize },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(uswldtim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).udg_cnt as *const _ as usize },
        980usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(udg_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uevent as *const _ as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(uevent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uhave as *const _ as usize },
        988usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(uhave)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uconduct as *const _ as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(uconduct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uroleplay as *const _ as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(uroleplay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).acurr as *const _ as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(acurr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).aexe as *const _ as usize },
        1054usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(aexe))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).abon as *const _ as usize },
        1060usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(abon))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).amax as *const _ as usize },
        1066usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(amax))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).atemp as *const _ as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(atemp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).atime as *const _ as usize },
        1078usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(atime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ualign as *const _ as usize },
        1084usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ualign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ualignbase as *const _ as usize },
        1092usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ualignbase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uluck as *const _ as usize },
        1094usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(uluck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).moreluck as *const _ as usize },
        1095usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(moreluck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uhitinc as *const _ as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(uhitinc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).udaminc as *const _ as usize },
        1097usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(udaminc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uac as *const _ as usize },
        1098usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(uac))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uspellprot as *const _ as usize },
        1099usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(uspellprot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).usptime as *const _ as usize },
        1100usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(usptime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uspmtime as *const _ as usize },
        1101usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(uspmtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uhp as *const _ as usize },
        1104usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(uhp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uhpmax as *const _ as usize },
        1108usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(uhpmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uen as *const _ as usize },
        1112usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(uen))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uenmax as *const _ as usize },
        1116usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(uenmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uhpinc as *const _ as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(uhpinc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ueninc as *const _ as usize },
        1150usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ueninc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ugangr as *const _ as usize },
        1180usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ugangr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ugifts as *const _ as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ugifts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ublessed as *const _ as usize },
        1188usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ublessed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ublesscnt as *const _ as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ublesscnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).umoney0 as *const _ as usize },
        1196usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(umoney0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uspare1 as *const _ as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(uspare1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uexp as *const _ as usize },
        1204usize,
        concat!("Offset of field: ", stringify!(you), "::", stringify!(uexp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).urexp as *const _ as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(urexp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ucleansed as *const _ as usize },
        1212usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ucleansed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).usleep as *const _ as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(usleep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uinvault as *const _ as usize },
        1220usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(uinvault)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ustuck as *const _ as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ustuck)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).usteed as *const _ as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(usteed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ugallop as *const _ as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ugallop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).urideturns as *const _ as usize },
        1244usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(urideturns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).umortality as *const _ as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(umortality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).ugrave_arise as *const _ as usize },
        1252usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(ugrave_arise)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).weapon_slots as *const _ as usize },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(weapon_slots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).skills_advanced as *const _ as usize },
        1260usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(skills_advanced)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).skill_record as *const _ as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(skill_record)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).weapon_skills as *const _ as usize },
        1324usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(weapon_skills)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).twoweap as *const _ as usize },
        1480usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(twoweap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).mcham as *const _ as usize },
        1482usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(mcham)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<you>())).uachieved as *const _ as usize },
        1484usize,
        concat!(
            "Offset of field: ",
            stringify!(you),
            "::",
            stringify!(uachieved)
        )
    );
}
impl you {
    #[inline]
    pub fn usick_type(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_usick_type(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        usick_type: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let usick_type: u32 = unsafe { ::std::mem::transmute(usick_type) };
            usick_type as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn uswallow(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uswallow(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uinwater(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uinwater(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uundetected(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uundetected(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn mfemale(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mfemale(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uinvulnerable(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uinvulnerable(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uburied(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uburied(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn uedibility(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_uedibility(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        uswallow: ::std::os::raw::c_uint,
        uinwater: ::std::os::raw::c_uint,
        uundetected: ::std::os::raw::c_uint,
        mfemale: ::std::os::raw::c_uint,
        uinvulnerable: ::std::os::raw::c_uint,
        uburied: ::std::os::raw::c_uint,
        uedibility: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let uswallow: u32 = unsafe { ::std::mem::transmute(uswallow) };
            uswallow as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let uinwater: u32 = unsafe { ::std::mem::transmute(uinwater) };
            uinwater as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let uundetected: u32 = unsafe { ::std::mem::transmute(uundetected) };
            uundetected as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let mfemale: u32 = unsafe { ::std::mem::transmute(mfemale) };
            mfemale as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let uinvulnerable: u32 = unsafe { ::std::mem::transmute(uinvulnerable) };
            uinvulnerable as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let uburied: u32 = unsafe { ::std::mem::transmute(uburied) };
            uburied as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let uedibility: u32 = unsafe { ::std::mem::transmute(uedibility) };
            uedibility as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut u: you;
}
extern "C" {
    pub static mut ubirthday: time_t;
}
extern "C" {
    pub static mut urealtime: u_realtime;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mvitals {
    pub born: uchar,
    pub died: uchar,
    pub mvflags: uchar,
}
#[test]
fn bindgen_test_layout_mvitals() {
    assert_eq!(
        ::std::mem::size_of::<mvitals>(),
        3usize,
        concat!("Size of: ", stringify!(mvitals))
    );
    assert_eq!(
        ::std::mem::align_of::<mvitals>(),
        1usize,
        concat!("Alignment of ", stringify!(mvitals))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mvitals>())).born as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mvitals),
            "::",
            stringify!(born)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mvitals>())).died as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(mvitals),
            "::",
            stringify!(died)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mvitals>())).mvflags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(mvitals),
            "::",
            stringify!(mvflags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct c_color_names {
    pub c_black: *const ::std::os::raw::c_char,
    pub c_amber: *const ::std::os::raw::c_char,
    pub c_golden: *const ::std::os::raw::c_char,
    pub c_light_blue: *const ::std::os::raw::c_char,
    pub c_red: *const ::std::os::raw::c_char,
    pub c_green: *const ::std::os::raw::c_char,
    pub c_silver: *const ::std::os::raw::c_char,
    pub c_blue: *const ::std::os::raw::c_char,
    pub c_purple: *const ::std::os::raw::c_char,
    pub c_white: *const ::std::os::raw::c_char,
    pub c_orange: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_c_color_names() {
    assert_eq!(
        ::std::mem::size_of::<c_color_names>(),
        88usize,
        concat!("Size of: ", stringify!(c_color_names))
    );
    assert_eq!(
        ::std::mem::align_of::<c_color_names>(),
        8usize,
        concat!("Alignment of ", stringify!(c_color_names))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c_color_names>())).c_black as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(c_color_names),
            "::",
            stringify!(c_black)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c_color_names>())).c_amber as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(c_color_names),
            "::",
            stringify!(c_amber)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c_color_names>())).c_golden as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(c_color_names),
            "::",
            stringify!(c_golden)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c_color_names>())).c_light_blue as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(c_color_names),
            "::",
            stringify!(c_light_blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c_color_names>())).c_red as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(c_color_names),
            "::",
            stringify!(c_red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c_color_names>())).c_green as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(c_color_names),
            "::",
            stringify!(c_green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c_color_names>())).c_silver as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(c_color_names),
            "::",
            stringify!(c_silver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c_color_names>())).c_blue as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(c_color_names),
            "::",
            stringify!(c_blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c_color_names>())).c_purple as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(c_color_names),
            "::",
            stringify!(c_purple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c_color_names>())).c_white as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(c_color_names),
            "::",
            stringify!(c_white)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c_color_names>())).c_orange as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(c_color_names),
            "::",
            stringify!(c_orange)
        )
    );
}
extern "C" {
    pub static c_color_names: c_color_names;
}
extern "C" {
    pub static mut c_obj_colors: [*const ::std::os::raw::c_char; 0usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct c_common_strings {
    pub c_nothing_happens: *const ::std::os::raw::c_char,
    pub c_thats_enough_tries: *const ::std::os::raw::c_char,
    pub c_silly_thing_to: *const ::std::os::raw::c_char,
    pub c_shudder_for_moment: *const ::std::os::raw::c_char,
    pub c_something: *const ::std::os::raw::c_char,
    pub c_Something: *const ::std::os::raw::c_char,
    pub c_You_can_move_again: *const ::std::os::raw::c_char,
    pub c_Never_mind: *const ::std::os::raw::c_char,
    pub c_vision_clears: *const ::std::os::raw::c_char,
    pub c_the_your: [*const ::std::os::raw::c_char; 2usize],
    pub c_fakename: [*const ::std::os::raw::c_char; 2usize],
}
#[test]
fn bindgen_test_layout_c_common_strings() {
    assert_eq!(
        ::std::mem::size_of::<c_common_strings>(),
        104usize,
        concat!("Size of: ", stringify!(c_common_strings))
    );
    assert_eq!(
        ::std::mem::align_of::<c_common_strings>(),
        8usize,
        concat!("Alignment of ", stringify!(c_common_strings))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<c_common_strings>())).c_nothing_happens as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(c_common_strings),
            "::",
            stringify!(c_nothing_happens)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<c_common_strings>())).c_thats_enough_tries as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(c_common_strings),
            "::",
            stringify!(c_thats_enough_tries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<c_common_strings>())).c_silly_thing_to as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(c_common_strings),
            "::",
            stringify!(c_silly_thing_to)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<c_common_strings>())).c_shudder_for_moment as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(c_common_strings),
            "::",
            stringify!(c_shudder_for_moment)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c_common_strings>())).c_something as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(c_common_strings),
            "::",
            stringify!(c_something)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c_common_strings>())).c_Something as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(c_common_strings),
            "::",
            stringify!(c_Something)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<c_common_strings>())).c_You_can_move_again as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(c_common_strings),
            "::",
            stringify!(c_You_can_move_again)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c_common_strings>())).c_Never_mind as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(c_common_strings),
            "::",
            stringify!(c_Never_mind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<c_common_strings>())).c_vision_clears as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(c_common_strings),
            "::",
            stringify!(c_vision_clears)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c_common_strings>())).c_the_your as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(c_common_strings),
            "::",
            stringify!(c_the_your)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<c_common_strings>())).c_fakename as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(c_common_strings),
            "::",
            stringify!(c_fakename)
        )
    );
}
extern "C" {
    pub static c_common_strings: c_common_strings;
}
extern "C" {
    pub static mut materialnm: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut emptystr: [::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut WIN_MESSAGE: winid;
}
extern "C" {
    pub static mut WIN_STATUS: winid;
}
extern "C" {
    pub static mut WIN_MAP: winid;
}
extern "C" {
    pub static mut WIN_INVEN: winid;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tc_gbl_data {
    pub tc_AS: *mut ::std::os::raw::c_char,
    pub tc_AE: *mut ::std::os::raw::c_char,
    pub tc_LI: ::std::os::raw::c_int,
    pub tc_CO: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_tc_gbl_data() {
    assert_eq!(
        ::std::mem::size_of::<tc_gbl_data>(),
        24usize,
        concat!("Size of: ", stringify!(tc_gbl_data))
    );
    assert_eq!(
        ::std::mem::align_of::<tc_gbl_data>(),
        8usize,
        concat!("Alignment of ", stringify!(tc_gbl_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tc_gbl_data>())).tc_AS as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tc_gbl_data),
            "::",
            stringify!(tc_AS)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tc_gbl_data>())).tc_AE as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tc_gbl_data),
            "::",
            stringify!(tc_AE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tc_gbl_data>())).tc_LI as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tc_gbl_data),
            "::",
            stringify!(tc_LI)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tc_gbl_data>())).tc_CO as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tc_gbl_data),
            "::",
            stringify!(tc_CO)
        )
    );
}
extern "C" {
    pub static mut tc_gbl_data: tc_gbl_data;
}
extern "C" {
    pub static mut fqn_prefix_locked: [boolean; 10usize];
}
extern "C" {
    pub static mut fqn_prefix_names: [*const ::std::os::raw::c_char; 10usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct restore_info {
    pub name: *const ::std::os::raw::c_char,
    pub mread_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_restore_info() {
    assert_eq!(
        ::std::mem::size_of::<restore_info>(),
        16usize,
        concat!("Size of: ", stringify!(restore_info))
    );
    assert_eq!(
        ::std::mem::align_of::<restore_info>(),
        8usize,
        concat!("Alignment of ", stringify!(restore_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<restore_info>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(restore_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<restore_info>())).mread_flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(restore_info),
            "::",
            stringify!(mread_flags)
        )
    );
}
extern "C" {
    pub static mut restoreinfo: restore_info;
}
extern "C" {
    pub static mut sfcap: savefile_info;
}
extern "C" {
    pub static mut sfrestinfo: savefile_info;
}
extern "C" {
    pub static mut sfsaveinfo: savefile_info;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct selectionvar {
    pub wid: ::std::os::raw::c_int,
    pub hei: ::std::os::raw::c_int,
    pub map: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_selectionvar() {
    assert_eq!(
        ::std::mem::size_of::<selectionvar>(),
        16usize,
        concat!("Size of: ", stringify!(selectionvar))
    );
    assert_eq!(
        ::std::mem::align_of::<selectionvar>(),
        8usize,
        concat!("Alignment of ", stringify!(selectionvar))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<selectionvar>())).wid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(selectionvar),
            "::",
            stringify!(wid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<selectionvar>())).hei as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(selectionvar),
            "::",
            stringify!(hei)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<selectionvar>())).map as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(selectionvar),
            "::",
            stringify!(map)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct autopickup_exception {
    pub regex: *mut nhregex,
    pub pattern: *mut ::std::os::raw::c_char,
    pub grab: boolean,
    pub next: *mut autopickup_exception,
}
#[test]
fn bindgen_test_layout_autopickup_exception() {
    assert_eq!(
        ::std::mem::size_of::<autopickup_exception>(),
        32usize,
        concat!("Size of: ", stringify!(autopickup_exception))
    );
    assert_eq!(
        ::std::mem::align_of::<autopickup_exception>(),
        8usize,
        concat!("Alignment of ", stringify!(autopickup_exception))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<autopickup_exception>())).regex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(autopickup_exception),
            "::",
            stringify!(regex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<autopickup_exception>())).pattern as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(autopickup_exception),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<autopickup_exception>())).grab as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(autopickup_exception),
            "::",
            stringify!(grab)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<autopickup_exception>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(autopickup_exception),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct plinemsg_type {
    pub msgtype: xchar,
    pub regex: *mut nhregex,
    pub pattern: *mut ::std::os::raw::c_char,
    pub next: *mut plinemsg_type,
}
#[test]
fn bindgen_test_layout_plinemsg_type() {
    assert_eq!(
        ::std::mem::size_of::<plinemsg_type>(),
        32usize,
        concat!("Size of: ", stringify!(plinemsg_type))
    );
    assert_eq!(
        ::std::mem::align_of::<plinemsg_type>(),
        8usize,
        concat!("Alignment of ", stringify!(plinemsg_type))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<plinemsg_type>())).msgtype as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(plinemsg_type),
            "::",
            stringify!(msgtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<plinemsg_type>())).regex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(plinemsg_type),
            "::",
            stringify!(regex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<plinemsg_type>())).pattern as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(plinemsg_type),
            "::",
            stringify!(pattern)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<plinemsg_type>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(plinemsg_type),
            "::",
            stringify!(next)
        )
    );
}
pub const bcargs_override_restriction: bcargs = -1;
pub type bcargs = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct breadcrumbs {
    pub funcnm: *const ::std::os::raw::c_char,
    pub linenum: ::std::os::raw::c_int,
    pub in_effect: boolean,
}
#[test]
fn bindgen_test_layout_breadcrumbs() {
    assert_eq!(
        ::std::mem::size_of::<breadcrumbs>(),
        16usize,
        concat!("Size of: ", stringify!(breadcrumbs))
    );
    assert_eq!(
        ::std::mem::align_of::<breadcrumbs>(),
        8usize,
        concat!("Alignment of ", stringify!(breadcrumbs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<breadcrumbs>())).funcnm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(breadcrumbs),
            "::",
            stringify!(funcnm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<breadcrumbs>())).linenum as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(breadcrumbs),
            "::",
            stringify!(linenum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<breadcrumbs>())).in_effect as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(breadcrumbs),
            "::",
            stringify!(in_effect)
        )
    );
}
pub const earlyarg_ARG_DEBUG: earlyarg = 0;
pub const earlyarg_ARG_VERSION: earlyarg = 1;
pub const earlyarg_ARG_SHOWPATHS: earlyarg = 2;
pub const earlyarg_ARG_WINDOWS: earlyarg = 3;
pub type earlyarg = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct early_opt {
    pub e: earlyarg,
    pub name: *const ::std::os::raw::c_char,
    pub minlength: ::std::os::raw::c_int,
    pub valallowed: boolean,
}
#[test]
fn bindgen_test_layout_early_opt() {
    assert_eq!(
        ::std::mem::size_of::<early_opt>(),
        24usize,
        concat!("Size of: ", stringify!(early_opt))
    );
    assert_eq!(
        ::std::mem::align_of::<early_opt>(),
        8usize,
        concat!("Alignment of ", stringify!(early_opt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<early_opt>())).e as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(early_opt),
            "::",
            stringify!(e)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<early_opt>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(early_opt),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<early_opt>())).minlength as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(early_opt),
            "::",
            stringify!(minlength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<early_opt>())).valallowed as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(early_opt),
            "::",
            stringify!(valallowed)
        )
    );
}
pub const nh_keyfunc_NHKF_ESC: nh_keyfunc = 0;
pub const nh_keyfunc_NHKF_DOAGAIN: nh_keyfunc = 1;
pub const nh_keyfunc_NHKF_REQMENU: nh_keyfunc = 2;
pub const nh_keyfunc_NHKF_RUN: nh_keyfunc = 3;
pub const nh_keyfunc_NHKF_RUN2: nh_keyfunc = 4;
pub const nh_keyfunc_NHKF_RUSH: nh_keyfunc = 5;
pub const nh_keyfunc_NHKF_RUSH2: nh_keyfunc = 6;
pub const nh_keyfunc_NHKF_FIGHT: nh_keyfunc = 7;
pub const nh_keyfunc_NHKF_FIGHT2: nh_keyfunc = 8;
pub const nh_keyfunc_NHKF_NOPICKUP: nh_keyfunc = 9;
pub const nh_keyfunc_NHKF_RUN_NOPICKUP: nh_keyfunc = 10;
pub const nh_keyfunc_NHKF_DOINV: nh_keyfunc = 11;
pub const nh_keyfunc_NHKF_TRAVEL: nh_keyfunc = 12;
pub const nh_keyfunc_NHKF_CLICKLOOK: nh_keyfunc = 13;
pub const nh_keyfunc_NHKF_REDRAW: nh_keyfunc = 14;
pub const nh_keyfunc_NHKF_REDRAW2: nh_keyfunc = 15;
pub const nh_keyfunc_NHKF_GETDIR_SELF: nh_keyfunc = 16;
pub const nh_keyfunc_NHKF_GETDIR_SELF2: nh_keyfunc = 17;
pub const nh_keyfunc_NHKF_GETDIR_HELP: nh_keyfunc = 18;
pub const nh_keyfunc_NHKF_COUNT: nh_keyfunc = 19;
pub const nh_keyfunc_NHKF_GETPOS_SELF: nh_keyfunc = 20;
pub const nh_keyfunc_NHKF_GETPOS_PICK: nh_keyfunc = 21;
pub const nh_keyfunc_NHKF_GETPOS_PICK_Q: nh_keyfunc = 22;
pub const nh_keyfunc_NHKF_GETPOS_PICK_O: nh_keyfunc = 23;
pub const nh_keyfunc_NHKF_GETPOS_PICK_V: nh_keyfunc = 24;
pub const nh_keyfunc_NHKF_GETPOS_SHOWVALID: nh_keyfunc = 25;
pub const nh_keyfunc_NHKF_GETPOS_AUTODESC: nh_keyfunc = 26;
pub const nh_keyfunc_NHKF_GETPOS_MON_NEXT: nh_keyfunc = 27;
pub const nh_keyfunc_NHKF_GETPOS_MON_PREV: nh_keyfunc = 28;
pub const nh_keyfunc_NHKF_GETPOS_OBJ_NEXT: nh_keyfunc = 29;
pub const nh_keyfunc_NHKF_GETPOS_OBJ_PREV: nh_keyfunc = 30;
pub const nh_keyfunc_NHKF_GETPOS_DOOR_NEXT: nh_keyfunc = 31;
pub const nh_keyfunc_NHKF_GETPOS_DOOR_PREV: nh_keyfunc = 32;
pub const nh_keyfunc_NHKF_GETPOS_UNEX_NEXT: nh_keyfunc = 33;
pub const nh_keyfunc_NHKF_GETPOS_UNEX_PREV: nh_keyfunc = 34;
pub const nh_keyfunc_NHKF_GETPOS_INTERESTING_NEXT: nh_keyfunc = 35;
pub const nh_keyfunc_NHKF_GETPOS_INTERESTING_PREV: nh_keyfunc = 36;
pub const nh_keyfunc_NHKF_GETPOS_VALID_NEXT: nh_keyfunc = 37;
pub const nh_keyfunc_NHKF_GETPOS_VALID_PREV: nh_keyfunc = 38;
pub const nh_keyfunc_NHKF_GETPOS_HELP: nh_keyfunc = 39;
pub const nh_keyfunc_NHKF_GETPOS_MENU: nh_keyfunc = 40;
pub const nh_keyfunc_NHKF_GETPOS_LIMITVIEW: nh_keyfunc = 41;
pub const nh_keyfunc_NHKF_GETPOS_MOVESKIP: nh_keyfunc = 42;
pub const nh_keyfunc_NUM_NHKF: nh_keyfunc = 43;
pub type nh_keyfunc = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cmd {
    pub serialno: ::std::os::raw::c_uint,
    pub num_pad: boolean,
    pub pcHack_compat: boolean,
    pub phone_layout: boolean,
    pub swap_yz: boolean,
    pub move_W: ::std::os::raw::c_char,
    pub move_NW: ::std::os::raw::c_char,
    pub move_N: ::std::os::raw::c_char,
    pub move_NE: ::std::os::raw::c_char,
    pub move_E: ::std::os::raw::c_char,
    pub move_SE: ::std::os::raw::c_char,
    pub move_S: ::std::os::raw::c_char,
    pub move_SW: ::std::os::raw::c_char,
    pub dirchars: *const ::std::os::raw::c_char,
    pub alphadirchars: *const ::std::os::raw::c_char,
    pub commands: [*const ext_func_tab; 256usize],
    pub spkeys: [::std::os::raw::c_char; 43usize],
}
#[test]
fn bindgen_test_layout_cmd() {
    assert_eq!(
        ::std::mem::size_of::<cmd>(),
        2128usize,
        concat!("Size of: ", stringify!(cmd))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd>(),
        8usize,
        concat!("Alignment of ", stringify!(cmd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).serialno as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(serialno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).num_pad as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(num_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).pcHack_compat as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(pcHack_compat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).phone_layout as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(phone_layout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).swap_yz as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(swap_yz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).move_W as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(move_W)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).move_NW as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(move_NW)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).move_N as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(move_N)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).move_NE as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(move_NE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).move_E as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(move_E)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).move_SE as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(move_SE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).move_S as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(move_S)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).move_SW as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(move_SW)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).dirchars as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(dirchars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).alphadirchars as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(alphadirchars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).commands as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(commands)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).spkeys as *const _ as usize },
        2080usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(spkeys)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct entity {
    pub emon: *mut monst,
    pub edata: *mut permonst,
    pub ex: ::std::os::raw::c_int,
    pub ey: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_entity() {
    assert_eq!(
        ::std::mem::size_of::<entity>(),
        24usize,
        concat!("Size of: ", stringify!(entity))
    );
    assert_eq!(
        ::std::mem::align_of::<entity>(),
        8usize,
        concat!("Alignment of ", stringify!(entity))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<entity>())).emon as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(entity),
            "::",
            stringify!(emon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<entity>())).edata as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(entity),
            "::",
            stringify!(edata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<entity>())).ex as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(entity),
            "::",
            stringify!(ex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<entity>())).ey as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(entity),
            "::",
            stringify!(ey)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct valuable_data {
    pub count: ::std::os::raw::c_long,
    pub typ: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_valuable_data() {
    assert_eq!(
        ::std::mem::size_of::<valuable_data>(),
        8usize,
        concat!("Size of: ", stringify!(valuable_data))
    );
    assert_eq!(
        ::std::mem::align_of::<valuable_data>(),
        4usize,
        concat!("Alignment of ", stringify!(valuable_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<valuable_data>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(valuable_data),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<valuable_data>())).typ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(valuable_data),
            "::",
            stringify!(typ)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct val_list {
    pub list: *mut valuable_data,
    pub size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_val_list() {
    assert_eq!(
        ::std::mem::size_of::<val_list>(),
        16usize,
        concat!("Size of: ", stringify!(val_list))
    );
    assert_eq!(
        ::std::mem::align_of::<val_list>(),
        8usize,
        concat!("Alignment of ", stringify!(val_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<val_list>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(val_list),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<val_list>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(val_list),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xlock_s {
    pub door: *mut rm,
    pub box_: *mut obj,
    pub picktyp: ::std::os::raw::c_int,
    pub chance: ::std::os::raw::c_int,
    pub usedtime: ::std::os::raw::c_int,
    pub magic_key: boolean,
}
#[test]
fn bindgen_test_layout_xlock_s() {
    assert_eq!(
        ::std::mem::size_of::<xlock_s>(),
        32usize,
        concat!("Size of: ", stringify!(xlock_s))
    );
    assert_eq!(
        ::std::mem::align_of::<xlock_s>(),
        8usize,
        concat!("Alignment of ", stringify!(xlock_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xlock_s>())).door as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xlock_s),
            "::",
            stringify!(door)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xlock_s>())).box_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xlock_s),
            "::",
            stringify!(box_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xlock_s>())).picktyp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(xlock_s),
            "::",
            stringify!(picktyp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xlock_s>())).chance as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(xlock_s),
            "::",
            stringify!(chance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xlock_s>())).usedtime as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(xlock_s),
            "::",
            stringify!(usedtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<xlock_s>())).magic_key as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(xlock_s),
            "::",
            stringify!(magic_key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct trapinfo {
    pub tobj: *mut obj,
    pub tx: xchar,
    pub ty: xchar,
    pub time_needed: ::std::os::raw::c_int,
    pub force_bungle: boolean,
}
#[test]
fn bindgen_test_layout_trapinfo() {
    assert_eq!(
        ::std::mem::size_of::<trapinfo>(),
        24usize,
        concat!("Size of: ", stringify!(trapinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<trapinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(trapinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trapinfo>())).tobj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(trapinfo),
            "::",
            stringify!(tobj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trapinfo>())).tx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(trapinfo),
            "::",
            stringify!(tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trapinfo>())).ty as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(trapinfo),
            "::",
            stringify!(ty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trapinfo>())).time_needed as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(trapinfo),
            "::",
            stringify!(time_needed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trapinfo>())).force_bungle as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(trapinfo),
            "::",
            stringify!(force_bungle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct gbuf_entry {
    pub gnew: xchar,
    pub glyph: ::std::os::raw::c_int,
    pub glyphinfo: glyph_info,
}
#[test]
fn bindgen_test_layout_gbuf_entry() {
    assert_eq!(
        ::std::mem::size_of::<gbuf_entry>(),
        28usize,
        concat!("Size of: ", stringify!(gbuf_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<gbuf_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(gbuf_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbuf_entry>())).gnew as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(gbuf_entry),
            "::",
            stringify!(gnew)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbuf_entry>())).glyph as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(gbuf_entry),
            "::",
            stringify!(glyph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<gbuf_entry>())).glyphinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(gbuf_entry),
            "::",
            stringify!(glyphinfo)
        )
    );
}
pub const vanq_order_modes_VANQ_MLVL_MNDX: vanq_order_modes = 0;
pub const vanq_order_modes_VANQ_MSTR_MNDX: vanq_order_modes = 1;
pub const vanq_order_modes_VANQ_ALPHA_SEP: vanq_order_modes = 2;
pub const vanq_order_modes_VANQ_ALPHA_MIX: vanq_order_modes = 3;
pub const vanq_order_modes_VANQ_MCLS_HTOL: vanq_order_modes = 4;
pub const vanq_order_modes_VANQ_MCLS_LTOH: vanq_order_modes = 5;
pub const vanq_order_modes_VANQ_COUNT_H_L: vanq_order_modes = 6;
pub const vanq_order_modes_VANQ_COUNT_L_H: vanq_order_modes = 7;
pub const vanq_order_modes_NUM_VANQ_ORDER_MODES: vanq_order_modes = 8;
pub type vanq_order_modes = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rogueroom {
    pub rlx: xchar,
    pub rly: xchar,
    pub dx: xchar,
    pub dy: xchar,
    pub real: boolean,
    pub doortable: uchar,
    pub nroom: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rogueroom() {
    assert_eq!(
        ::std::mem::size_of::<rogueroom>(),
        12usize,
        concat!("Size of: ", stringify!(rogueroom))
    );
    assert_eq!(
        ::std::mem::align_of::<rogueroom>(),
        4usize,
        concat!("Alignment of ", stringify!(rogueroom))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rogueroom>())).rlx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rogueroom),
            "::",
            stringify!(rlx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rogueroom>())).rly as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rogueroom),
            "::",
            stringify!(rly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rogueroom>())).dx as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rogueroom),
            "::",
            stringify!(dx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rogueroom>())).dy as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rogueroom),
            "::",
            stringify!(dy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rogueroom>())).real as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rogueroom),
            "::",
            stringify!(real)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rogueroom>())).doortable as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(rogueroom),
            "::",
            stringify!(doortable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rogueroom>())).nroom as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rogueroom),
            "::",
            stringify!(nroom)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ls_t {
    pub next: *mut ls_t,
    pub x: xchar,
    pub y: xchar,
    pub range: ::std::os::raw::c_short,
    pub flags: ::std::os::raw::c_short,
    pub type_: ::std::os::raw::c_short,
    pub id: anything,
}
#[test]
fn bindgen_test_layout_ls_t() {
    assert_eq!(
        ::std::mem::size_of::<ls_t>(),
        24usize,
        concat!("Size of: ", stringify!(ls_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ls_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ls_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ls_t>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_t),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ls_t>())).x as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(ls_t), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ls_t>())).y as *const _ as usize },
        9usize,
        concat!("Offset of field: ", stringify!(ls_t), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ls_t>())).range as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_t),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ls_t>())).flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ls_t>())).type_ as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ls_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ls_t>())).id as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ls_t), "::", stringify!(id))
    );
}
pub type light_source = ls_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct container {
    pub next: *mut container,
    pub x: xchar,
    pub y: xchar,
    pub what: ::std::os::raw::c_short,
    pub list: genericptr_t,
}
#[test]
fn bindgen_test_layout_container() {
    assert_eq!(
        ::std::mem::size_of::<container>(),
        24usize,
        concat!("Size of: ", stringify!(container))
    );
    assert_eq!(
        ::std::mem::align_of::<container>(),
        8usize,
        concat!("Alignment of ", stringify!(container))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<container>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(container),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<container>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(container),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<container>())).y as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(container),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<container>())).what as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(container),
            "::",
            stringify!(what)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<container>())).list as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(container),
            "::",
            stringify!(list)
        )
    );
}
pub const bubble_contains_types_CONS_OBJ: bubble_contains_types = 0;
pub const bubble_contains_types_CONS_MON: bubble_contains_types = 1;
pub const bubble_contains_types_CONS_HERO: bubble_contains_types = 2;
pub const bubble_contains_types_CONS_TRAP: bubble_contains_types = 3;
pub type bubble_contains_types = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bubble {
    pub x: xchar,
    pub y: xchar,
    pub dx: schar,
    pub dy: schar,
    pub bm: [uchar; 6usize],
    pub prev: *mut bubble,
    pub next: *mut bubble,
    pub cons: *mut container,
}
#[test]
fn bindgen_test_layout_bubble() {
    assert_eq!(
        ::std::mem::size_of::<bubble>(),
        40usize,
        concat!("Size of: ", stringify!(bubble))
    );
    assert_eq!(
        ::std::mem::align_of::<bubble>(),
        8usize,
        concat!("Alignment of ", stringify!(bubble))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bubble>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(bubble), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bubble>())).y as *const _ as usize },
        1usize,
        concat!("Offset of field: ", stringify!(bubble), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bubble>())).dx as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(bubble),
            "::",
            stringify!(dx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bubble>())).dy as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(bubble),
            "::",
            stringify!(dy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bubble>())).bm as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(bubble),
            "::",
            stringify!(bm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bubble>())).prev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bubble),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bubble>())).next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bubble),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bubble>())).cons as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bubble),
            "::",
            stringify!(cons)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct musable {
    pub offensive: *mut obj,
    pub defensive: *mut obj,
    pub misc: *mut obj,
    pub has_offense: ::std::os::raw::c_int,
    pub has_defense: ::std::os::raw::c_int,
    pub has_misc: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_musable() {
    assert_eq!(
        ::std::mem::size_of::<musable>(),
        40usize,
        concat!("Size of: ", stringify!(musable))
    );
    assert_eq!(
        ::std::mem::align_of::<musable>(),
        8usize,
        concat!("Alignment of ", stringify!(musable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<musable>())).offensive as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(musable),
            "::",
            stringify!(offensive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<musable>())).defensive as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(musable),
            "::",
            stringify!(defensive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<musable>())).misc as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(musable),
            "::",
            stringify!(misc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<musable>())).has_offense as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(musable),
            "::",
            stringify!(has_offense)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<musable>())).has_defense as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(musable),
            "::",
            stringify!(has_defense)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<musable>())).has_misc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(musable),
            "::",
            stringify!(has_misc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct h2o_ctx {
    pub dkn_boom: ::std::os::raw::c_int,
    pub unk_boom: ::std::os::raw::c_int,
    pub ctx_valid: boolean,
}
#[test]
fn bindgen_test_layout_h2o_ctx() {
    assert_eq!(
        ::std::mem::size_of::<h2o_ctx>(),
        12usize,
        concat!("Size of: ", stringify!(h2o_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<h2o_ctx>(),
        4usize,
        concat!("Alignment of ", stringify!(h2o_ctx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<h2o_ctx>())).dkn_boom as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(h2o_ctx),
            "::",
            stringify!(dkn_boom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<h2o_ctx>())).unk_boom as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(h2o_ctx),
            "::",
            stringify!(unk_boom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<h2o_ctx>())).ctx_valid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(h2o_ctx),
            "::",
            stringify!(ctx_valid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct launchplace {
    pub obj: *mut obj,
    pub x: xchar,
    pub y: xchar,
}
#[test]
fn bindgen_test_layout_launchplace() {
    assert_eq!(
        ::std::mem::size_of::<launchplace>(),
        16usize,
        concat!("Size of: ", stringify!(launchplace))
    );
    assert_eq!(
        ::std::mem::align_of::<launchplace>(),
        8usize,
        concat!("Alignment of ", stringify!(launchplace))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<launchplace>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(launchplace),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<launchplace>())).x as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(launchplace),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<launchplace>())).y as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(launchplace),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct repo {
    pub shopkeeper: *mut monst,
    pub location: coord,
}
#[test]
fn bindgen_test_layout_repo() {
    assert_eq!(
        ::std::mem::size_of::<repo>(),
        16usize,
        concat!("Size of: ", stringify!(repo))
    );
    assert_eq!(
        ::std::mem::align_of::<repo>(),
        8usize,
        concat!("Alignment of ", stringify!(repo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<repo>())).shopkeeper as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(repo),
            "::",
            stringify!(shopkeeper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<repo>())).location as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(repo),
            "::",
            stringify!(location)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct role_filter {
    pub roles: [boolean; 14usize],
    pub mask: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_role_filter() {
    assert_eq!(
        ::std::mem::size_of::<role_filter>(),
        16usize,
        concat!("Size of: ", stringify!(role_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<role_filter>(),
        2usize,
        concat!("Alignment of ", stringify!(role_filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<role_filter>())).roles as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(role_filter),
            "::",
            stringify!(roles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<role_filter>())).mask as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(role_filter),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _create_particular_data {
    pub quan: ::std::os::raw::c_int,
    pub which: ::std::os::raw::c_int,
    pub fem: ::std::os::raw::c_int,
    pub genderconf: ::std::os::raw::c_int,
    pub monclass: ::std::os::raw::c_char,
    pub randmonst: boolean,
    pub maketame: boolean,
    pub makepeaceful: boolean,
    pub makehostile: boolean,
    pub sleeping: boolean,
    pub saddled: boolean,
    pub invisible: boolean,
    pub hidden: boolean,
}
#[test]
fn bindgen_test_layout__create_particular_data() {
    assert_eq!(
        ::std::mem::size_of::<_create_particular_data>(),
        28usize,
        concat!("Size of: ", stringify!(_create_particular_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_create_particular_data>(),
        4usize,
        concat!("Alignment of ", stringify!(_create_particular_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_create_particular_data>())).quan as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_create_particular_data),
            "::",
            stringify!(quan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_create_particular_data>())).which as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_create_particular_data),
            "::",
            stringify!(which)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_create_particular_data>())).fem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_create_particular_data),
            "::",
            stringify!(fem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_create_particular_data>())).genderconf as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_create_particular_data),
            "::",
            stringify!(genderconf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_create_particular_data>())).monclass as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_create_particular_data),
            "::",
            stringify!(monclass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_create_particular_data>())).randmonst as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(_create_particular_data),
            "::",
            stringify!(randmonst)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_create_particular_data>())).maketame as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(_create_particular_data),
            "::",
            stringify!(maketame)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_create_particular_data>())).makepeaceful as *const _ as usize
        },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(_create_particular_data),
            "::",
            stringify!(makepeaceful)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_create_particular_data>())).makehostile as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_create_particular_data),
            "::",
            stringify!(makehostile)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_create_particular_data>())).sleeping as *const _ as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(_create_particular_data),
            "::",
            stringify!(sleeping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_create_particular_data>())).saddled as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(_create_particular_data),
            "::",
            stringify!(saddled)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_create_particular_data>())).invisible as *const _ as usize
        },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(_create_particular_data),
            "::",
            stringify!(invisible)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_create_particular_data>())).hidden as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_create_particular_data),
            "::",
            stringify!(hidden)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct instance_globals {
    pub jumping_is_magic: ::std::os::raw::c_int,
    pub polearm_range_min: ::std::os::raw::c_int,
    pub polearm_range_max: ::std::os::raw::c_int,
    pub trapinfo: trapinfo,
    pub spec_dbon_applies: ::std::os::raw::c_int,
    pub artiexist: [boolean; 35usize],
    pub artidisco: [xchar; 33usize],
    pub mkot_trap_warn_count: ::std::os::raw::c_int,
    pub mrank_sz: ::std::os::raw::c_int,
    pub blstats: [[istat_s; 23usize]; 2usize],
    pub blinit: boolean,
    pub update_all: boolean,
    pub valset: [boolean; 23usize],
    pub bl_hilite_moves: ::std::os::raw::c_long,
    pub cond_hilites: [::std::os::raw::c_ulong; 21usize],
    pub now_or_before_idx: ::std::os::raw::c_int,
    pub condmenu_sortorder: ::std::os::raw::c_int,
    pub Cmd: cmd,
    pub pushq: [::std::os::raw::c_char; 20usize],
    pub saveq: [::std::os::raw::c_char; 20usize],
    pub phead: ::std::os::raw::c_int,
    pub ptail: ::std::os::raw::c_int,
    pub shead: ::std::os::raw::c_int,
    pub stail: ::std::os::raw::c_int,
    pub clicklook_cc: coord,
    pub en_win: winid,
    pub en_via_menu: boolean,
    pub last_command_count: ::std::os::raw::c_long,
    pub occupants: [entity; 2usize],
    pub occupation: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub afternmv: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub hname: *const ::std::os::raw::c_char,
    pub hackpid: ::std::os::raw::c_int,
    pub chosen_windowtype: [::std::os::raw::c_char; 16usize],
    pub bases: [::std::os::raw::c_int; 19usize],
    pub multi: ::std::os::raw::c_int,
    pub command_line: [::std::os::raw::c_char; 80usize],
    pub command_count: ::std::os::raw::c_long,
    pub multi_reason: *const ::std::os::raw::c_char,
    pub multireasonbuf: [::std::os::raw::c_char; 128usize],
    pub nroom: ::std::os::raw::c_int,
    pub nsubroom: ::std::os::raw::c_int,
    pub occtime: ::std::os::raw::c_int,
    pub warn_obj_cnt: ::std::os::raw::c_int,
    pub x_maze_max: ::std::os::raw::c_int,
    pub y_maze_max: ::std::os::raw::c_int,
    pub otg_temp: ::std::os::raw::c_int,
    pub in_doagain: ::std::os::raw::c_int,
    pub stairs: *mut stairway,
    pub smeq: [::std::os::raw::c_int; 41usize],
    pub doorindex: ::std::os::raw::c_int,
    pub save_cm: *mut ::std::os::raw::c_char,
    pub done_money: ::std::os::raw::c_long,
    pub domove_attempting: ::std::os::raw::c_long,
    pub domove_succeeded: ::std::os::raw::c_long,
    pub nomovemsg: *const ::std::os::raw::c_char,
    pub plname: [::std::os::raw::c_char; 32usize],
    pub plnamelen: ::std::os::raw::c_int,
    pub pl_character: [::std::os::raw::c_char; 32usize],
    pub pl_race: ::std::os::raw::c_char,
    pub pl_fruit: [::std::os::raw::c_char; 32usize],
    pub ffruit: *mut fruit,
    pub tune: [::std::os::raw::c_char; 6usize],
    pub occtxt: *const ::std::os::raw::c_char,
    pub tbx: schar,
    pub tby: schar,
    pub sp_levchn: *mut s_level,
    pub m_shot: multishot,
    pub dungeons: [dungeon; 16usize],
    pub updest: dest_area,
    pub dndest: dest_area,
    pub inv_pos: coord,
    pub defer_see_monsters: boolean,
    pub in_mklev: boolean,
    pub stoned: boolean,
    pub unweapon: boolean,
    pub mrg_to_wielded: boolean,
    pub plinemsg_types: *mut plinemsg_type,
    pub toplines: [::std::os::raw::c_char; 300usize],
    pub bhitpos: coord,
    pub in_steed_dismounting: boolean,
    pub doors: [coord; 120usize],
    pub menu_colorings: *mut menucoloring,
    pub lastseentyp: [[schar; 21usize]; 80usize],
    pub spl_book: [spell; 45usize],
    pub level_info: [linfo; 512usize],
    pub ftrap: *mut trap,
    pub current_wand: *mut obj,
    pub thrownobj: *mut obj,
    pub kickedobj: *mut obj,
    pub dungeon_topology: dgn_topology,
    pub killer: kinfo,
    pub rooms: [mkroom; 82usize],
    pub subrooms: *mut mkroom,
    pub level: dlevel_t,
    pub moves: ::std::os::raw::c_long,
    pub monstermoves: ::std::os::raw::c_long,
    pub wailmsg: ::std::os::raw::c_long,
    pub migrating_objs: *mut obj,
    pub billobjs: *mut obj,
    pub hackdir: [::std::os::raw::c_char; 256usize],
    pub youmonst: monst,
    pub invent: *mut obj,
    pub context: context_info,
    pub fqn_prefix: [*mut ::std::os::raw::c_char; 10usize],
    pub tc_gbl_data: tc_gbl_data,
    pub program_state: sinfo,
    pub already_found_flag: ::std::os::raw::c_int,
    pub did_dig_msg: boolean,
    pub gbuf: [[gbuf_entry; 80usize]; 21usize],
    pub gbuf_start: [xchar; 21usize],
    pub gbuf_stop: [xchar; 21usize],
    pub at_ladder: boolean,
    pub dfr_pre_msg: *mut ::std::os::raw::c_char,
    pub dfr_post_msg: *mut ::std::os::raw::c_char,
    pub did_nothing_flag: ::std::os::raw::c_int,
    pub save_dlevel: d_level,
    pub gloc_filter_map: *mut selectionvar,
    pub gloc_filter_floodfill_match_glyph: ::std::os::raw::c_int,
    pub via_naming: ::std::os::raw::c_int,
    pub initial_don: boolean,
    pub petname_used: ::std::os::raw::c_int,
    pub gtyp: xchar,
    pub gx: xchar,
    pub gy: xchar,
    pub dogname: [::std::os::raw::c_char; 63usize],
    pub catname: [::std::os::raw::c_char; 63usize],
    pub horsename: [::std::os::raw::c_char; 63usize],
    pub preferred_pet: ::std::os::raw::c_char,
    pub mydogs: *mut monst,
    pub migrating_mons: *mut monst,
    pub apelist: *mut autopickup_exception,
    pub mvitals: [mvitals; 381usize],
    pub maploc: *mut rm,
    pub nowhere: rm,
    pub gate_str: *const ::std::os::raw::c_char,
    pub symset: [symsetentry; 2usize],
    pub currentgraphics: ::std::os::raw::c_int,
    pub showsyms: [nhsym; 187usize],
    pub primary_syms: [nhsym; 187usize],
    pub rogue_syms: [nhsym; 187usize],
    pub ov_primary_syms: [nhsym; 187usize],
    pub ov_rogue_syms: [nhsym; 187usize],
    pub warnsyms: [nhsym; 6usize],
    pub n_dgns: ::std::os::raw::c_int,
    pub branches: *mut branch,
    pub mapseenchn: *mut mapseen,
    pub force_save_hs: boolean,
    pub eatmbuf: *mut ::std::os::raw::c_char,
    pub gems: [valuable_data; 23usize],
    pub amulets: [valuable_data; 13usize],
    pub valuables: [val_list; 3usize],
    pub vanq_sortmode: ::std::os::raw::c_int,
    pub r: [[rogueroom; 3usize]; 3usize],
    pub wizkit: [::std::os::raw::c_char; 128usize],
    pub lockptr: ::std::os::raw::c_int,
    pub config_section_chosen: *mut ::std::os::raw::c_char,
    pub config_section_current: *mut ::std::os::raw::c_char,
    pub nesting: ::std::os::raw::c_int,
    pub symset_count: ::std::os::raw::c_int,
    pub chosen_symset_start: boolean,
    pub chosen_symset_end: boolean,
    pub symset_which_set: ::std::os::raw::c_int,
    pub SAVEF: [::std::os::raw::c_char; 61usize],
    pub bones: [::std::os::raw::c_char; 15usize],
    pub lock: [::std::os::raw::c_char; 57usize],
    pub tmp_anything: anything,
    pub wc: ::std::os::raw::c_int,
    pub lastinvnr: ::std::os::raw::c_int,
    pub sortlootmode: ::std::os::raw::c_uint,
    pub invbuf: *mut ::std::os::raw::c_char,
    pub invbufsiz: ::std::os::raw::c_uint,
    pub cached_pickinv_win: winid,
    pub this_type: ::std::os::raw::c_int,
    pub only: coord,
    pub light_base: *mut light_source,
    pub xlock: xlock_s,
    pub noisetime: ::std::os::raw::c_long,
    pub far_noise: boolean,
    pub vis: boolean,
    pub skipdrin: boolean,
    pub mhitu_dieroll: ::std::os::raw::c_int,
    pub luathemes: [genericptr_t; 16usize],
    pub vault_x: xchar,
    pub vault_y: xchar,
    pub made_branch: boolean,
    pub new_locations: *mut ::std::os::raw::c_char,
    pub min_rx: ::std::os::raw::c_int,
    pub max_rx: ::std::os::raw::c_int,
    pub min_ry: ::std::os::raw::c_int,
    pub max_ry: ::std::os::raw::c_int,
    pub n_loc_filled: ::std::os::raw::c_int,
    pub bughack: lev_region,
    pub was_waterlevel: boolean,
    pub bbubbles: *mut bubble,
    pub ebubbles: *mut bubble,
    pub wportal: *mut trap,
    pub xmin: ::std::os::raw::c_int,
    pub ymin: ::std::os::raw::c_int,
    pub xmax: ::std::os::raw::c_int,
    pub ymax: ::std::os::raw::c_int,
    pub ransacked: boolean,
    pub mkcorpstat_norevive: boolean,
    pub vamp_rise_msg: boolean,
    pub disintegested: boolean,
    pub zombify: boolean,
    pub animal_list: *mut ::std::os::raw::c_short,
    pub animal_list_count: ::std::os::raw::c_int,
    pub mesg_given: ::std::os::raw::c_int,
    pub mtarget: *mut monst,
    pub marcher: *mut monst,
    pub m_using: boolean,
    pub trapx: ::std::os::raw::c_int,
    pub trapy: ::std::os::raw::c_int,
    pub zap_oseen: boolean,
    pub m: musable,
    pub lusername: [::std::os::raw::c_char; 20usize],
    pub lusername_size: ::std::os::raw::c_int,
    pub disco: [::std::os::raw::c_short; 457usize],
    pub distantname: ::std::os::raw::c_int,
    pub symset_list: *mut symsetentry,
    pub mapped_menu_cmds: [::std::os::raw::c_char; 33usize],
    pub mapped_menu_op: [::std::os::raw::c_char; 33usize],
    pub n_menu_mapped: ::std::os::raw::c_short,
    pub opt_initial: boolean,
    pub opt_from_file: boolean,
    pub opt_need_redraw: boolean,
    pub save_menucolors: boolean,
    pub save_colorings: *mut menucoloring,
    pub color_colorings: *mut menucoloring,
    pub oldcap: ::std::os::raw::c_int,
    pub current_container: *mut obj,
    pub abort_looting: boolean,
    pub val_for_n_or_more: ::std::os::raw::c_long,
    pub valid_menu_classes: [::std::os::raw::c_char; 24usize],
    pub class_filter: boolean,
    pub bucx_filter: boolean,
    pub shop_filter: boolean,
    pub pline_flags: ::std::os::raw::c_uint,
    pub prevmsg: [::std::os::raw::c_char; 256usize],
    pub saved_pline_index: ::std::os::raw::c_uint,
    pub saved_plines: [*mut ::std::os::raw::c_char; 50usize],
    pub you_buf: *mut ::std::os::raw::c_char,
    pub you_buf_siz: ::std::os::raw::c_int,
    pub sex_change_ok: ::std::os::raw::c_int,
    pub notonhead: boolean,
    pub potion_nothing: ::std::os::raw::c_int,
    pub potion_unkn: ::std::os::raw::c_int,
    pub p_aligntyp: aligntyp,
    pub p_trouble: ::std::os::raw::c_int,
    pub p_type: ::std::os::raw::c_int,
    pub quest_status: q_score,
    pub cvt_buf: [::std::os::raw::c_char; 64usize],
    pub nambuf: [::std::os::raw::c_char; 64usize],
    pub known: boolean,
    pub regions: *mut *mut NhRegion,
    pub n_regions: ::std::os::raw::c_int,
    pub max_regions: ::std::os::raw::c_int,
    pub n_ids_mapped: ::std::os::raw::c_int,
    pub id_map: *mut bucket,
    pub restoring: boolean,
    pub oldfruit: *mut fruit,
    pub omoves: ::std::os::raw::c_long,
    pub rip: *mut *mut ::std::os::raw::c_char,
    pub urole: Role,
    pub urace: Race,
    pub role_pa: [::std::os::raw::c_char; 4usize],
    pub role_post_attribs: ::std::os::raw::c_char,
    pub rfilter: role_filter,
    pub true_rumor_size: ::std::os::raw::c_long,
    pub false_rumor_size: ::std::os::raw::c_long,
    pub true_rumor_start: ::std::os::raw::c_ulong,
    pub false_rumor_start: ::std::os::raw::c_ulong,
    pub true_rumor_end: ::std::os::raw::c_long,
    pub false_rumor_end: ::std::os::raw::c_long,
    pub oracle_flg: ::std::os::raw::c_int,
    pub oracle_cnt: ::std::os::raw::c_uint,
    pub oracle_loc: *mut ::std::os::raw::c_ulong,
    pub havestate: boolean,
    pub ustuck_id: ::std::os::raw::c_uint,
    pub usteed_id: ::std::os::raw::c_uint,
    pub looseball: *mut obj,
    pub loosechain: *mut obj,
    pub sell_response: ::std::os::raw::c_char,
    pub sell_how: ::std::os::raw::c_int,
    pub auto_credit: boolean,
    pub repo: repo,
    pub followmsg: ::std::os::raw::c_long,
    pub lev_message: *mut ::std::os::raw::c_char,
    pub lregions: *mut lev_region,
    pub num_lregions: ::std::os::raw::c_int,
    pub coder: *mut sp_coder,
    pub xstart: xchar,
    pub ystart: xchar,
    pub xsize: xchar,
    pub ysize: xchar,
    pub in_mk_themerooms: boolean,
    pub themeroom_failed: boolean,
    pub spl_sortmode: ::std::os::raw::c_int,
    pub spl_orderindx: *mut ::std::os::raw::c_int,
    pub stealoid: ::std::os::raw::c_uint,
    pub stealmid: ::std::os::raw::c_uint,
    pub timer_base: *mut fe,
    pub timer_id: ::std::os::raw::c_ulong,
    pub toptenwin: winid,
    pub force_mintrap: ::std::os::raw::c_int,
    pub acid_ctx: h2o_ctx,
    pub launchplace: launchplace,
    pub nocreate: ::std::os::raw::c_short,
    pub nocreate2: ::std::os::raw::c_short,
    pub nocreate3: ::std::os::raw::c_short,
    pub nocreate4: ::std::os::raw::c_short,
    pub override_confirmation: boolean,
    pub viz_array: *mut *mut xchar,
    pub viz_rmin: *mut xchar,
    pub viz_rmax: *mut xchar,
    pub vision_full_recalc: boolean,
    pub propellor: *mut obj,
    pub last_winchoice: *mut win_choices,
    pub poly_zapped: ::std::os::raw::c_int,
    pub obj_zapped: boolean,
    pub lua_ver: [::std::os::raw::c_char; 20usize],
    pub lua_copyright: [::std::os::raw::c_char; 120usize],
    pub glyphmap_perlevel_flags: ::std::os::raw::c_long,
    pub magic: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_instance_globals() {
    assert_eq!(
        ::std::mem::size_of::<instance_globals>(),
        131488usize,
        concat!("Size of: ", stringify!(instance_globals))
    );
    assert_eq!(
        ::std::mem::align_of::<instance_globals>(),
        8usize,
        concat!("Alignment of ", stringify!(instance_globals))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).jumping_is_magic as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(jumping_is_magic)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).polearm_range_min as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(polearm_range_min)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).polearm_range_max as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(polearm_range_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).trapinfo as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(trapinfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).spec_dbon_applies as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(spec_dbon_applies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).artiexist as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(artiexist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).artidisco as *const _ as usize },
        79usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(artidisco)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).mkot_trap_warn_count as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(mkot_trap_warn_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).mrank_sz as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(mrank_sz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).blstats as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(blstats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).blinit as *const _ as usize },
        3800usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(blinit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).update_all as *const _ as usize },
        3801usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(update_all)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).valset as *const _ as usize },
        3802usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(valset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).bl_hilite_moves as *const _ as usize
        },
        3828usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(bl_hilite_moves)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).cond_hilites as *const _ as usize },
        3832usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(cond_hilites)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).now_or_before_idx as *const _ as usize
        },
        3916usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(now_or_before_idx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).condmenu_sortorder as *const _ as usize
        },
        3920usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(condmenu_sortorder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).Cmd as *const _ as usize },
        3928usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(Cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).pushq as *const _ as usize },
        6056usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(pushq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).saveq as *const _ as usize },
        6076usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(saveq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).phead as *const _ as usize },
        6096usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(phead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).ptail as *const _ as usize },
        6100usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(ptail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).shead as *const _ as usize },
        6104usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(shead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).stail as *const _ as usize },
        6108usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(stail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).clicklook_cc as *const _ as usize },
        6112usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(clicklook_cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).en_win as *const _ as usize },
        6116usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(en_win)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).en_via_menu as *const _ as usize },
        6120usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(en_via_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).last_command_count as *const _ as usize
        },
        6124usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(last_command_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).occupants as *const _ as usize },
        6128usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(occupants)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).occupation as *const _ as usize },
        6176usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(occupation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).afternmv as *const _ as usize },
        6184usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(afternmv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).hname as *const _ as usize },
        6192usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(hname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).hackpid as *const _ as usize },
        6200usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(hackpid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).chosen_windowtype as *const _ as usize
        },
        6204usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(chosen_windowtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).bases as *const _ as usize },
        6220usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(bases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).multi as *const _ as usize },
        6296usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(multi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).command_line as *const _ as usize },
        6300usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(command_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).command_count as *const _ as usize },
        6380usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(command_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).multi_reason as *const _ as usize },
        6384usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(multi_reason)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).multireasonbuf as *const _ as usize },
        6392usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(multireasonbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).nroom as *const _ as usize },
        6520usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(nroom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).nsubroom as *const _ as usize },
        6524usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(nsubroom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).occtime as *const _ as usize },
        6528usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(occtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).warn_obj_cnt as *const _ as usize },
        6532usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(warn_obj_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).x_maze_max as *const _ as usize },
        6536usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(x_maze_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).y_maze_max as *const _ as usize },
        6540usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(y_maze_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).otg_temp as *const _ as usize },
        6544usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(otg_temp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).in_doagain as *const _ as usize },
        6548usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(in_doagain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).stairs as *const _ as usize },
        6552usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(stairs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).smeq as *const _ as usize },
        6560usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(smeq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).doorindex as *const _ as usize },
        6724usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(doorindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).save_cm as *const _ as usize },
        6728usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(save_cm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).done_money as *const _ as usize },
        6736usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(done_money)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).domove_attempting as *const _ as usize
        },
        6740usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(domove_attempting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).domove_succeeded as *const _ as usize
        },
        6744usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(domove_succeeded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).nomovemsg as *const _ as usize },
        6752usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(nomovemsg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).plname as *const _ as usize },
        6760usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(plname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).plnamelen as *const _ as usize },
        6792usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(plnamelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).pl_character as *const _ as usize },
        6796usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(pl_character)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).pl_race as *const _ as usize },
        6828usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(pl_race)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).pl_fruit as *const _ as usize },
        6829usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(pl_fruit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).ffruit as *const _ as usize },
        6864usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(ffruit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).tune as *const _ as usize },
        6872usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(tune)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).occtxt as *const _ as usize },
        6880usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(occtxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).tbx as *const _ as usize },
        6888usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(tbx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).tby as *const _ as usize },
        6889usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(tby)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).sp_levchn as *const _ as usize },
        6896usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(sp_levchn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).m_shot as *const _ as usize },
        6904usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(m_shot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).dungeons as *const _ as usize },
        6916usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(dungeons)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).updest as *const _ as usize },
        8324usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(updest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).dndest as *const _ as usize },
        8332usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(dndest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).inv_pos as *const _ as usize },
        8340usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(inv_pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).defer_see_monsters as *const _ as usize
        },
        8342usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(defer_see_monsters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).in_mklev as *const _ as usize },
        8343usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(in_mklev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).stoned as *const _ as usize },
        8344usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(stoned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).unweapon as *const _ as usize },
        8345usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(unweapon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).mrg_to_wielded as *const _ as usize },
        8346usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(mrg_to_wielded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).plinemsg_types as *const _ as usize },
        8352usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(plinemsg_types)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).toplines as *const _ as usize },
        8360usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(toplines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).bhitpos as *const _ as usize },
        8660usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(bhitpos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).in_steed_dismounting as *const _ as usize
        },
        8662usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(in_steed_dismounting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).doors as *const _ as usize },
        8663usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(doors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).menu_colorings as *const _ as usize },
        8904usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(menu_colorings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).lastseentyp as *const _ as usize },
        8912usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(lastseentyp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).spl_book as *const _ as usize },
        10592usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(spl_book)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).level_info as *const _ as usize },
        10952usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(level_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).ftrap as *const _ as usize },
        11464usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(ftrap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).current_wand as *const _ as usize },
        11472usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(current_wand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).thrownobj as *const _ as usize },
        11480usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(thrownobj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).kickedobj as *const _ as usize },
        11488usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(kickedobj)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).dungeon_topology as *const _ as usize
        },
        11496usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(dungeon_topology)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).killer as *const _ as usize },
        11552usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(killer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).rooms as *const _ as usize },
        11824usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(rooms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).subrooms as *const _ as usize },
        29536usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(subrooms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).level as *const _ as usize },
        29544usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).moves as *const _ as usize },
        76632usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(moves)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).monstermoves as *const _ as usize },
        76636usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(monstermoves)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).wailmsg as *const _ as usize },
        76640usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(wailmsg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).migrating_objs as *const _ as usize },
        76648usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(migrating_objs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).billobjs as *const _ as usize },
        76656usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(billobjs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).hackdir as *const _ as usize },
        76664usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(hackdir)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).youmonst as *const _ as usize },
        76920usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(youmonst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).invent as *const _ as usize },
        77056usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(invent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).context as *const _ as usize },
        77064usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).fqn_prefix as *const _ as usize },
        77664usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(fqn_prefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).tc_gbl_data as *const _ as usize },
        77744usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(tc_gbl_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).program_state as *const _ as usize },
        77768usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(program_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).already_found_flag as *const _ as usize
        },
        77832usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(already_found_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).did_dig_msg as *const _ as usize },
        77836usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(did_dig_msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).gbuf as *const _ as usize },
        77840usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(gbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).gbuf_start as *const _ as usize },
        124880usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(gbuf_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).gbuf_stop as *const _ as usize },
        124901usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(gbuf_stop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).at_ladder as *const _ as usize },
        124922usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(at_ladder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).dfr_pre_msg as *const _ as usize },
        124928usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(dfr_pre_msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).dfr_post_msg as *const _ as usize },
        124936usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(dfr_post_msg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).did_nothing_flag as *const _ as usize
        },
        124944usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(did_nothing_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).save_dlevel as *const _ as usize },
        124948usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(save_dlevel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).gloc_filter_map as *const _ as usize
        },
        124952usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(gloc_filter_map)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).gloc_filter_floodfill_match_glyph
                as *const _ as usize
        },
        124960usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(gloc_filter_floodfill_match_glyph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).via_naming as *const _ as usize },
        124964usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(via_naming)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).initial_don as *const _ as usize },
        124968usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(initial_don)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).petname_used as *const _ as usize },
        124972usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(petname_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).gtyp as *const _ as usize },
        124976usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(gtyp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).gx as *const _ as usize },
        124977usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(gx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).gy as *const _ as usize },
        124978usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(gy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).dogname as *const _ as usize },
        124979usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(dogname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).catname as *const _ as usize },
        125042usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(catname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).horsename as *const _ as usize },
        125105usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(horsename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).preferred_pet as *const _ as usize },
        125168usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(preferred_pet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).mydogs as *const _ as usize },
        125176usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(mydogs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).migrating_mons as *const _ as usize },
        125184usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(migrating_mons)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).apelist as *const _ as usize },
        125192usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(apelist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).mvitals as *const _ as usize },
        125200usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(mvitals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).maploc as *const _ as usize },
        126344usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(maploc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).nowhere as *const _ as usize },
        126352usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(nowhere)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).gate_str as *const _ as usize },
        126368usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(gate_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).symset as *const _ as usize },
        126376usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(symset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).currentgraphics as *const _ as usize
        },
        126456usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(currentgraphics)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).showsyms as *const _ as usize },
        126460usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(showsyms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).primary_syms as *const _ as usize },
        126647usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(primary_syms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).rogue_syms as *const _ as usize },
        126834usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(rogue_syms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).ov_primary_syms as *const _ as usize
        },
        127021usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(ov_primary_syms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).ov_rogue_syms as *const _ as usize },
        127208usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(ov_rogue_syms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).warnsyms as *const _ as usize },
        127395usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(warnsyms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).n_dgns as *const _ as usize },
        127404usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(n_dgns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).branches as *const _ as usize },
        127408usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(branches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).mapseenchn as *const _ as usize },
        127416usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(mapseenchn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).force_save_hs as *const _ as usize },
        127424usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(force_save_hs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).eatmbuf as *const _ as usize },
        127432usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(eatmbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).gems as *const _ as usize },
        127440usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(gems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).amulets as *const _ as usize },
        127624usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(amulets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).valuables as *const _ as usize },
        127728usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(valuables)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).vanq_sortmode as *const _ as usize },
        127776usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(vanq_sortmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).r as *const _ as usize },
        127780usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).wizkit as *const _ as usize },
        127888usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(wizkit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).lockptr as *const _ as usize },
        128016usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(lockptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).config_section_chosen as *const _ as usize
        },
        128024usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(config_section_chosen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).config_section_current as *const _ as usize
        },
        128032usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(config_section_current)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).nesting as *const _ as usize },
        128040usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(nesting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).symset_count as *const _ as usize },
        128044usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(symset_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).chosen_symset_start as *const _ as usize
        },
        128048usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(chosen_symset_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).chosen_symset_end as *const _ as usize
        },
        128049usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(chosen_symset_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).symset_which_set as *const _ as usize
        },
        128052usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(symset_which_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).SAVEF as *const _ as usize },
        128056usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(SAVEF)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).bones as *const _ as usize },
        128117usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(bones)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).lock as *const _ as usize },
        128132usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).tmp_anything as *const _ as usize },
        128192usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(tmp_anything)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).wc as *const _ as usize },
        128200usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(wc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).lastinvnr as *const _ as usize },
        128204usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(lastinvnr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).sortlootmode as *const _ as usize },
        128208usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(sortlootmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).invbuf as *const _ as usize },
        128216usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(invbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).invbufsiz as *const _ as usize },
        128224usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(invbufsiz)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).cached_pickinv_win as *const _ as usize
        },
        128228usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(cached_pickinv_win)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).this_type as *const _ as usize },
        128232usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(this_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).only as *const _ as usize },
        128236usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(only)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).light_base as *const _ as usize },
        128240usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(light_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).xlock as *const _ as usize },
        128248usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(xlock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).noisetime as *const _ as usize },
        128280usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(noisetime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).far_noise as *const _ as usize },
        128284usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(far_noise)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).vis as *const _ as usize },
        128285usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(vis)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).skipdrin as *const _ as usize },
        128286usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(skipdrin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).mhitu_dieroll as *const _ as usize },
        128288usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(mhitu_dieroll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).luathemes as *const _ as usize },
        128296usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(luathemes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).vault_x as *const _ as usize },
        128424usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(vault_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).vault_y as *const _ as usize },
        128425usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(vault_y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).made_branch as *const _ as usize },
        128426usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(made_branch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).new_locations as *const _ as usize },
        128432usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(new_locations)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).min_rx as *const _ as usize },
        128440usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(min_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).max_rx as *const _ as usize },
        128444usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(max_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).min_ry as *const _ as usize },
        128448usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(min_ry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).max_ry as *const _ as usize },
        128452usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(max_ry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).n_loc_filled as *const _ as usize },
        128456usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(n_loc_filled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).bughack as *const _ as usize },
        128464usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(bughack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).was_waterlevel as *const _ as usize },
        128488usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(was_waterlevel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).bbubbles as *const _ as usize },
        128496usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(bbubbles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).ebubbles as *const _ as usize },
        128504usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(ebubbles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).wportal as *const _ as usize },
        128512usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(wportal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).xmin as *const _ as usize },
        128520usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(xmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).ymin as *const _ as usize },
        128524usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(ymin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).xmax as *const _ as usize },
        128528usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(xmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).ymax as *const _ as usize },
        128532usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(ymax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).ransacked as *const _ as usize },
        128536usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(ransacked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).mkcorpstat_norevive as *const _ as usize
        },
        128537usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(mkcorpstat_norevive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).vamp_rise_msg as *const _ as usize },
        128538usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(vamp_rise_msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).disintegested as *const _ as usize },
        128539usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(disintegested)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).zombify as *const _ as usize },
        128540usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(zombify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).animal_list as *const _ as usize },
        128544usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(animal_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).animal_list_count as *const _ as usize
        },
        128552usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(animal_list_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).mesg_given as *const _ as usize },
        128556usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(mesg_given)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).mtarget as *const _ as usize },
        128560usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(mtarget)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).marcher as *const _ as usize },
        128568usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(marcher)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).m_using as *const _ as usize },
        128576usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(m_using)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).trapx as *const _ as usize },
        128580usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(trapx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).trapy as *const _ as usize },
        128584usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(trapy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).zap_oseen as *const _ as usize },
        128588usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(zap_oseen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).m as *const _ as usize },
        128592usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).lusername as *const _ as usize },
        128632usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(lusername)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).lusername_size as *const _ as usize },
        128652usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(lusername_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).disco as *const _ as usize },
        128656usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(disco)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).distantname as *const _ as usize },
        129572usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(distantname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).symset_list as *const _ as usize },
        129576usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(symset_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).mapped_menu_cmds as *const _ as usize
        },
        129584usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(mapped_menu_cmds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).mapped_menu_op as *const _ as usize },
        129617usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(mapped_menu_op)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).n_menu_mapped as *const _ as usize },
        129650usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(n_menu_mapped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).opt_initial as *const _ as usize },
        129652usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(opt_initial)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).opt_from_file as *const _ as usize },
        129653usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(opt_from_file)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).opt_need_redraw as *const _ as usize
        },
        129654usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(opt_need_redraw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).save_menucolors as *const _ as usize
        },
        129655usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(save_menucolors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).save_colorings as *const _ as usize },
        129656usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(save_colorings)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).color_colorings as *const _ as usize
        },
        129664usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(color_colorings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).oldcap as *const _ as usize },
        129672usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(oldcap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).current_container as *const _ as usize
        },
        129680usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(current_container)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).abort_looting as *const _ as usize },
        129688usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(abort_looting)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).val_for_n_or_more as *const _ as usize
        },
        129692usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(val_for_n_or_more)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).valid_menu_classes as *const _ as usize
        },
        129696usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(valid_menu_classes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).class_filter as *const _ as usize },
        129720usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(class_filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).bucx_filter as *const _ as usize },
        129721usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(bucx_filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).shop_filter as *const _ as usize },
        129722usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(shop_filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).pline_flags as *const _ as usize },
        129724usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(pline_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).prevmsg as *const _ as usize },
        129728usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(prevmsg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).saved_pline_index as *const _ as usize
        },
        129984usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(saved_pline_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).saved_plines as *const _ as usize },
        129992usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(saved_plines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).you_buf as *const _ as usize },
        130392usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(you_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).you_buf_siz as *const _ as usize },
        130400usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(you_buf_siz)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).sex_change_ok as *const _ as usize },
        130404usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(sex_change_ok)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).notonhead as *const _ as usize },
        130408usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(notonhead)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).potion_nothing as *const _ as usize },
        130412usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(potion_nothing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).potion_unkn as *const _ as usize },
        130416usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(potion_unkn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).p_aligntyp as *const _ as usize },
        130420usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(p_aligntyp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).p_trouble as *const _ as usize },
        130424usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(p_trouble)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).p_type as *const _ as usize },
        130428usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(p_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).quest_status as *const _ as usize },
        130432usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(quest_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).cvt_buf as *const _ as usize },
        130440usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(cvt_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).nambuf as *const _ as usize },
        130504usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(nambuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).known as *const _ as usize },
        130568usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(known)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).regions as *const _ as usize },
        130576usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(regions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).n_regions as *const _ as usize },
        130584usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(n_regions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).max_regions as *const _ as usize },
        130588usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(max_regions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).n_ids_mapped as *const _ as usize },
        130592usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(n_ids_mapped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).id_map as *const _ as usize },
        130600usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(id_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).restoring as *const _ as usize },
        130608usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(restoring)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).oldfruit as *const _ as usize },
        130616usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(oldfruit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).omoves as *const _ as usize },
        130624usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(omoves)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).rip as *const _ as usize },
        130632usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).urole as *const _ as usize },
        130640usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(urole)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).urace as *const _ as usize },
        130928usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(urace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).role_pa as *const _ as usize },
        131016usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(role_pa)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).role_post_attribs as *const _ as usize
        },
        131020usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(role_post_attribs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).rfilter as *const _ as usize },
        131022usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(rfilter)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).true_rumor_size as *const _ as usize
        },
        131040usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(true_rumor_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).false_rumor_size as *const _ as usize
        },
        131044usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(false_rumor_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).true_rumor_start as *const _ as usize
        },
        131048usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(true_rumor_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).false_rumor_start as *const _ as usize
        },
        131052usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(false_rumor_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).true_rumor_end as *const _ as usize },
        131056usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(true_rumor_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).false_rumor_end as *const _ as usize
        },
        131060usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(false_rumor_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).oracle_flg as *const _ as usize },
        131064usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(oracle_flg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).oracle_cnt as *const _ as usize },
        131068usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(oracle_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).oracle_loc as *const _ as usize },
        131072usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(oracle_loc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).havestate as *const _ as usize },
        131080usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(havestate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).ustuck_id as *const _ as usize },
        131084usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(ustuck_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).usteed_id as *const _ as usize },
        131088usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(usteed_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).looseball as *const _ as usize },
        131096usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(looseball)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).loosechain as *const _ as usize },
        131104usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(loosechain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).sell_response as *const _ as usize },
        131112usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(sell_response)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).sell_how as *const _ as usize },
        131116usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(sell_how)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).auto_credit as *const _ as usize },
        131120usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(auto_credit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).repo as *const _ as usize },
        131128usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(repo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).followmsg as *const _ as usize },
        131144usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(followmsg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).lev_message as *const _ as usize },
        131152usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(lev_message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).lregions as *const _ as usize },
        131160usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(lregions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).num_lregions as *const _ as usize },
        131168usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(num_lregions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).coder as *const _ as usize },
        131176usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(coder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).xstart as *const _ as usize },
        131184usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(xstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).ystart as *const _ as usize },
        131185usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(ystart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).xsize as *const _ as usize },
        131186usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(xsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).ysize as *const _ as usize },
        131187usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(ysize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).in_mk_themerooms as *const _ as usize
        },
        131188usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(in_mk_themerooms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).themeroom_failed as *const _ as usize
        },
        131189usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(themeroom_failed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).spl_sortmode as *const _ as usize },
        131192usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(spl_sortmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).spl_orderindx as *const _ as usize },
        131200usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(spl_orderindx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).stealoid as *const _ as usize },
        131208usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(stealoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).stealmid as *const _ as usize },
        131212usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(stealmid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).timer_base as *const _ as usize },
        131216usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(timer_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).timer_id as *const _ as usize },
        131224usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(timer_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).toptenwin as *const _ as usize },
        131228usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(toptenwin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).force_mintrap as *const _ as usize },
        131232usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(force_mintrap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).acid_ctx as *const _ as usize },
        131236usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(acid_ctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).launchplace as *const _ as usize },
        131248usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(launchplace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).nocreate as *const _ as usize },
        131264usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(nocreate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).nocreate2 as *const _ as usize },
        131266usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(nocreate2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).nocreate3 as *const _ as usize },
        131268usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(nocreate3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).nocreate4 as *const _ as usize },
        131270usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(nocreate4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).override_confirmation as *const _ as usize
        },
        131272usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(override_confirmation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).viz_array as *const _ as usize },
        131280usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(viz_array)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).viz_rmin as *const _ as usize },
        131288usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(viz_rmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).viz_rmax as *const _ as usize },
        131296usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(viz_rmax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).vision_full_recalc as *const _ as usize
        },
        131304usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(vision_full_recalc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).propellor as *const _ as usize },
        131312usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(propellor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).last_winchoice as *const _ as usize },
        131320usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(last_winchoice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).poly_zapped as *const _ as usize },
        131328usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(poly_zapped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).obj_zapped as *const _ as usize },
        131332usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(obj_zapped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).lua_ver as *const _ as usize },
        131333usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(lua_ver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).lua_copyright as *const _ as usize },
        131353usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(lua_copyright)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_globals>())).glyphmap_perlevel_flags as *const _
                as usize
        },
        131476usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(glyphmap_perlevel_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_globals>())).magic as *const _ as usize },
        131480usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_globals),
            "::",
            stringify!(magic)
        )
    );
}
extern "C" {
    pub static mut g: instance_globals;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct const_globals {
    pub zeroobj: obj,
    pub zeromonst: monst,
    pub zeroany: anything,
}
#[test]
fn bindgen_test_layout_const_globals() {
    assert_eq!(
        ::std::mem::size_of::<const_globals>(),
        240usize,
        concat!("Size of: ", stringify!(const_globals))
    );
    assert_eq!(
        ::std::mem::align_of::<const_globals>(),
        8usize,
        concat!("Alignment of ", stringify!(const_globals))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<const_globals>())).zeroobj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(const_globals),
            "::",
            stringify!(zeroobj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<const_globals>())).zeromonst as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(const_globals),
            "::",
            stringify!(zeromonst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<const_globals>())).zeroany as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(const_globals),
            "::",
            stringify!(zeroany)
        )
    );
}
extern "C" {
    pub static cg: const_globals;
}
extern "C" {
    pub static nul_glyphinfo: glyph_info;
}
pub type timeout_proc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut any, arg2: ::std::os::raw::c_long)>;
pub const timer_type_TIMER_LEVEL: timer_type = 0;
pub const timer_type_TIMER_GLOBAL: timer_type = 1;
pub const timer_type_TIMER_OBJECT: timer_type = 2;
pub const timer_type_TIMER_MONSTER: timer_type = 3;
pub const timer_type_NUM_TIMER_KINDS: timer_type = 4;
pub type timer_type = ::std::os::raw::c_int;
pub const timeout_types_ROT_ORGANIC: timeout_types = 0;
pub const timeout_types_ROT_CORPSE: timeout_types = 1;
pub const timeout_types_REVIVE_MON: timeout_types = 2;
pub const timeout_types_ZOMBIFY_MON: timeout_types = 3;
pub const timeout_types_BURN_OBJECT: timeout_types = 4;
pub const timeout_types_HATCH_EGG: timeout_types = 5;
pub const timeout_types_FIG_TRANSFORM: timeout_types = 6;
pub const timeout_types_MELT_ICE_AWAY: timeout_types = 7;
pub const timeout_types_NUM_TIME_FUNCS: timeout_types = 8;
pub type timeout_types = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fe {
    pub next: *mut fe,
    pub timeout: ::std::os::raw::c_long,
    pub tid: ::std::os::raw::c_ulong,
    pub kind: ::std::os::raw::c_short,
    pub func_index: ::std::os::raw::c_short,
    pub arg: anything,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 7usize],
}
#[test]
fn bindgen_test_layout_fe() {
    assert_eq!(
        ::std::mem::size_of::<fe>(),
        40usize,
        concat!("Size of: ", stringify!(fe))
    );
    assert_eq!(
        ::std::mem::align_of::<fe>(),
        8usize,
        concat!("Alignment of ", stringify!(fe))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fe>())).next as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(fe), "::", stringify!(next))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fe>())).timeout as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fe),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fe>())).tid as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(fe), "::", stringify!(tid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fe>())).kind as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(fe), "::", stringify!(kind))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fe>())).func_index as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(fe),
            "::",
            stringify!(func_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fe>())).arg as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(fe), "::", stringify!(arg))
    );
}
impl fe {
    #[inline]
    pub fn needs_fixup(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_needs_fixup(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        needs_fixup: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let needs_fixup: u32 = unsafe { ::std::mem::transmute(needs_fixup) };
            needs_fixup as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type timer_element = fe;
pub const bhit_call_types_ZAPPED_WAND: bhit_call_types = 0;
pub const bhit_call_types_THROWN_WEAPON: bhit_call_types = 1;
pub const bhit_call_types_THROWN_TETHERED_WEAPON: bhit_call_types = 2;
pub const bhit_call_types_KICKED_WEAPON: bhit_call_types = 3;
pub const bhit_call_types_FLASHED_LIGHT: bhit_call_types = 4;
pub const bhit_call_types_INVIS_BEAM: bhit_call_types = 5;
pub type bhit_call_types = ::std::os::raw::c_int;
pub const hmon_atkmode_types_HMON_MELEE: hmon_atkmode_types = 0;
pub const hmon_atkmode_types_HMON_THROWN: hmon_atkmode_types = 1;
pub const hmon_atkmode_types_HMON_KICKED: hmon_atkmode_types = 2;
pub const hmon_atkmode_types_HMON_APPLIED: hmon_atkmode_types = 3;
pub const hmon_atkmode_types_HMON_DRAGGED: hmon_atkmode_types = 4;
pub type hmon_atkmode_types = ::std::os::raw::c_int;
pub const saveformats_invalid: saveformats = 0;
pub const saveformats_historical: saveformats = 1;
pub const saveformats_lendian: saveformats = 2;
pub const saveformats_ascii: saveformats = 3;
pub type saveformats = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sortloot_item {
    pub obj: *mut obj,
    pub str_: *mut ::std::os::raw::c_char,
    pub indx: ::std::os::raw::c_int,
    pub orderclass: xchar,
    pub subclass: xchar,
    pub disco: xchar,
}
#[test]
fn bindgen_test_layout_sortloot_item() {
    assert_eq!(
        ::std::mem::size_of::<sortloot_item>(),
        24usize,
        concat!("Size of: ", stringify!(sortloot_item))
    );
    assert_eq!(
        ::std::mem::align_of::<sortloot_item>(),
        8usize,
        concat!("Alignment of ", stringify!(sortloot_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sortloot_item>())).obj as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sortloot_item),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sortloot_item>())).str_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sortloot_item),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sortloot_item>())).indx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sortloot_item),
            "::",
            stringify!(indx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sortloot_item>())).orderclass as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sortloot_item),
            "::",
            stringify!(orderclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sortloot_item>())).subclass as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(sortloot_item),
            "::",
            stringify!(subclass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sortloot_item>())).disco as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(sortloot_item),
            "::",
            stringify!(disco)
        )
    );
}
pub type Loot = sortloot_item;
#[repr(C)]
#[derive(Copy, Clone)]
pub union vlaunchinfo {
    pub v_launch_otyp: ::std::os::raw::c_short,
    pub v_launch2: coord,
    pub v_conjoined: uchar,
    pub v_tnote: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_vlaunchinfo() {
    assert_eq!(
        ::std::mem::size_of::<vlaunchinfo>(),
        2usize,
        concat!("Size of: ", stringify!(vlaunchinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<vlaunchinfo>(),
        2usize,
        concat!("Alignment of ", stringify!(vlaunchinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vlaunchinfo>())).v_launch_otyp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vlaunchinfo),
            "::",
            stringify!(v_launch_otyp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vlaunchinfo>())).v_launch2 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vlaunchinfo),
            "::",
            stringify!(v_launch2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vlaunchinfo>())).v_conjoined as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vlaunchinfo),
            "::",
            stringify!(v_conjoined)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<vlaunchinfo>())).v_tnote as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(vlaunchinfo),
            "::",
            stringify!(v_tnote)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct trap {
    pub ntrap: *mut trap,
    pub tx: xchar,
    pub ty: xchar,
    pub dst: d_level,
    pub launch: coord,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u16; 2usize],
    pub vl: vlaunchinfo,
}
#[test]
fn bindgen_test_layout_trap() {
    assert_eq!(
        ::std::mem::size_of::<trap>(),
        24usize,
        concat!("Size of: ", stringify!(trap))
    );
    assert_eq!(
        ::std::mem::align_of::<trap>(),
        8usize,
        concat!("Alignment of ", stringify!(trap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trap>())).ntrap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(trap),
            "::",
            stringify!(ntrap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trap>())).tx as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(trap), "::", stringify!(tx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trap>())).ty as *const _ as usize },
        9usize,
        concat!("Offset of field: ", stringify!(trap), "::", stringify!(ty))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trap>())).dst as *const _ as usize },
        10usize,
        concat!("Offset of field: ", stringify!(trap), "::", stringify!(dst))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trap>())).launch as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(trap),
            "::",
            stringify!(launch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<trap>())).vl as *const _ as usize },
        20usize,
        concat!("Offset of field: ", stringify!(trap), "::", stringify!(vl))
    );
}
impl trap {
    #[inline]
    pub fn ttyp(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_ttyp(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn tseen(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tseen(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn once(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_once(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn madeby_u(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_madeby_u(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ttyp: ::std::os::raw::c_uint,
        tseen: ::std::os::raw::c_uint,
        once: ::std::os::raw::c_uint,
        madeby_u: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let ttyp: u32 = unsafe { ::std::mem::transmute(ttyp) };
            ttyp as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let tseen: u32 = unsafe { ::std::mem::transmute(tseen) };
            tseen as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let once: u32 = unsafe { ::std::mem::transmute(once) };
            once as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let madeby_u: u32 = unsafe { ::std::mem::transmute(madeby_u) };
            madeby_u as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const trap_types_NO_TRAP: trap_types = 0;
pub const trap_types_ARROW_TRAP: trap_types = 1;
pub const trap_types_DART_TRAP: trap_types = 2;
pub const trap_types_ROCKTRAP: trap_types = 3;
pub const trap_types_SQKY_BOARD: trap_types = 4;
pub const trap_types_BEAR_TRAP: trap_types = 5;
pub const trap_types_LANDMINE: trap_types = 6;
pub const trap_types_ROLLING_BOULDER_TRAP: trap_types = 7;
pub const trap_types_SLP_GAS_TRAP: trap_types = 8;
pub const trap_types_RUST_TRAP: trap_types = 9;
pub const trap_types_FIRE_TRAP: trap_types = 10;
pub const trap_types_PIT: trap_types = 11;
pub const trap_types_SPIKED_PIT: trap_types = 12;
pub const trap_types_HOLE: trap_types = 13;
pub const trap_types_TRAPDOOR: trap_types = 14;
pub const trap_types_TELEP_TRAP: trap_types = 15;
pub const trap_types_LEVEL_TELEP: trap_types = 16;
pub const trap_types_MAGIC_PORTAL: trap_types = 17;
pub const trap_types_WEB: trap_types = 18;
pub const trap_types_STATUE_TRAP: trap_types = 19;
pub const trap_types_MAGIC_TRAP: trap_types = 20;
pub const trap_types_ANTI_MAGIC: trap_types = 21;
pub const trap_types_POLY_TRAP: trap_types = 22;
pub const trap_types_VIBRATING_SQUARE: trap_types = 23;
pub const trap_types_TRAPNUM: trap_types = 24;
pub type trap_types = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flag {
    pub acoustics: boolean,
    pub autodig: boolean,
    pub autoquiver: boolean,
    pub autoopen: boolean,
    pub autounlock: boolean,
    pub beginner: boolean,
    pub biff: boolean,
    pub bones: boolean,
    pub confirm: boolean,
    pub dark_room: boolean,
    pub debug: boolean,
    pub end_own: boolean,
    pub explore: boolean,
    pub female: boolean,
    pub friday13: boolean,
    pub goldX: boolean,
    pub help: boolean,
    pub ignintr: boolean,
    pub implicit_uncursed: boolean,
    pub ins_chkpt: boolean,
    pub invlet_constant: boolean,
    pub legacy: boolean,
    pub lit_corridor: boolean,
    pub mention_decor: boolean,
    pub mention_walls: boolean,
    pub nap: boolean,
    pub null: boolean,
    pub pickup: boolean,
    pub pickup_thrown: boolean,
    pub pushweapon: boolean,
    pub quick_farsight: boolean,
    pub rest_on_space: boolean,
    pub safe_dog: boolean,
    pub safe_wait: boolean,
    pub showexp: boolean,
    pub showscore: boolean,
    pub silent: boolean,
    pub sortpack: boolean,
    pub sparkle: boolean,
    pub standout: boolean,
    pub time: boolean,
    pub tombstone: boolean,
    pub verbose: boolean,
    pub end_top: ::std::os::raw::c_int,
    pub end_around: ::std::os::raw::c_int,
    pub moonphase: ::std::os::raw::c_uint,
    pub suppress_alert: ::std::os::raw::c_ulong,
    pub paranoia_bits: ::std::os::raw::c_uint,
    pub pickup_burden: ::std::os::raw::c_int,
    pub pile_limit: ::std::os::raw::c_int,
    pub discosort: ::std::os::raw::c_char,
    pub sortloot: ::std::os::raw::c_char,
    pub inv_order: [::std::os::raw::c_char; 18usize],
    pub pickup_types: [::std::os::raw::c_char; 18usize],
    pub end_disclose: [::std::os::raw::c_char; 7usize],
    pub menu_style: ::std::os::raw::c_char,
    pub made_fruit: boolean,
    pub initrole: ::std::os::raw::c_int,
    pub initrace: ::std::os::raw::c_int,
    pub initgend: ::std::os::raw::c_int,
    pub initalign: ::std::os::raw::c_int,
    pub randomall: ::std::os::raw::c_int,
    pub pantheon: ::std::os::raw::c_int,
    pub lootabc: boolean,
    pub showrace: boolean,
    pub travelcmd: boolean,
    pub runmode: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_flag() {
    assert_eq!(
        ::std::mem::size_of::<flag>(),
        152usize,
        concat!("Size of: ", stringify!(flag))
    );
    assert_eq!(
        ::std::mem::align_of::<flag>(),
        4usize,
        concat!("Alignment of ", stringify!(flag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).acoustics as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(acoustics)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).autodig as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(autodig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).autoquiver as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(autoquiver)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).autoopen as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(autoopen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).autounlock as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(autounlock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).beginner as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(beginner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).biff as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(biff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).bones as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(bones)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).confirm as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(confirm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).dark_room as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(dark_room)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).debug as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(debug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).end_own as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(end_own)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).explore as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(explore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).female as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(female)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).friday13 as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(friday13)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).goldX as *const _ as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(goldX)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).help as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(help)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).ignintr as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(ignintr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).implicit_uncursed as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(implicit_uncursed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).ins_chkpt as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(ins_chkpt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).invlet_constant as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(invlet_constant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).legacy as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(legacy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).lit_corridor as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(lit_corridor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).mention_decor as *const _ as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(mention_decor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).mention_walls as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(mention_walls)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).nap as *const _ as usize },
        25usize,
        concat!("Offset of field: ", stringify!(flag), "::", stringify!(nap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).null as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(null)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).pickup as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(pickup)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).pickup_thrown as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(pickup_thrown)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).pushweapon as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(pushweapon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).quick_farsight as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(quick_farsight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).rest_on_space as *const _ as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(rest_on_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).safe_dog as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(safe_dog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).safe_wait as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(safe_wait)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).showexp as *const _ as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(showexp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).showscore as *const _ as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(showscore)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).silent as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(silent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).sortpack as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(sortpack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).sparkle as *const _ as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(sparkle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).standout as *const _ as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(standout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).time as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).tombstone as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(tombstone)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).verbose as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(verbose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).end_top as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(end_top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).end_around as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(end_around)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).moonphase as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(moonphase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).suppress_alert as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(suppress_alert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).paranoia_bits as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(paranoia_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).pickup_burden as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(pickup_burden)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).pile_limit as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(pile_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).discosort as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(discosort)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).sortloot as *const _ as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(sortloot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).inv_order as *const _ as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(inv_order)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).pickup_types as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(pickup_types)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).end_disclose as *const _ as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(end_disclose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).menu_style as *const _ as usize },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(menu_style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).made_fruit as *const _ as usize },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(made_fruit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).initrole as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(initrole)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).initrace as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(initrace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).initgend as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(initgend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).initalign as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(initalign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).randomall as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(randomall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).pantheon as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(pantheon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).lootabc as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(lootabc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).showrace as *const _ as usize },
        145usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(showrace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).travelcmd as *const _ as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(travelcmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flag>())).runmode as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(flag),
            "::",
            stringify!(runmode)
        )
    );
}
pub const getloc_filters_GFILTER_NONE: getloc_filters = 0;
pub const getloc_filters_GFILTER_VIEW: getloc_filters = 1;
pub const getloc_filters_GFILTER_AREA: getloc_filters = 2;
pub const getloc_filters_NUM_GFILTER: getloc_filters = 3;
pub type getloc_filters = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct debug_flags {
    pub test: boolean,
    pub ttystatus: boolean,
    pub immediateflips: boolean,
}
#[test]
fn bindgen_test_layout_debug_flags() {
    assert_eq!(
        ::std::mem::size_of::<debug_flags>(),
        3usize,
        concat!("Size of: ", stringify!(debug_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<debug_flags>(),
        1usize,
        concat!("Alignment of ", stringify!(debug_flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<debug_flags>())).test as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(debug_flags),
            "::",
            stringify!(test)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<debug_flags>())).ttystatus as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(debug_flags),
            "::",
            stringify!(ttystatus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<debug_flags>())).immediateflips as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(debug_flags),
            "::",
            stringify!(immediateflips)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct instance_flags {
    pub debug_fuzzer: boolean,
    pub in_lua: boolean,
    pub defer_plname: boolean,
    pub herecmd_menu: boolean,
    pub invis_goldsym: boolean,
    pub sad_feeling: boolean,
    pub at_midnight: ::std::os::raw::c_int,
    pub at_night: ::std::os::raw::c_int,
    pub failing_untrap: ::std::os::raw::c_int,
    pub in_lava_effects: ::std::os::raw::c_int,
    pub last_msg: ::std::os::raw::c_int,
    pub override_ID: ::std::os::raw::c_int,
    pub parse_config_file_src: ::std::os::raw::c_int,
    pub purge_monsters: ::std::os::raw::c_int,
    pub suppress_price: ::std::os::raw::c_int,
    pub terrainmode: ::std::os::raw::c_int,
    pub getloc_travelmode: boolean,
    pub getloc_filter: ::std::os::raw::c_int,
    pub getloc_usemenu: boolean,
    pub getloc_moveskip: boolean,
    pub travelcc: coord,
    pub trav_debug: boolean,
    pub window_inited: boolean,
    pub vision_inited: boolean,
    pub sanity_check: boolean,
    pub mon_polycontrol: boolean,
    pub in_dumplog: boolean,
    pub in_parse: boolean,
    pub initoptions_noterminate: boolean,
    pub msg_history: ::std::os::raw::c_uint,
    pub getpos_coords: ::std::os::raw::c_int,
    pub menuinvertmode: ::std::os::raw::c_int,
    pub menu_headings: ::std::os::raw::c_int,
    pub autodescribe: boolean,
    pub cbreak: boolean,
    pub deferred_X: boolean,
    pub defer_decor: boolean,
    pub echo: boolean,
    pub force_invmenu: boolean,
    pub hilite_pile: boolean,
    pub menu_head_objsym: boolean,
    pub menu_overlay: boolean,
    pub menu_requested: boolean,
    pub menu_tab_sep: boolean,
    pub news: boolean,
    pub num_pad: boolean,
    pub perm_invent: boolean,
    pub renameallowed: boolean,
    pub renameinprogress: boolean,
    pub status_updates: boolean,
    pub toptenwin: boolean,
    pub tux_penalty: boolean,
    pub use_background_glyph: boolean,
    pub use_menu_color: boolean,
    pub hilite_delta: ::std::os::raw::c_long,
    pub unhilite_deadline: ::std::os::raw::c_long,
    pub zerocomp: boolean,
    pub rlecomp: boolean,
    pub prev_decor: schar,
    pub num_pad_mode: uchar,
    pub bouldersym: uchar,
    pub prevmsg_window: ::std::os::raw::c_char,
    pub extmenu: boolean,
    pub rawio: boolean,
    pub hassound: boolean,
    pub usesound: boolean,
    pub usepcspeaker: boolean,
    pub tile_view: boolean,
    pub over_view: boolean,
    pub traditional_view: boolean,
    pub lan_mail: boolean,
    pub lan_mail_fetched: boolean,
    pub vt_sounddata: boolean,
    pub clicklook: boolean,
    pub cmdassist: boolean,
    pub time_botl: boolean,
    pub wizweight: boolean,
    pub wizmgender: boolean,
    pub wc_color: boolean,
    pub wc_hilite_pet: boolean,
    pub wc_ascii_map: boolean,
    pub wc_tiled_map: boolean,
    pub wc_preload_tiles: boolean,
    pub wc_tile_width: ::std::os::raw::c_int,
    pub wc_tile_height: ::std::os::raw::c_int,
    pub wc_tile_file: *mut ::std::os::raw::c_char,
    pub wc_inverse: boolean,
    pub wc_align_status: ::std::os::raw::c_int,
    pub wc_align_message: ::std::os::raw::c_int,
    pub wc_vary_msgcount: ::std::os::raw::c_int,
    pub wc_foregrnd_menu: *mut ::std::os::raw::c_char,
    pub wc_backgrnd_menu: *mut ::std::os::raw::c_char,
    pub wc_foregrnd_message: *mut ::std::os::raw::c_char,
    pub wc_backgrnd_message: *mut ::std::os::raw::c_char,
    pub wc_foregrnd_status: *mut ::std::os::raw::c_char,
    pub wc_backgrnd_status: *mut ::std::os::raw::c_char,
    pub wc_foregrnd_text: *mut ::std::os::raw::c_char,
    pub wc_backgrnd_text: *mut ::std::os::raw::c_char,
    pub wc_font_map: *mut ::std::os::raw::c_char,
    pub wc_font_message: *mut ::std::os::raw::c_char,
    pub wc_font_status: *mut ::std::os::raw::c_char,
    pub wc_font_menu: *mut ::std::os::raw::c_char,
    pub wc_font_text: *mut ::std::os::raw::c_char,
    pub wc_fontsiz_map: ::std::os::raw::c_int,
    pub wc_fontsiz_message: ::std::os::raw::c_int,
    pub wc_fontsiz_status: ::std::os::raw::c_int,
    pub wc_fontsiz_menu: ::std::os::raw::c_int,
    pub wc_fontsiz_text: ::std::os::raw::c_int,
    pub wc_scroll_amount: ::std::os::raw::c_int,
    pub wc_scroll_margin: ::std::os::raw::c_int,
    pub wc_map_mode: ::std::os::raw::c_int,
    pub wc_player_selection: ::std::os::raw::c_int,
    pub wc_splash_screen: boolean,
    pub wc_popup_dialog: boolean,
    pub wc_eight_bit_input: boolean,
    pub wc2_fullscreen: boolean,
    pub wc2_softkeyboard: boolean,
    pub wc2_wraptext: boolean,
    pub wc2_selectsaved: boolean,
    pub wc2_darkgray: boolean,
    pub wc2_hitpointbar: boolean,
    pub wc2_guicolor: boolean,
    pub wc_mouse_support: ::std::os::raw::c_int,
    pub wc2_term_cols: ::std::os::raw::c_int,
    pub wc2_term_rows: ::std::os::raw::c_int,
    pub wc2_statuslines: ::std::os::raw::c_int,
    pub wc2_windowborders: ::std::os::raw::c_int,
    pub wc2_petattr: ::std::os::raw::c_int,
    pub altkeyhandler: [::std::os::raw::c_char; 25usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 6usize],
    pub debug: debug_flags,
    pub windowtype_locked: boolean,
    pub windowtype_deferred: boolean,
    pub returning_missile: genericptr_t,
    pub obsolete: boolean,
}
#[test]
fn bindgen_test_layout_instance_flags() {
    assert_eq!(
        ::std::mem::size_of::<instance_flags>(),
        408usize,
        concat!("Size of: ", stringify!(instance_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<instance_flags>(),
        8usize,
        concat!("Alignment of ", stringify!(instance_flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).debug_fuzzer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(debug_fuzzer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).in_lua as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(in_lua)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).defer_plname as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(defer_plname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).herecmd_menu as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(herecmd_menu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).invis_goldsym as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(invis_goldsym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).sad_feeling as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(sad_feeling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).at_midnight as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(at_midnight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).at_night as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(at_night)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).failing_untrap as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(failing_untrap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).in_lava_effects as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(in_lava_effects)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).last_msg as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(last_msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).override_ID as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(override_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_flags>())).parse_config_file_src as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(parse_config_file_src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).purge_monsters as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(purge_monsters)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).suppress_price as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(suppress_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).terrainmode as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(terrainmode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_flags>())).getloc_travelmode as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(getloc_travelmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).getloc_filter as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(getloc_filter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).getloc_usemenu as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(getloc_usemenu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).getloc_moveskip as *const _ as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(getloc_moveskip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).travelcc as *const _ as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(travelcc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).trav_debug as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(trav_debug)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).window_inited as *const _ as usize },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(window_inited)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).vision_inited as *const _ as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(vision_inited)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).sanity_check as *const _ as usize },
        63usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(sanity_check)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).mon_polycontrol as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(mon_polycontrol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).in_dumplog as *const _ as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(in_dumplog)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).in_parse as *const _ as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(in_parse)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_flags>())).initoptions_noterminate as *const _ as usize
        },
        67usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(initoptions_noterminate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).msg_history as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(msg_history)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).getpos_coords as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(getpos_coords)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).menuinvertmode as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(menuinvertmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).menu_headings as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(menu_headings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).autodescribe as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(autodescribe)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).cbreak as *const _ as usize },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(cbreak)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).deferred_X as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(deferred_X)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).defer_decor as *const _ as usize },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(defer_decor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).echo as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(echo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).force_invmenu as *const _ as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(force_invmenu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).hilite_pile as *const _ as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(hilite_pile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).menu_head_objsym as *const _ as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(menu_head_objsym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).menu_overlay as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(menu_overlay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).menu_requested as *const _ as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(menu_requested)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).menu_tab_sep as *const _ as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(menu_tab_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).news as *const _ as usize },
        95usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(news)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).num_pad as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(num_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).perm_invent as *const _ as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(perm_invent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).renameallowed as *const _ as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(renameallowed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).renameinprogress as *const _ as usize },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(renameinprogress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).status_updates as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(status_updates)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).toptenwin as *const _ as usize },
        101usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(toptenwin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).tux_penalty as *const _ as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(tux_penalty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_flags>())).use_background_glyph as *const _ as usize
        },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(use_background_glyph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).use_menu_color as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(use_menu_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).hilite_delta as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(hilite_delta)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_flags>())).unhilite_deadline as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(unhilite_deadline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).zerocomp as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(zerocomp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).rlecomp as *const _ as usize },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(rlecomp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).prev_decor as *const _ as usize },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(prev_decor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).num_pad_mode as *const _ as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(num_pad_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).bouldersym as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(bouldersym)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).prevmsg_window as *const _ as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(prevmsg_window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).extmenu as *const _ as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(extmenu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).rawio as *const _ as usize },
        123usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(rawio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).hassound as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(hassound)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).usesound as *const _ as usize },
        125usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(usesound)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).usepcspeaker as *const _ as usize },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(usepcspeaker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).tile_view as *const _ as usize },
        127usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(tile_view)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).over_view as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(over_view)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).traditional_view as *const _ as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(traditional_view)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).lan_mail as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(lan_mail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).lan_mail_fetched as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(lan_mail_fetched)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).vt_sounddata as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(vt_sounddata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).clicklook as *const _ as usize },
        133usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(clicklook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).cmdassist as *const _ as usize },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(cmdassist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).time_botl as *const _ as usize },
        135usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(time_botl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wizweight as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wizweight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wizmgender as *const _ as usize },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wizmgender)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_color as *const _ as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_hilite_pet as *const _ as usize },
        139usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_hilite_pet)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_ascii_map as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_ascii_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_tiled_map as *const _ as usize },
        141usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_tiled_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_preload_tiles as *const _ as usize },
        142usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_preload_tiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_tile_width as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_tile_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_tile_height as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_tile_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_tile_file as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_tile_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_inverse as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_inverse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_align_status as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_align_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_align_message as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_align_message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_vary_msgcount as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_vary_msgcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_foregrnd_menu as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_foregrnd_menu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_backgrnd_menu as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_backgrnd_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_flags>())).wc_foregrnd_message as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_foregrnd_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_flags>())).wc_backgrnd_message as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_backgrnd_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_flags>())).wc_foregrnd_status as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_foregrnd_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_flags>())).wc_backgrnd_status as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_backgrnd_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_foregrnd_text as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_foregrnd_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_backgrnd_text as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_backgrnd_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_font_map as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_font_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_font_message as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_font_message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_font_status as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_font_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_font_menu as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_font_menu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_font_text as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_font_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_fontsiz_map as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_fontsiz_map)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_flags>())).wc_fontsiz_message as *const _ as usize
        },
        284usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_fontsiz_message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_flags>())).wc_fontsiz_status as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_fontsiz_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_fontsiz_menu as *const _ as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_fontsiz_menu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_fontsiz_text as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_fontsiz_text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_scroll_amount as *const _ as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_scroll_amount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_scroll_margin as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_scroll_margin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_map_mode as *const _ as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_map_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_flags>())).wc_player_selection as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_player_selection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_splash_screen as *const _ as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_splash_screen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_popup_dialog as *const _ as usize },
        317usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_popup_dialog)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_flags>())).wc_eight_bit_input as *const _ as usize
        },
        318usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_eight_bit_input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc2_fullscreen as *const _ as usize },
        319usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc2_fullscreen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc2_softkeyboard as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc2_softkeyboard)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc2_wraptext as *const _ as usize },
        321usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc2_wraptext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc2_selectsaved as *const _ as usize },
        322usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc2_selectsaved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc2_darkgray as *const _ as usize },
        323usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc2_darkgray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc2_hitpointbar as *const _ as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc2_hitpointbar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc2_guicolor as *const _ as usize },
        325usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc2_guicolor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc_mouse_support as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc_mouse_support)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc2_term_cols as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc2_term_cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc2_term_rows as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc2_term_rows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc2_statuslines as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc2_statuslines)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_flags>())).wc2_windowborders as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc2_windowborders)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).wc2_petattr as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(wc2_petattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).altkeyhandler as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(altkeyhandler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).debug as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(debug)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_flags>())).windowtype_locked as *const _ as usize
        },
        387usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(windowtype_locked)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_flags>())).windowtype_deferred as *const _ as usize
        },
        388usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(windowtype_deferred)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<instance_flags>())).returning_missile as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(returning_missile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<instance_flags>())).obsolete as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(instance_flags),
            "::",
            stringify!(obsolete)
        )
    );
}
impl instance_flags {
    #[inline]
    pub fn save_uswallow(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_save_uswallow(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn save_uinwater(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_save_uinwater(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn save_uburied(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_save_uburied(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        save_uswallow: ::std::os::raw::c_uint,
        save_uinwater: ::std::os::raw::c_uint,
        save_uburied: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let save_uswallow: u32 = unsafe { ::std::mem::transmute(save_uswallow) };
            save_uswallow as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let save_uinwater: u32 = unsafe { ::std::mem::transmute(save_uinwater) };
            save_uinwater as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let save_uburied: u32 = unsafe { ::std::mem::transmute(save_uburied) };
            save_uburied as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub static mut iflags: instance_flags;
}
pub const plnmsg_types_PLNMSG_UNKNOWN: plnmsg_types = 0;
pub const plnmsg_types_PLNMSG_ONE_ITEM_HERE: plnmsg_types = 1;
pub const plnmsg_types_PLNMSG_TOWER_OF_FLAME: plnmsg_types = 2;
pub const plnmsg_types_PLNMSG_CAUGHT_IN_EXPLOSION: plnmsg_types = 3;
pub const plnmsg_types_PLNMSG_OBJ_GLOWS: plnmsg_types = 4;
pub const plnmsg_types_PLNMSG_OBJNAM_ONLY: plnmsg_types = 5;
pub const plnmsg_types_PLNMSG_OK_DONT_DIE: plnmsg_types = 6;
pub const plnmsg_types_PLNMSG_BACK_ON_GROUND: plnmsg_types = 7;
pub const plnmsg_types_PLNMSG_GROWL: plnmsg_types = 8;
pub const plnmsg_types_PLNMSG_enum: plnmsg_types = 9;
pub type plnmsg_types = ::std::os::raw::c_int;
pub const runmode_types_RUN_TPORT: runmode_types = 0;
pub const runmode_types_RUN_LEAP: runmode_types = 1;
pub const runmode_types_RUN_STEP: runmode_types = 2;
pub const runmode_types_RUN_CRAWL: runmode_types = 3;
pub type runmode_types = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ext_func_tab {
    _unused: [u8; 0],
}
pub const gloctypes_GLOC_MONS: gloctypes = 0;
pub const gloctypes_GLOC_OBJS: gloctypes = 1;
pub const gloctypes_GLOC_DOOR: gloctypes = 2;
pub const gloctypes_GLOC_EXPLORE: gloctypes = 3;
pub const gloctypes_GLOC_INTERESTING: gloctypes = 4;
pub const gloctypes_GLOC_VALID: gloctypes = 5;
pub const gloctypes_NUM_GLOCS: gloctypes = 6;
pub type gloctypes = ::std::os::raw::c_int;
pub const explosion_types_EXPL_DARK: explosion_types = 0;
pub const explosion_types_EXPL_NOXIOUS: explosion_types = 1;
pub const explosion_types_EXPL_MUDDY: explosion_types = 2;
pub const explosion_types_EXPL_WET: explosion_types = 3;
pub const explosion_types_EXPL_MAGICAL: explosion_types = 4;
pub const explosion_types_EXPL_FIERY: explosion_types = 5;
pub const explosion_types_EXPL_FROSTY: explosion_types = 6;
pub const explosion_types_EXPL_MAX: explosion_types = 7;
pub type explosion_types = ::std::os::raw::c_int;
extern "C" {
    pub fn fmt_ptr(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn moveloop(arg1: boolean);
}
extern "C" {
    pub fn stop_occupation();
}
extern "C" {
    pub fn display_gamewindows();
}
extern "C" {
    pub fn newgame();
}
extern "C" {
    pub fn welcome(arg1: boolean);
}
extern "C" {
    pub fn get_realtime() -> time_t;
}
extern "C" {
    pub fn argcheck(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: earlyarg,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn early_init();
}
extern "C" {
    pub fn doapply() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dorub() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dojump() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jump(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn number_leashed() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn o_unleash(arg1: *mut obj);
}
extern "C" {
    pub fn m_unleash(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn unleash_all();
}
extern "C" {
    pub fn leashable(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn next_to_u() -> boolean;
}
extern "C" {
    pub fn get_mleash(arg1: *mut monst) -> *mut obj;
}
extern "C" {
    pub fn beautiful() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn check_leash(arg1: xchar, arg2: xchar);
}
extern "C" {
    pub fn um_dist(arg1: xchar, arg2: xchar, arg3: xchar) -> boolean;
}
extern "C" {
    pub fn snuff_candle(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn snuff_lit(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn splash_lit(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn catch_lit(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn use_unicorn_horn(arg1: *mut *mut obj);
}
extern "C" {
    pub fn tinnable(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn reset_trapset();
}
extern "C" {
    pub fn fig_transform(arg1: *mut any, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn unfixable_trouble_count(arg1: boolean) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_artifacts();
}
extern "C" {
    pub fn save_artifacts(arg1: *mut NHFILE);
}
extern "C" {
    pub fn restore_artifacts(arg1: *mut NHFILE);
}
extern "C" {
    pub fn artiname(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mk_artifact(arg1: *mut obj, arg2: aligntyp) -> *mut obj;
}
extern "C" {
    pub fn artifact_name(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_short,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn exist_artifact(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn artifact_exists(arg1: *mut obj, arg2: *const ::std::os::raw::c_char, arg3: boolean);
}
extern "C" {
    pub fn nartifact_exist() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arti_immune(arg1: *mut obj, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn spec_ability(arg1: *mut obj, arg2: ::std::os::raw::c_ulong) -> boolean;
}
extern "C" {
    pub fn confers_luck(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn arti_reflects(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn shade_glare(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn restrict_name(arg1: *mut obj, arg2: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn defends(arg1: ::std::os::raw::c_int, arg2: *mut obj) -> boolean;
}
extern "C" {
    pub fn defends_when_carried(arg1: ::std::os::raw::c_int, arg2: *mut obj) -> boolean;
}
extern "C" {
    pub fn protects(arg1: *mut obj, arg2: boolean) -> boolean;
}
extern "C" {
    pub fn set_artifact_intrinsic(arg1: *mut obj, arg2: boolean, arg3: ::std::os::raw::c_long);
}
extern "C" {
    pub fn touch_artifact(arg1: *mut obj, arg2: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spec_abon(arg1: *mut obj, arg2: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spec_dbon(
        arg1: *mut obj,
        arg2: *mut monst,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn discover_artifact(arg1: xchar);
}
extern "C" {
    pub fn undiscovered_artifact(arg1: xchar) -> boolean;
}
extern "C" {
    pub fn disp_artifact_discoveries(arg1: winid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn artifact_hit(
        arg1: *mut monst,
        arg2: *mut monst,
        arg3: *mut obj,
        arg4: *mut ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn doinvoke() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finesse_ahriman(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn arti_speak(arg1: *mut obj);
}
extern "C" {
    pub fn artifact_light(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn spec_m2(arg1: *mut obj) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn artifact_has_invprop(arg1: *mut obj, arg2: uchar) -> boolean;
}
extern "C" {
    pub fn arti_cost(arg1: *mut obj) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn what_gives(arg1: *mut ::std::os::raw::c_long) -> *mut obj;
}
extern "C" {
    pub fn glow_color(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn glow_verb(arg1: ::std::os::raw::c_int, arg2: boolean) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Sting_effects(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn retouch_object(arg1: *mut *mut obj, arg2: boolean) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn retouch_equipment(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mkot_trap_warn();
}
extern "C" {
    pub fn is_magic_key(arg1: *mut monst, arg2: *mut obj) -> boolean;
}
extern "C" {
    pub fn has_magic_key(arg1: *mut monst) -> *mut obj;
}
extern "C" {
    pub fn adjattrib(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn gainstr(arg1: *mut obj, arg2: ::std::os::raw::c_int, arg3: boolean);
}
extern "C" {
    pub fn losestr(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn poisontell(arg1: ::std::os::raw::c_int, arg2: boolean);
}
extern "C" {
    pub fn poisoned(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: boolean,
    );
}
extern "C" {
    pub fn change_luck(arg1: schar);
}
extern "C" {
    pub fn stone_luck(arg1: boolean) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_moreluck();
}
extern "C" {
    pub fn restore_attrib();
}
extern "C" {
    pub fn exercise(arg1: ::std::os::raw::c_int, arg2: boolean);
}
extern "C" {
    pub fn exerchk();
}
extern "C" {
    pub fn init_attr(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn redist_attr();
}
extern "C" {
    pub fn adjabil(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newhp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acurr(arg1: ::std::os::raw::c_int) -> schar;
}
extern "C" {
    pub fn acurrstr() -> schar;
}
extern "C" {
    pub fn extremeattr(arg1: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn adjalign(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn is_innate(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn from_what(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn uchangealign(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ballrelease(arg1: boolean);
}
extern "C" {
    pub fn ballfall();
}
extern "C" {
    pub fn placebc();
}
extern "C" {
    pub fn unplacebc();
}
extern "C" {
    pub fn unplacebc_and_covet_placebc() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lift_covet_and_placebc(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_bc(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn move_bc(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: xchar,
        arg4: xchar,
        arg5: xchar,
        arg6: xchar,
    );
}
extern "C" {
    pub fn drag_ball(
        arg1: xchar,
        arg2: xchar,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut xchar,
        arg5: *mut xchar,
        arg6: *mut xchar,
        arg7: *mut xchar,
        arg8: *mut boolean,
        arg9: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn drop_ball(arg1: xchar, arg2: xchar);
}
extern "C" {
    pub fn drag_down();
}
extern "C" {
    pub fn bc_sanity_check();
}
extern "C" {
    pub fn sanitize_name(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn drop_upon_death(
        arg1: *mut monst,
        arg2: *mut obj,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn can_make_bones() -> boolean;
}
extern "C" {
    pub fn savebones(arg1: ::std::os::raw::c_int, arg2: time_t, arg3: *mut obj);
}
extern "C" {
    pub fn getbones() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bones_include_name(arg1: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn do_statusline1() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn check_gold_symbol();
}
extern "C" {
    pub fn do_statusline2() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bot();
}
extern "C" {
    pub fn timebot();
}
extern "C" {
    pub fn xlev_to_rank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rank_to_xlev(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rank_of(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_short,
        arg3: boolean,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn title_to_mon(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn max_rank_sz();
}
extern "C" {
    pub fn describe_level(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn status_initialize(arg1: boolean);
}
extern "C" {
    pub fn status_finish();
}
extern "C" {
    pub fn exp_percent_changing() -> boolean;
}
extern "C" {
    pub fn stat_cap_indx() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stat_hunger_indx() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bl_idx_to_fldname(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn condopt(arg1: ::std::os::raw::c_int, arg2: *mut boolean, arg3: boolean);
}
extern "C" {
    pub fn parse_cond_option(
        arg1: boolean,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cond_menu();
}
extern "C" {
    pub fn status_eval_next_unhilite();
}
extern "C" {
    pub fn reset_status_hilites();
}
extern "C" {
    pub fn parse_status_hl1(op: *mut ::std::os::raw::c_char, arg1: boolean) -> boolean;
}
extern "C" {
    pub fn status_notify_windowport(arg1: boolean);
}
extern "C" {
    pub fn clear_status_hilites();
}
extern "C" {
    pub fn count_status_hilites() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn status_hilite_menu() -> boolean;
}
extern "C" {
    pub fn randomkey() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn random_response(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rnd_extcmd_idx() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn domonability() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmd_from_func(
        arg1: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn cmdname_from_func(
        arg1: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
        arg2: *mut ::std::os::raw::c_char,
        arg3: boolean,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn redraw_cmd(arg1: ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn levltyp_to_name(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn reset_occupations();
}
extern "C" {
    pub fn set_occupation(
        arg1: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pgetchar() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn pushch(arg1: ::std::os::raw::c_char);
}
extern "C" {
    pub fn savech(arg1: ::std::os::raw::c_char);
}
extern "C" {
    pub fn key2extcmddesc(arg1: uchar) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn bind_specialkey(arg1: uchar, arg2: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn parseautocomplete(arg1: *mut ::std::os::raw::c_char, arg2: boolean);
}
extern "C" {
    pub fn reset_commands(arg1: boolean);
}
extern "C" {
    pub fn rhack(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn doextlist() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn extcmd_via_menu() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn enter_explore_mode() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind_key(arg1: uchar, arg2: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn dokeylist();
}
extern "C" {
    pub fn xytod(arg1: schar, arg2: schar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dtoxy(arg1: *mut coord, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn movecmd(arg1: ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dxdy_moveok() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn confdir();
}
extern "C" {
    pub fn directionname(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn isok(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_adjacent_loc(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: xchar,
        arg4: xchar,
        arg5: *mut coord,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn click_to_cmd(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_count(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
        arg5: boolean,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn hangup(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn end_of_input();
}
extern "C" {
    pub fn readchar() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn sanity_check();
}
extern "C" {
    pub fn key2txt(arg1: uchar, arg2: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn yn_function(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn paranoid_query(arg1: boolean, arg2: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn makemap_prepost(arg1: boolean, arg2: boolean);
}
extern "C" {
    pub fn is_pool(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn is_lava(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn is_pool_or_lava(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn is_ice(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn is_moat(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn db_under_typ(arg1: ::std::os::raw::c_int) -> schar;
}
extern "C" {
    pub fn is_drawbridge_wall(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_db_wall(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn find_drawbridge(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn create_drawbridge(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn open_drawbridge(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn close_drawbridge(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn destroy_drawbridge(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn decl_globals_init();
}
extern "C" {
    pub fn trapped_chest_at(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn trapped_door_at(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn o_in(arg1: *mut obj, arg2: ::std::os::raw::c_char) -> *mut obj;
}
extern "C" {
    pub fn o_material(arg1: *mut obj, arg2: ::std::os::raw::c_uint) -> *mut obj;
}
extern "C" {
    pub fn gold_detect(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn food_detect(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn object_detect(arg1: *mut obj, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn monster_detect(arg1: *mut obj, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn trap_detect(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn level_distance(arg1: *mut d_level) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn use_crystal_ball(arg1: *mut *mut obj);
}
extern "C" {
    pub fn do_mapping();
}
extern "C" {
    pub fn do_vicinity_map(arg1: *mut obj);
}
extern "C" {
    pub fn cvt_sdoor_to_door(arg1: *mut rm);
}
extern "C" {
    pub fn findit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn detecting(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
    ) -> boolean;
}
extern "C" {
    pub fn find_trap(arg1: *mut trap);
}
extern "C" {
    pub fn warnreveal();
}
extern "C" {
    pub fn dosearch0(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dosearch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sokoban_detect();
}
extern "C" {
    pub fn dump_map();
}
extern "C" {
    pub fn reveal_terrain(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wiz_mgender() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dig_typ(arg1: *mut obj, arg2: xchar, arg3: xchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_digging() -> boolean;
}
extern "C" {
    pub fn holetime() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dig_check(
        arg1: *mut monst,
        arg2: boolean,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn digactualhole(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut monst,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dighole(arg1: boolean, arg2: boolean, arg3: *mut coord) -> boolean;
}
extern "C" {
    pub fn use_pick_axe(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_pick_axe2(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mdig_tunnel(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn draft_message(arg1: boolean);
}
extern "C" {
    pub fn watch_dig(arg1: *mut monst, arg2: xchar, arg3: xchar, arg4: boolean);
}
extern "C" {
    pub fn zap_dig();
}
extern "C" {
    pub fn bury_an_obj(arg1: *mut obj, arg2: *mut boolean) -> *mut obj;
}
extern "C" {
    pub fn bury_objs(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn unearth_objs(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rot_organic(arg1: *mut any, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn rot_corpse(arg1: *mut any, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn buried_ball(arg1: *mut coord) -> *mut obj;
}
extern "C" {
    pub fn buried_ball_to_punishment();
}
extern "C" {
    pub fn buried_ball_to_freedom();
}
extern "C" {
    pub fn fillholetyp(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: boolean,
    ) -> schar;
}
extern "C" {
    pub fn liquid_flow(
        arg1: xchar,
        arg2: xchar,
        arg3: schar,
        arg4: *mut trap,
        arg5: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn conjoined_pits(arg1: *mut trap, arg2: *mut trap, arg3: boolean) -> boolean;
}
extern "C" {
    pub fn wiz_debug_cmd_bury() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn magic_map_background(arg1: xchar, arg2: xchar, arg3: ::std::os::raw::c_int);
}
extern "C" {
    pub fn map_background(arg1: xchar, arg2: xchar, arg3: ::std::os::raw::c_int);
}
extern "C" {
    pub fn map_trap(arg1: *mut trap, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn map_object(arg1: *mut obj, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn map_invisible(arg1: xchar, arg2: xchar);
}
extern "C" {
    pub fn unmap_invisible(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn unmap_object(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn map_location(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn feel_newsym(arg1: xchar, arg2: xchar);
}
extern "C" {
    pub fn feel_location(arg1: xchar, arg2: xchar);
}
extern "C" {
    pub fn newsym(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newsym_force(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn shieldeff(arg1: xchar, arg2: xchar);
}
extern "C" {
    pub fn tmp_at(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn flash_glyph_at(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn swallowed(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn under_ground(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn under_water(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn see_monsters();
}
extern "C" {
    pub fn set_mimic_blocking();
}
extern "C" {
    pub fn see_objects();
}
extern "C" {
    pub fn see_traps();
}
extern "C" {
    pub fn curs_on_u();
}
extern "C" {
    pub fn doredraw() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn docrt();
}
extern "C" {
    pub fn redraw_map();
}
extern "C" {
    pub fn show_glyph(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn clear_glyph_buffer();
}
extern "C" {
    pub fn row_refresh(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn cls();
}
extern "C" {
    pub fn flush_screen(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn back_to_glyph(arg1: xchar, arg2: xchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zapdir_to_glyph(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glyph_at(arg1: xchar, arg2: xchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reglyph_darkroom();
}
extern "C" {
    pub fn set_wall_state();
}
extern "C" {
    pub fn unset_seenv(
        arg1: *mut rm,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn warning_of(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn map_glyphinfo(
        arg1: xchar,
        arg2: xchar,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut glyph_info,
    );
}
extern "C" {
    pub fn dodrop() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn boulder_hits_pool(
        arg1: *mut obj,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn flooreffects(
        arg1: *mut obj,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn doaltarobj(arg1: *mut obj);
}
extern "C" {
    pub fn canletgo(arg1: *mut obj, arg2: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn dropx(arg1: *mut obj);
}
extern "C" {
    pub fn dropy(arg1: *mut obj);
}
extern "C" {
    pub fn dropz(arg1: *mut obj, arg2: boolean);
}
extern "C" {
    pub fn obj_no_longer_held(arg1: *mut obj);
}
extern "C" {
    pub fn doddrop() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dodown() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn save_currentstate();
}
extern "C" {
    pub fn u_collide_m(arg1: *mut monst);
}
extern "C" {
    pub fn goto_level(arg1: *mut d_level, arg2: boolean, arg3: boolean, arg4: boolean);
}
extern "C" {
    pub fn maybe_lvltport_feedback();
}
extern "C" {
    pub fn schedule_goto(
        arg1: *mut d_level,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn deferred_goto();
}
extern "C" {
    pub fn revive_corpse(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn revive_mon(arg1: *mut any, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn zombify_mon(arg1: *mut any, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn cmd_safety_prevention(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn donull() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dowipe() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn legs_in_no_shape(arg1: *const ::std::os::raw::c_char, arg2: boolean);
}
extern "C" {
    pub fn set_wounded_legs(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn heal_legs(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dxdy_to_dist_descr(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: boolean,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn coord_desc(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getpos_menu(arg1: *mut coord, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn getpos(
        arg1: *mut coord,
        arg2: boolean,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpos_sethilite(
        f: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        d: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_int,
            ) -> boolean,
        >,
    );
}
extern "C" {
    pub fn new_mgivenname(arg1: *mut monst, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn free_mgivenname(arg1: *mut monst);
}
extern "C" {
    pub fn new_oname(arg1: *mut obj, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn free_oname(arg1: *mut obj);
}
extern "C" {
    pub fn safe_oname(arg1: *mut obj) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn christen_monst(arg1: *mut monst, arg2: *const ::std::os::raw::c_char) -> *mut monst;
}
extern "C" {
    pub fn oname(arg1: *mut obj, arg2: *const ::std::os::raw::c_char) -> *mut obj;
}
extern "C" {
    pub fn objtyp_is_callable(arg1: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn docallcmd() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn docall(arg1: *mut obj);
}
extern "C" {
    pub fn rndghostname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn x_monnam(
        arg1: *mut monst,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: boolean,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn l_monnam(arg1: *mut monst) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mon_nam(arg1: *mut monst) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn noit_mon_nam(arg1: *mut monst) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Monnam(arg1: *mut monst) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn noit_Monnam(arg1: *mut monst) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn noname_monnam(
        arg1: *mut monst,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn m_monnam(arg1: *mut monst) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn y_monnam(arg1: *mut monst) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Adjmonnam(
        arg1: *mut monst,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Amonnam(arg1: *mut monst) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a_monnam(arg1: *mut monst) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn distant_monnam(
        arg1: *mut monst,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mon_nam_too(arg1: *mut monst, arg2: *mut monst) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn monverbself(
        arg1: *mut monst,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn minimal_monnam(arg1: *mut monst, arg2: boolean) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bogusmon(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rndmonnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn hcolor(arg1: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn rndcolor() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn hliquid(arg1: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn roguename() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn realloc_obj(
        arg1: *mut obj,
        arg2: ::std::os::raw::c_int,
        arg3: genericptr_t,
        arg4: ::std::os::raw::c_int,
        arg5: *const ::std::os::raw::c_char,
    ) -> *mut obj;
}
extern "C" {
    pub fn coyotename(
        arg1: *mut monst,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rndorcname(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn christen_orc(
        arg1: *mut monst,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> *mut monst;
}
extern "C" {
    pub fn noveltitle(arg1: *mut ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn lookup_novel(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Mgender(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmname(
        arg1: *mut permonst,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fingers_or_gloves(arg1: boolean) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn off_msg(arg1: *mut obj);
}
extern "C" {
    pub fn toggle_displacement(arg1: *mut obj, arg2: ::std::os::raw::c_long, arg3: boolean);
}
extern "C" {
    pub fn set_wear(arg1: *mut obj);
}
extern "C" {
    pub fn donning(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn doffing(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn cancel_doff(arg1: *mut obj, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn cancel_don();
}
extern "C" {
    pub fn stop_donning(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Armor_off() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Armor_gone() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Helmet_off() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Gloves_off() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Boots_on() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Boots_off() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Cloak_off() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Shield_off() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Shirt_off() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Amulet_off();
}
extern "C" {
    pub fn Ring_on(arg1: *mut obj);
}
extern "C" {
    pub fn Ring_off(arg1: *mut obj);
}
extern "C" {
    pub fn Ring_gone(arg1: *mut obj);
}
extern "C" {
    pub fn Blindf_on(arg1: *mut obj);
}
extern "C" {
    pub fn Blindf_off(arg1: *mut obj);
}
extern "C" {
    pub fn dotakeoff() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doremring() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cursed(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn armoroff(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn canwearobj(
        arg1: *mut obj,
        arg2: *mut ::std::os::raw::c_long,
        arg3: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dowear() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doputon() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_ac();
}
extern "C" {
    pub fn glibr();
}
extern "C" {
    pub fn some_armor(arg1: *mut monst) -> *mut obj;
}
extern "C" {
    pub fn stuck_ring(arg1: *mut obj, arg2: ::std::os::raw::c_int) -> *mut obj;
}
extern "C" {
    pub fn unchanger() -> *mut obj;
}
extern "C" {
    pub fn reset_remarm();
}
extern "C" {
    pub fn doddoremarm() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn destroy_arm(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adj_abon(arg1: *mut obj, arg2: schar);
}
extern "C" {
    pub fn inaccessible_equipment(
        arg1: *mut obj,
        arg2: *const ::std::os::raw::c_char,
        arg3: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn newedog(arg1: *mut monst);
}
extern "C" {
    pub fn free_edog(arg1: *mut monst);
}
extern "C" {
    pub fn initedog(arg1: *mut monst);
}
extern "C" {
    pub fn make_familiar(arg1: *mut obj, arg2: xchar, arg3: xchar, arg4: boolean) -> *mut monst;
}
extern "C" {
    pub fn makedog() -> *mut monst;
}
extern "C" {
    pub fn update_mlstmv();
}
extern "C" {
    pub fn losedogs();
}
extern "C" {
    pub fn mon_arrive(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn mon_catchup_elapsed_time(arg1: *mut monst, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn keepdogs(arg1: boolean);
}
extern "C" {
    pub fn migrate_to_level(arg1: *mut monst, arg2: xchar, arg3: xchar, arg4: *mut coord);
}
extern "C" {
    pub fn dogfood(arg1: *mut monst, arg2: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tamedog(arg1: *mut monst, arg2: *mut obj) -> boolean;
}
extern "C" {
    pub fn abuse_dog(arg1: *mut monst);
}
extern "C" {
    pub fn wary_dog(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn cursed_object_at(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn droppables(arg1: *mut monst) -> *mut obj;
}
extern "C" {
    pub fn dog_nutrition(arg1: *mut monst, arg2: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dog_eat(
        arg1: *mut monst,
        arg2: *mut obj,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dog_move(arg1: *mut monst, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finish_meating(arg1: *mut monst);
}
extern "C" {
    pub fn ghitm(arg1: *mut monst, arg2: *mut obj) -> boolean;
}
extern "C" {
    pub fn container_impact_dmg(arg1: *mut obj, arg2: xchar, arg3: xchar);
}
extern "C" {
    pub fn dokick() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ship_object(arg1: *mut obj, arg2: xchar, arg3: xchar, arg4: boolean) -> boolean;
}
extern "C" {
    pub fn obj_delivery(arg1: boolean);
}
extern "C" {
    pub fn deliver_obj_to_mon(
        mtmp: *mut monst,
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn down_gate(arg1: xchar, arg2: xchar) -> schar;
}
extern "C" {
    pub fn impact_drop(arg1: *mut obj, arg2: xchar, arg3: xchar, arg4: xchar);
}
extern "C" {
    pub fn multishot_class_bonus(
        arg1: ::std::os::raw::c_int,
        arg2: *mut obj,
        arg3: *mut obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dothrow() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dofire() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endmultishot(arg1: boolean);
}
extern "C" {
    pub fn hitfloor(arg1: *mut obj, arg2: boolean);
}
extern "C" {
    pub fn hurtle(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: boolean,
    );
}
extern "C" {
    pub fn mhurtle(
        arg1: *mut monst,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn throwing_weapon(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn throwit(arg1: *mut obj, arg2: ::std::os::raw::c_long, arg3: boolean, arg4: *mut obj);
}
extern "C" {
    pub fn omon_adj(arg1: *mut monst, arg2: *mut obj, arg3: boolean) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn thitmonst(arg1: *mut monst, arg2: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hero_breaks(
        arg1: *mut obj,
        arg2: xchar,
        arg3: xchar,
        arg4: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn breaks(arg1: *mut obj, arg2: xchar, arg3: xchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn release_camera_demon(arg1: *mut obj, arg2: xchar, arg3: xchar);
}
extern "C" {
    pub fn breakobj(arg1: *mut obj, arg2: xchar, arg3: xchar, arg4: boolean, arg5: boolean);
}
extern "C" {
    pub fn breaktest(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn walk_path(
        arg1: *mut coord,
        arg2: *mut coord,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
                arg3: ::std::os::raw::c_int,
            ) -> boolean,
        >,
        arg4: genericptr_t,
    ) -> boolean;
}
extern "C" {
    pub fn hurtle_jump(
        arg1: genericptr_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn hurtle_step(
        arg1: genericptr_t,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn save_dungeon(arg1: *mut NHFILE, arg2: boolean, arg3: boolean);
}
extern "C" {
    pub fn restore_dungeon(arg1: *mut NHFILE);
}
extern "C" {
    pub fn insert_branch(arg1: *mut branch, arg2: boolean);
}
extern "C" {
    pub fn init_dungeons();
}
extern "C" {
    pub fn find_level(arg1: *const ::std::os::raw::c_char) -> *mut s_level;
}
extern "C" {
    pub fn Is_special(arg1: *mut d_level) -> *mut s_level;
}
extern "C" {
    pub fn Is_branchlev(arg1: *mut d_level) -> *mut branch;
}
extern "C" {
    pub fn builds_up(arg1: *mut d_level) -> boolean;
}
extern "C" {
    pub fn ledger_no(arg1: *mut d_level) -> xchar;
}
extern "C" {
    pub fn maxledgerno() -> xchar;
}
extern "C" {
    pub fn depth(arg1: *mut d_level) -> schar;
}
extern "C" {
    pub fn dunlev(arg1: *mut d_level) -> xchar;
}
extern "C" {
    pub fn dunlevs_in_dungeon(arg1: *mut d_level) -> xchar;
}
extern "C" {
    pub fn ledger_to_dnum(arg1: xchar) -> xchar;
}
extern "C" {
    pub fn ledger_to_dlev(arg1: xchar) -> xchar;
}
extern "C" {
    pub fn deepest_lev_reached(arg1: boolean) -> xchar;
}
extern "C" {
    pub fn on_level(arg1: *mut d_level, arg2: *mut d_level) -> boolean;
}
extern "C" {
    pub fn next_level(arg1: boolean);
}
extern "C" {
    pub fn prev_level(arg1: boolean);
}
extern "C" {
    pub fn u_on_newpos(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn u_on_rndspot(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn stairway_add(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: boolean,
        arg4: boolean,
        arg5: *mut d_level,
    );
}
extern "C" {
    pub fn stairway_print();
}
extern "C" {
    pub fn stairway_free_all();
}
extern "C" {
    pub fn stairway_at(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> *mut stairway;
}
extern "C" {
    pub fn stairway_find(arg1: *mut d_level) -> *mut stairway;
}
extern "C" {
    pub fn stairway_find_from(arg1: *mut d_level, arg2: boolean) -> *mut stairway;
}
extern "C" {
    pub fn stairway_find_dir(arg1: boolean) -> *mut stairway;
}
extern "C" {
    pub fn stairway_find_type_dir(arg1: boolean, arg2: boolean) -> *mut stairway;
}
extern "C" {
    pub fn stairway_find_special_dir(arg1: boolean) -> *mut stairway;
}
extern "C" {
    pub fn u_on_sstairs(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn u_on_upstairs();
}
extern "C" {
    pub fn u_on_dnstairs();
}
extern "C" {
    pub fn On_stairs(arg1: xchar, arg2: xchar) -> boolean;
}
extern "C" {
    pub fn On_ladder(arg1: xchar, arg2: xchar) -> boolean;
}
extern "C" {
    pub fn On_stairs_up(arg1: xchar, arg2: xchar) -> boolean;
}
extern "C" {
    pub fn On_stairs_dn(arg1: xchar, arg2: xchar) -> boolean;
}
extern "C" {
    pub fn get_level(arg1: *mut d_level, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Is_botlevel(arg1: *mut d_level) -> boolean;
}
extern "C" {
    pub fn Can_fall_thru(arg1: *mut d_level) -> boolean;
}
extern "C" {
    pub fn Can_dig_down(arg1: *mut d_level) -> boolean;
}
extern "C" {
    pub fn Can_rise_up(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut d_level,
    ) -> boolean;
}
extern "C" {
    pub fn has_ceiling(arg1: *mut d_level) -> boolean;
}
extern "C" {
    pub fn In_quest(arg1: *mut d_level) -> boolean;
}
extern "C" {
    pub fn In_mines(arg1: *mut d_level) -> boolean;
}
extern "C" {
    pub fn dungeon_branch(arg1: *const ::std::os::raw::c_char) -> *mut branch;
}
extern "C" {
    pub fn at_dgn_entrance(arg1: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn In_hell(arg1: *mut d_level) -> boolean;
}
extern "C" {
    pub fn In_V_tower(arg1: *mut d_level) -> boolean;
}
extern "C" {
    pub fn On_W_tower_level(arg1: *mut d_level) -> boolean;
}
extern "C" {
    pub fn In_W_tower(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut d_level,
    ) -> boolean;
}
extern "C" {
    pub fn find_hell(arg1: *mut d_level);
}
extern "C" {
    pub fn goto_hell(arg1: boolean, arg2: boolean);
}
extern "C" {
    pub fn single_level_branch(arg1: *mut d_level) -> boolean;
}
extern "C" {
    pub fn assign_level(arg1: *mut d_level, arg2: *mut d_level);
}
extern "C" {
    pub fn assign_rnd_level(arg1: *mut d_level, arg2: *mut d_level, arg3: ::std::os::raw::c_int);
}
extern "C" {
    pub fn induced_align(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn Invocation_lev(arg1: *mut d_level) -> boolean;
}
extern "C" {
    pub fn level_difficulty() -> xchar;
}
extern "C" {
    pub fn lev_by_name(arg1: *const ::std::os::raw::c_char) -> schar;
}
extern "C" {
    pub fn print_dungeon(arg1: boolean, arg2: *mut schar, arg3: *mut xchar) -> schar;
}
extern "C" {
    pub fn get_annotation(arg1: *mut d_level) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn donamelevel() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dooverview() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn show_overview(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rm_mapseen(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn init_mapseen(arg1: *mut d_level);
}
extern "C" {
    pub fn recalc_mapseen();
}
extern "C" {
    pub fn mapseen_temple(arg1: *mut monst);
}
extern "C" {
    pub fn room_discovered(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn recbranch_mapseen(arg1: *mut d_level, arg2: *mut d_level);
}
extern "C" {
    pub fn overview_stats(
        arg1: winid,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn remdun_mapseen(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endgamelevelname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn eatmupdate();
}
extern "C" {
    pub fn is_edible(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn init_uhunger();
}
extern "C" {
    pub fn Hear_again() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_eat();
}
extern "C" {
    pub fn doeat() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn use_tin_opener(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethungry();
}
extern "C" {
    pub fn morehungry(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lesshungry(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn is_fainted() -> boolean;
}
extern "C" {
    pub fn reset_faint();
}
extern "C" {
    pub fn violated_vegetarian();
}
extern "C" {
    pub fn newuhs(arg1: boolean);
}
extern "C" {
    pub fn floorfood(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> *mut obj;
}
extern "C" {
    pub fn vomit();
}
extern "C" {
    pub fn eaten_stat(arg1: ::std::os::raw::c_int, arg2: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn food_disappears(arg1: *mut obj);
}
extern "C" {
    pub fn food_substitution(arg1: *mut obj, arg2: *mut obj);
}
extern "C" {
    pub fn eating_conducts(arg1: *mut permonst);
}
extern "C" {
    pub fn eat_brains(
        arg1: *mut monst,
        arg2: *mut monst,
        arg3: boolean,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fix_petrification();
}
extern "C" {
    pub fn consume_oeaten(arg1: *mut obj, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn maybe_finished_meal(arg1: boolean) -> boolean;
}
extern "C" {
    pub fn set_tin_variety(arg1: *mut obj, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tin_variety_txt(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tin_details(
        arg1: *mut obj,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Popeye(arg1: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn done1(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn done2() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn done_in_by(arg1: *mut monst, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn panic(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn done(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn container_contents(arg1: *mut obj, arg2: boolean, arg3: boolean, arg4: boolean);
}
extern "C" {
    pub fn nh_terminate(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn delayed_killer(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn find_delayed_killer(arg1: ::std::os::raw::c_int) -> *mut kinfo;
}
extern "C" {
    pub fn dealloc_killer(arg1: *mut kinfo);
}
extern "C" {
    pub fn save_killers(arg1: *mut NHFILE);
}
extern "C" {
    pub fn restore_killers(arg1: *mut NHFILE);
}
extern "C" {
    pub fn build_english_list(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn random_engraving(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wipeout_text(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn can_reach_floor(arg1: boolean) -> boolean;
}
extern "C" {
    pub fn cant_reach_floor(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: boolean,
        arg4: boolean,
    );
}
extern "C" {
    pub fn surface(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ceiling(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn engr_at(arg1: xchar, arg2: xchar) -> *mut engr;
}
extern "C" {
    pub fn sengr_at(
        arg1: *const ::std::os::raw::c_char,
        arg2: xchar,
        arg3: xchar,
        arg4: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u_wipe_engr(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn wipe_engr_at(arg1: xchar, arg2: xchar, arg3: xchar, arg4: boolean);
}
extern "C" {
    pub fn read_engr_at(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn make_engr_at(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_long,
        arg5: xchar,
    );
}
extern "C" {
    pub fn del_engr_at(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn freehand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doengrave() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sanitize_engravings();
}
extern "C" {
    pub fn save_engravings(arg1: *mut NHFILE);
}
extern "C" {
    pub fn rest_engravings(arg1: *mut NHFILE);
}
extern "C" {
    pub fn engr_stats(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn del_engr(arg1: *mut engr);
}
extern "C" {
    pub fn rloc_engr(arg1: *mut engr);
}
extern "C" {
    pub fn make_grave(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn newuexp(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn newpw() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn experience(arg1: *mut monst, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn more_experienced(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn losexp(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn newexplevel();
}
extern "C" {
    pub fn pluslvl(arg1: boolean);
}
extern "C" {
    pub fn rndexp(arg1: boolean) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn explode(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_char,
        arg6: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn scatter(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_uint,
        arg5: *mut obj,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn splatter_burning_oil(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: boolean,
    );
}
extern "C" {
    pub fn explode_oil(arg1: *mut obj, arg2: ::std::os::raw::c_int, arg3: ::std::os::raw::c_int);
}
extern "C" {
    pub fn makeroguerooms();
}
extern "C" {
    pub fn corr(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn makerogueghost();
}
extern "C" {
    pub fn l_get_config_errors(arg1: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fname_encode(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fname_decode(
        arg1: ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fqname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen_datafile(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn zero_nhfile(arg1: *mut NHFILE);
}
extern "C" {
    pub fn close_nhfile(arg1: *mut NHFILE);
}
extern "C" {
    pub fn rewind_nhfile(arg1: *mut NHFILE);
}
extern "C" {
    pub fn set_levelfile_name(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn create_levelfile(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut NHFILE;
}
extern "C" {
    pub fn open_levelfile(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut NHFILE;
}
extern "C" {
    pub fn delete_levelfile(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn clearlocks();
}
extern "C" {
    pub fn create_bonesfile(
        arg1: *mut d_level,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut NHFILE;
}
extern "C" {
    pub fn commit_bonesfile(arg1: *mut d_level);
}
extern "C" {
    pub fn open_bonesfile(
        arg1: *mut d_level,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> *mut NHFILE;
}
extern "C" {
    pub fn delete_bonesfile(arg1: *mut d_level) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn compress_bonesfile();
}
extern "C" {
    pub fn set_savefile_name(arg1: boolean);
}
extern "C" {
    pub fn save_savefile_name(arg1: *mut NHFILE);
}
extern "C" {
    pub fn set_error_savefile();
}
extern "C" {
    pub fn create_savefile() -> *mut NHFILE;
}
extern "C" {
    pub fn open_savefile() -> *mut NHFILE;
}
extern "C" {
    pub fn delete_savefile() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn restore_saved_game() -> *mut NHFILE;
}
extern "C" {
    pub fn nh_compress(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn nh_uncompress(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn lock_file(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn unlock_file(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn parse_config_line(arg1: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn can_read_file(arg1: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn config_error_init(arg1: boolean, arg2: *const ::std::os::raw::c_char, arg3: boolean);
}
extern "C" {
    pub fn config_erradd(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn config_error_done() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read_config_file(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn check_recordfile(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn read_wizkit();
}
extern "C" {
    pub fn parse_conf_str(
        str_: *const ::std::os::raw::c_char,
        proc_: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_char) -> boolean,
        >,
    ) -> boolean;
}
extern "C" {
    pub fn read_sym_file(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn parse_sym_line(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn paniclog(arg1: *const ::std::os::raw::c_char, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn testinglog(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn validate_prefix_locations(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plname_from_file(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_saved_games() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn free_saved_games(arg1: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn recover_savefile() -> boolean;
}
extern "C" {
    pub fn assure_syscf_file();
}
extern "C" {
    pub fn nhclose(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn debugcore(arg1: *const ::std::os::raw::c_char, arg2: boolean) -> boolean;
}
extern "C" {
    pub fn reveal_paths();
}
extern "C" {
    pub fn read_tribute(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
    ) -> boolean;
}
extern "C" {
    pub fn Death_quote(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn floating_above(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn dogushforth(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dryup(arg1: xchar, arg2: xchar, arg3: boolean);
}
extern "C" {
    pub fn drinkfountain();
}
extern "C" {
    pub fn dipfountain(arg1: *mut obj);
}
extern "C" {
    pub fn breaksink(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn drinksink();
}
extern "C" {
    pub fn is_valid_travelpt(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn uint_to_any(arg1: ::std::os::raw::c_uint) -> *mut anything;
}
extern "C" {
    pub fn long_to_any(arg1: ::std::os::raw::c_long) -> *mut anything;
}
extern "C" {
    pub fn monst_to_any(arg1: *mut monst) -> *mut anything;
}
extern "C" {
    pub fn obj_to_any(arg1: *mut obj) -> *mut anything;
}
extern "C" {
    pub fn revive_nasty(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn still_chewing(arg1: xchar, arg2: xchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn movobj(arg1: *mut obj, arg2: xchar, arg3: xchar);
}
extern "C" {
    pub fn may_dig(arg1: xchar, arg2: xchar) -> boolean;
}
extern "C" {
    pub fn may_passwall(arg1: xchar, arg2: xchar) -> boolean;
}
extern "C" {
    pub fn bad_rock(arg1: *mut permonst, arg2: xchar, arg3: xchar) -> boolean;
}
extern "C" {
    pub fn cant_squeeze_thru(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn invocation_pos(arg1: xchar, arg2: xchar) -> boolean;
}
extern "C" {
    pub fn test_move(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn wiz_debug_cmd_traveldisplay() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u_rooted() -> boolean;
}
extern "C" {
    pub fn domove();
}
extern "C" {
    pub fn overexert_hp();
}
extern "C" {
    pub fn overexertion() -> boolean;
}
extern "C" {
    pub fn invocation_message();
}
extern "C" {
    pub fn switch_terrain();
}
extern "C" {
    pub fn set_uinwater(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn pooleffects(arg1: boolean) -> boolean;
}
extern "C" {
    pub fn spoteffects(arg1: boolean);
}
extern "C" {
    pub fn in_rooms(
        arg1: xchar,
        arg2: xchar,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn in_town(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn check_special_room(arg1: boolean);
}
extern "C" {
    pub fn dopickup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lookaround();
}
extern "C" {
    pub fn crawl_destination(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn monster_nearby() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn end_running(arg1: boolean);
}
extern "C" {
    pub fn nomul(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn unmul(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn losehp(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, arg3: boolean);
}
extern "C" {
    pub fn weight_cap() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inv_weight() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn near_capacity() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn calc_capacity(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn max_capacity() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_capacity(arg1: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn inv_cnt(arg1: boolean) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn money_cnt(arg1: *mut obj) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn digit(arg1: ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn letter(arg1: ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn highc(arg1: ::std::os::raw::c_char) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn lowc(arg1: ::std::os::raw::c_char) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcase(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ucase(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn upstart(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mungspaces(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn trimspaces(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strip_newline(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stripchars(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stripdigits(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn eos(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn str_end_is(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn str_lines_maxlen(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strkitten(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn copynchars(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn chrcasecpy(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcasecpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn s_suffix(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ing_suffix(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xcrypt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn onlyspace(arg1: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn tabexpand(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn visctrl(arg1: ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsubst(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strNsubst(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ordin(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sitoa(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sgn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rounddiv(
        arg1: ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dist2(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isqrt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn distmin(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn online2(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn pmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn pmatchi(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn pmatchz(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn strstri(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fuzzymatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn init_random(
        fn_: ::std::option::Option<
            unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn reseed_random(
        fn_: ::std::option::Option<
            unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn getnow() -> time_t;
}
extern "C" {
    pub fn getyear() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yyyymmdd(arg1: time_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn hhmmss(arg1: time_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn yyyymmddhhmmss(arg1: time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn time_from_yyyymmddhhmmss(arg1: *mut ::std::os::raw::c_char) -> time_t;
}
extern "C" {
    pub fn phase_of_the_moon() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn friday_13th() -> boolean;
}
extern "C" {
    pub fn night() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn midnight() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strbuf_init(arg1: *mut strbuf_t);
}
extern "C" {
    pub fn strbuf_append(arg1: *mut strbuf_t, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn strbuf_reserve(arg1: *mut strbuf_t, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn strbuf_empty(arg1: *mut strbuf_t);
}
extern "C" {
    pub fn strbuf_nl_to_crlf(arg1: *mut strbuf_t);
}
extern "C" {
    pub fn nonconst(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swapbits(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shuffle_int_array(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn nh_snprintf(
        func: *const ::std::os::raw::c_char,
        line: ::std::os::raw::c_int,
        str_: *mut ::std::os::raw::c_char,
        size: size_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn doattributes() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn enlightenment(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn youhiding(arg1: boolean, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn trap_predicament(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: boolean,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn doconduct() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn show_conduct(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn record_achievement(arg1: schar);
}
extern "C" {
    pub fn remove_achievement(arg1: schar) -> boolean;
}
extern "C" {
    pub fn count_achievements() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn achieve_rank(arg1: ::std::os::raw::c_int) -> schar;
}
extern "C" {
    pub fn sokoban_in_play() -> boolean;
}
extern "C" {
    pub fn dovanquished() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doborn() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_vanquished(arg1: ::std::os::raw::c_char, arg2: boolean);
}
extern "C" {
    pub fn num_genocides() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn list_genocided(arg1: ::std::os::raw::c_char, arg2: boolean);
}
extern "C" {
    pub fn align_str(arg1: aligntyp) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn piousness(
        arg1: boolean,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mstatusline(arg1: *mut monst);
}
extern "C" {
    pub fn ustatusline();
}
extern "C" {
    pub fn loot_classify(arg1: *mut Loot, arg2: *mut obj);
}
extern "C" {
    pub fn sortloot(
        arg1: *mut *mut obj,
        arg2: ::std::os::raw::c_uint,
        arg3: boolean,
        arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut obj) -> boolean>,
    ) -> *mut Loot;
}
extern "C" {
    pub fn unsortloot(arg1: *mut *mut Loot);
}
extern "C" {
    pub fn assigninvlet(arg1: *mut obj);
}
extern "C" {
    pub fn merge_choice(arg1: *mut obj, arg2: *mut obj) -> *mut obj;
}
extern "C" {
    pub fn merged(arg1: *mut *mut obj, arg2: *mut *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn addinv_core1(arg1: *mut obj);
}
extern "C" {
    pub fn addinv_core2(arg1: *mut obj);
}
extern "C" {
    pub fn addinv(arg1: *mut obj) -> *mut obj;
}
extern "C" {
    pub fn addinv_before(arg1: *mut obj, arg2: *mut obj) -> *mut obj;
}
extern "C" {
    pub fn hold_another_object(
        arg1: *mut obj,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut obj;
}
extern "C" {
    pub fn useupall(arg1: *mut obj);
}
extern "C" {
    pub fn useup(arg1: *mut obj);
}
extern "C" {
    pub fn consume_obj_charge(arg1: *mut obj, arg2: boolean);
}
extern "C" {
    pub fn freeinv_core(arg1: *mut obj);
}
extern "C" {
    pub fn freeinv(arg1: *mut obj);
}
extern "C" {
    pub fn delallobj(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn delobj(arg1: *mut obj);
}
extern "C" {
    pub fn sobj_at(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut obj;
}
extern "C" {
    pub fn nxtobj(arg1: *mut obj, arg2: ::std::os::raw::c_int, arg3: boolean) -> *mut obj;
}
extern "C" {
    pub fn carrying(arg1: ::std::os::raw::c_int) -> *mut obj;
}
extern "C" {
    pub fn have_lizard() -> boolean;
}
extern "C" {
    pub fn u_carried_gloves() -> *mut obj;
}
extern "C" {
    pub fn u_have_novel() -> *mut obj;
}
extern "C" {
    pub fn o_on(arg1: ::std::os::raw::c_uint, arg2: *mut obj) -> *mut obj;
}
extern "C" {
    pub fn obj_here(
        arg1: *mut obj,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn wearing_armor() -> boolean;
}
extern "C" {
    pub fn is_worn(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn g_at(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> *mut obj;
}
extern "C" {
    pub fn splittable(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn any_obj_ok(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getobj(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut obj) -> ::std::os::raw::c_int>,
        arg3: ::std::os::raw::c_uint,
    ) -> *mut obj;
}
extern "C" {
    pub fn ggetobj(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut obj) -> ::std::os::raw::c_int>,
        arg3: ::std::os::raw::c_int,
        arg4: boolean,
        arg5: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn askchain(
        arg1: *mut *mut obj,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut obj) -> ::std::os::raw::c_int>,
        arg5: ::std::option::Option<unsafe extern "C" fn(arg1: *mut obj) -> ::std::os::raw::c_int>,
        arg6: ::std::os::raw::c_int,
        arg7: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_cknown_lknown(arg1: *mut obj);
}
extern "C" {
    pub fn fully_identify_obj(arg1: *mut obj);
}
extern "C" {
    pub fn identify(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn count_unidentified(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn identify_pack(arg1: ::std::os::raw::c_int, arg2: boolean);
}
extern "C" {
    pub fn learn_unseen_invent();
}
extern "C" {
    pub fn update_inventory();
}
extern "C" {
    pub fn doperminv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prinv(arg1: *const ::std::os::raw::c_char, arg2: *mut obj, arg3: ::std::os::raw::c_long);
}
extern "C" {
    pub fn xprname(
        arg1: *mut obj,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
        arg4: boolean,
        arg5: ::std::os::raw::c_long,
        arg6: ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ddoinv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn display_inventory(
        arg1: *const ::std::os::raw::c_char,
        arg2: boolean,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn display_binventory(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn display_cinventory(arg1: *mut obj) -> *mut obj;
}
extern "C" {
    pub fn display_minventory(
        arg1: *mut monst,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut obj;
}
extern "C" {
    pub fn dotypeinv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dfeature_at(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn look_here(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dolook() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn will_feel_cockatrice(arg1: *mut obj, arg2: boolean) -> boolean;
}
extern "C" {
    pub fn feel_cockatrice(arg1: *mut obj, arg2: boolean);
}
extern "C" {
    pub fn stackobj(arg1: *mut obj);
}
extern "C" {
    pub fn mergable(arg1: *mut obj, arg2: *mut obj) -> boolean;
}
extern "C" {
    pub fn doprgold() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doprwep() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doprarm() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doprring() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dopramulet() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doprtool() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doprinuse() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn useupf(arg1: *mut obj, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn let_to_name(
        arg1: ::std::os::raw::c_char,
        arg2: boolean,
        arg3: boolean,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn free_invbuf();
}
extern "C" {
    pub fn reassign();
}
extern "C" {
    pub fn check_invent_gold(arg1: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn doorganize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_pickinv_cache();
}
extern "C" {
    pub fn count_unpaid(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn count_buc(
        arg1: *mut obj,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut obj) -> boolean>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tally_BUCX(
        arg1: *mut obj,
        arg2: boolean,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn count_contents(
        arg1: *mut obj,
        arg2: boolean,
        arg3: boolean,
        arg4: boolean,
        arg5: boolean,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn carry_obj_effects(arg1: *mut obj);
}
extern "C" {
    pub fn currency(arg1: ::std::os::raw::c_long) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn silly_thing(arg1: *const ::std::os::raw::c_char, arg2: *mut obj);
}
extern "C" {
    pub fn new_light_source(
        arg1: xchar,
        arg2: xchar,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut any,
    );
}
extern "C" {
    pub fn del_light_source(arg1: ::std::os::raw::c_int, arg2: *mut any);
}
extern "C" {
    pub fn do_light_sources(arg1: *mut *mut xchar);
}
extern "C" {
    pub fn show_transient_light(
        arg1: *mut obj,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn transient_light_cleanup();
}
extern "C" {
    pub fn find_mid(arg1: ::std::os::raw::c_uint, arg2: ::std::os::raw::c_uint) -> *mut monst;
}
extern "C" {
    pub fn save_light_sources(arg1: *mut NHFILE, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn restore_light_sources(arg1: *mut NHFILE);
}
extern "C" {
    pub fn light_stats(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn relink_light_sources(arg1: boolean);
}
extern "C" {
    pub fn light_sources_sanity_check();
}
extern "C" {
    pub fn obj_move_light_source(arg1: *mut obj, arg2: *mut obj);
}
extern "C" {
    pub fn any_light_source() -> boolean;
}
extern "C" {
    pub fn snuff_light_source(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn obj_sheds_light(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn obj_is_burning(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn obj_split_light_source(arg1: *mut obj, arg2: *mut obj);
}
extern "C" {
    pub fn obj_merge_light_sources(arg1: *mut obj, arg2: *mut obj);
}
extern "C" {
    pub fn obj_adjust_light_radius(arg1: *mut obj, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn candle_light_range(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arti_light_radius(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arti_light_description(arg1: *mut obj) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wiz_light_sources() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn picking_lock(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn picking_at(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn breakchestlock(arg1: *mut obj, arg2: boolean);
}
extern "C" {
    pub fn reset_pick();
}
extern "C" {
    pub fn maybe_reset_pick(arg1: *mut obj);
}
extern "C" {
    pub fn autokey(arg1: boolean) -> *mut obj;
}
extern "C" {
    pub fn pick_lock(
        arg1: *mut obj,
        arg2: xchar,
        arg3: xchar,
        arg4: *mut obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doforce() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn boxlock(arg1: *mut obj, arg2: *mut obj) -> boolean;
}
extern "C" {
    pub fn doorlock(
        arg1: *mut obj,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn doopen() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stumble_on_door_mimic(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn doopen_indir(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dealloc_monst(arg1: *mut monst);
}
extern "C" {
    pub fn is_home_elemental(arg1: *mut permonst) -> boolean;
}
extern "C" {
    pub fn clone_mon(arg1: *mut monst, arg2: xchar, arg3: xchar) -> *mut monst;
}
extern "C" {
    pub fn monhp_per_lvl(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newmonhp(arg1: *mut monst, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newmextra() -> *mut mextra;
}
extern "C" {
    pub fn copy_mextra(arg1: *mut monst, arg2: *mut monst);
}
extern "C" {
    pub fn dealloc_mextra(arg1: *mut monst);
}
extern "C" {
    pub fn makemon(
        arg1: *mut permonst,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_long,
    ) -> *mut monst;
}
extern "C" {
    pub fn unmakemon(arg1: *mut monst, arg2: ::std::os::raw::c_long) -> *mut monst;
}
extern "C" {
    pub fn create_critters(
        arg1: ::std::os::raw::c_int,
        arg2: *mut permonst,
        arg3: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn rndmonst() -> *mut permonst;
}
extern "C" {
    pub fn mkclass(arg1: ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> *mut permonst;
}
extern "C" {
    pub fn mkclass_aligned(
        arg1: ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: aligntyp,
    ) -> *mut permonst;
}
extern "C" {
    pub fn mkclass_poly(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adj_lev(arg1: *mut permonst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grow_up(arg1: *mut monst, arg2: *mut monst) -> *mut permonst;
}
extern "C" {
    pub fn mongets(arg1: *mut monst, arg2: ::std::os::raw::c_int) -> *mut obj;
}
extern "C" {
    pub fn golemhp(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn peace_minded(arg1: *mut permonst) -> boolean;
}
extern "C" {
    pub fn set_malign(arg1: *mut monst);
}
extern "C" {
    pub fn newmcorpsenm(arg1: *mut monst);
}
extern "C" {
    pub fn freemcorpsenm(arg1: *mut monst);
}
extern "C" {
    pub fn set_mimic_sym(arg1: *mut monst);
}
extern "C" {
    pub fn mbirth_limit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mimic_hit_msg(arg1: *mut monst, arg2: ::std::os::raw::c_short);
}
extern "C" {
    pub fn mkmonmoney(arg1: *mut monst, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn bagotricks(
        arg1: *mut obj,
        arg2: boolean,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn propagate(arg1: ::std::os::raw::c_int, arg2: boolean, arg3: boolean) -> boolean;
}
extern "C" {
    pub fn usmellmon(arg1: *mut permonst) -> boolean;
}
extern "C" {
    pub fn castmu(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: boolean,
        arg4: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buzzmu(arg1: *mut monst, arg2: *mut attack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn runtime_info_init();
}
extern "C" {
    pub fn do_runtime_info(arg1: *mut ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fightm(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mdisplacem(arg1: *mut monst, arg2: *mut monst, arg3: boolean) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mattackm(arg1: *mut monst, arg2: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn engulf_target(arg1: *mut monst, arg2: *mut monst) -> boolean;
}
extern "C" {
    pub fn mon_poly(
        arg1: *mut monst,
        arg2: *mut monst,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn paralyze_monst(arg1: *mut monst, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sleep_monst(
        arg1: *mut monst,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn slept_monst(arg1: *mut monst);
}
extern "C" {
    pub fn xdrainenergym(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn attk_protection(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rustm(arg1: *mut monst, arg2: *mut obj);
}
extern "C" {
    pub fn hitmsg(arg1: *mut monst, arg2: *mut attack);
}
extern "C" {
    pub fn mpoisons_subj(arg1: *mut monst, arg2: *mut attack) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn u_slow_down();
}
extern "C" {
    pub fn cloneu() -> *mut monst;
}
extern "C" {
    pub fn expels(arg1: *mut monst, arg2: *mut permonst, arg3: boolean);
}
extern "C" {
    pub fn getmattk(
        arg1: *mut monst,
        arg2: *mut monst,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut attack,
    ) -> *mut attack;
}
extern "C" {
    pub fn mattacku(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn diseasemu(arg1: *mut permonst) -> boolean;
}
extern "C" {
    pub fn u_slip_free(arg1: *mut monst, arg2: *mut attack) -> boolean;
}
extern "C" {
    pub fn magic_negation(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gulp_blnd_check() -> boolean;
}
extern "C" {
    pub fn gazemu(arg1: *mut monst, arg2: *mut attack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mdamageu(arg1: *mut monst, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn could_seduce(
        arg1: *mut monst,
        arg2: *mut monst,
        arg3: *mut attack,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doseduce(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newemin(arg1: *mut monst);
}
extern "C" {
    pub fn free_emin(arg1: *mut monst);
}
extern "C" {
    pub fn monster_census(arg1: boolean) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msummon(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn summon_minion(arg1: aligntyp, arg2: boolean);
}
extern "C" {
    pub fn demon_talk(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bribe(arg1: *mut monst) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn dprince(arg1: aligntyp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dlord(arg1: aligntyp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llord() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ndemon(arg1: aligntyp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lminion() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lose_guardian_angel(arg1: *mut monst);
}
extern "C" {
    pub fn gain_guardian_angel();
}
extern "C" {
    pub fn sort_rooms();
}
extern "C" {
    pub fn add_room(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: boolean,
        arg6: schar,
        arg7: boolean,
    );
}
extern "C" {
    pub fn add_subroom(
        arg1: *mut mkroom,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: boolean,
        arg7: schar,
        arg8: boolean,
    );
}
extern "C" {
    pub fn free_luathemes(arg1: boolean);
}
extern "C" {
    pub fn makecorridors();
}
extern "C" {
    pub fn add_door(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int, arg3: *mut mkroom);
}
extern "C" {
    pub fn clear_level_structures();
}
extern "C" {
    pub fn mklev();
}
extern "C" {
    pub fn topologize(arg1: *mut mkroom);
}
extern "C" {
    pub fn place_branch(arg1: *mut branch, arg2: xchar, arg3: xchar);
}
extern "C" {
    pub fn occupied(arg1: xchar, arg2: xchar) -> boolean;
}
extern "C" {
    pub fn okdoor(arg1: xchar, arg2: xchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dodoor(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int, arg3: *mut mkroom);
}
extern "C" {
    pub fn mktrap(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut mkroom,
        arg4: *mut coord,
    );
}
extern "C" {
    pub fn mkstairs(arg1: xchar, arg2: xchar, arg3: ::std::os::raw::c_char, arg4: *mut mkroom);
}
extern "C" {
    pub fn mkinvokearea();
}
extern "C" {
    pub fn mineralize(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: boolean,
    );
}
extern "C" {
    pub fn flood_fill_rm(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: boolean,
        arg5: boolean,
    );
}
extern "C" {
    pub fn remove_rooms(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn litstate_rnd(arg1: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn create_maze(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int, arg3: boolean);
}
extern "C" {
    pub fn wallification(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn fix_wall_spines(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn walkfrom(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int, arg3: schar);
}
extern "C" {
    pub fn makemaz(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn mazexy(arg1: *mut coord);
}
extern "C" {
    pub fn get_level_extends(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn bound_digging();
}
extern "C" {
    pub fn mkportal(arg1: xchar, arg2: xchar, arg3: xchar, arg4: xchar);
}
extern "C" {
    pub fn bad_location(
        arg1: xchar,
        arg2: xchar,
        arg3: xchar,
        arg4: xchar,
        arg5: xchar,
        arg6: xchar,
    ) -> boolean;
}
extern "C" {
    pub fn place_lregion(
        arg1: xchar,
        arg2: xchar,
        arg3: xchar,
        arg4: xchar,
        arg5: xchar,
        arg6: xchar,
        arg7: xchar,
        arg8: xchar,
        arg9: xchar,
        arg10: *mut d_level,
    );
}
extern "C" {
    pub fn fixup_special();
}
extern "C" {
    pub fn fumaroles();
}
extern "C" {
    pub fn movebubbles();
}
extern "C" {
    pub fn water_friction();
}
extern "C" {
    pub fn save_waterlevel(arg1: *mut NHFILE);
}
extern "C" {
    pub fn restore_waterlevel(arg1: *mut NHFILE);
}
extern "C" {
    pub fn waterbody_name(arg1: xchar, arg2: xchar) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn newoextra() -> *mut oextra;
}
extern "C" {
    pub fn copy_oextra(arg1: *mut obj, arg2: *mut obj);
}
extern "C" {
    pub fn dealloc_oextra(arg1: *mut obj);
}
extern "C" {
    pub fn newomonst(arg1: *mut obj);
}
extern "C" {
    pub fn free_omonst(arg1: *mut obj);
}
extern "C" {
    pub fn newomid(arg1: *mut obj);
}
extern "C" {
    pub fn free_omid(arg1: *mut obj);
}
extern "C" {
    pub fn newolong(arg1: *mut obj);
}
extern "C" {
    pub fn free_olong(arg1: *mut obj);
}
extern "C" {
    pub fn new_omailcmd(arg1: *mut obj, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn free_omailcmd(arg1: *mut obj);
}
extern "C" {
    pub fn mkobj_at(
        arg1: ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: boolean,
    ) -> *mut obj;
}
extern "C" {
    pub fn mksobj_at(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: boolean,
        arg5: boolean,
    ) -> *mut obj;
}
extern "C" {
    pub fn mksobj_migr_to_species(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_uint,
        arg3: boolean,
        arg4: boolean,
    ) -> *mut obj;
}
extern "C" {
    pub fn mkobj(arg1: ::std::os::raw::c_int, arg2: boolean) -> *mut obj;
}
extern "C" {
    pub fn rndmonnum() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bogon_is_pname(arg1: ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn splitobj(arg1: *mut obj, arg2: ::std::os::raw::c_long) -> *mut obj;
}
extern "C" {
    pub fn unsplitobj(arg1: *mut obj) -> *mut obj;
}
extern "C" {
    pub fn clear_splitobjs();
}
extern "C" {
    pub fn replace_object(arg1: *mut obj, arg2: *mut obj);
}
extern "C" {
    pub fn unknwn_contnr_contents(arg1: *mut obj) -> *mut obj;
}
extern "C" {
    pub fn bill_dummy_object(arg1: *mut obj);
}
extern "C" {
    pub fn costly_alteration(arg1: *mut obj, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mksobj(arg1: ::std::os::raw::c_int, arg2: boolean, arg3: boolean) -> *mut obj;
}
extern "C" {
    pub fn bcsign(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn weight(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkgold(
        arg1: ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut obj;
}
extern "C" {
    pub fn mkcorpstat(
        arg1: ::std::os::raw::c_int,
        arg2: *mut monst,
        arg3: *mut permonst,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_uint,
    ) -> *mut obj;
}
extern "C" {
    pub fn corpse_revive_type(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn obj_attach_mid(arg1: *mut obj, arg2: ::std::os::raw::c_uint) -> *mut obj;
}
extern "C" {
    pub fn get_mtraits(arg1: *mut obj, arg2: boolean) -> *mut monst;
}
extern "C" {
    pub fn mk_tt_object(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut obj;
}
extern "C" {
    pub fn mk_named_object(
        arg1: ::std::os::raw::c_int,
        arg2: *mut permonst,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *const ::std::os::raw::c_char,
    ) -> *mut obj;
}
extern "C" {
    pub fn rnd_treefruit_at(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> *mut obj;
}
extern "C" {
    pub fn set_corpsenm(arg1: *mut obj, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rider_revival_time(arg1: *mut obj, arg2: boolean) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn start_corpse_timeout(arg1: *mut obj);
}
extern "C" {
    pub fn bless(arg1: *mut obj);
}
extern "C" {
    pub fn unbless(arg1: *mut obj);
}
extern "C" {
    pub fn curse(arg1: *mut obj);
}
extern "C" {
    pub fn uncurse(arg1: *mut obj);
}
extern "C" {
    pub fn blessorcurse(arg1: *mut obj, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_bknown(arg1: *mut obj, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn is_flammable(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn is_rottable(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn place_object(arg1: *mut obj, arg2: ::std::os::raw::c_int, arg3: ::std::os::raw::c_int);
}
extern "C" {
    pub fn remove_object(arg1: *mut obj);
}
extern "C" {
    pub fn discard_minvent(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn obj_extract_self(arg1: *mut obj);
}
extern "C" {
    pub fn extract_nobj(arg1: *mut obj, arg2: *mut *mut obj);
}
extern "C" {
    pub fn extract_nexthere(arg1: *mut obj, arg2: *mut *mut obj);
}
extern "C" {
    pub fn add_to_minv(arg1: *mut monst, arg2: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_to_container(arg1: *mut obj, arg2: *mut obj) -> *mut obj;
}
extern "C" {
    pub fn add_to_migration(arg1: *mut obj);
}
extern "C" {
    pub fn add_to_buried(arg1: *mut obj);
}
extern "C" {
    pub fn dealloc_obj(arg1: *mut obj);
}
extern "C" {
    pub fn obj_ice_effects(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int, arg3: boolean);
}
extern "C" {
    pub fn peek_at_iced_corpse_age(arg1: *mut obj) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn hornoplenty(arg1: *mut obj, arg2: boolean) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn obj_sanity_check();
}
extern "C" {
    pub fn obj_nexto(arg1: *mut obj) -> *mut obj;
}
extern "C" {
    pub fn obj_nexto_xy(
        arg1: *mut obj,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: boolean,
    ) -> *mut obj;
}
extern "C" {
    pub fn obj_absorb(arg1: *mut *mut obj, arg2: *mut *mut obj) -> *mut obj;
}
extern "C" {
    pub fn obj_meld(arg1: *mut *mut obj, arg2: *mut *mut obj) -> *mut obj;
}
extern "C" {
    pub fn pudding_merge_message(arg1: *mut obj, arg2: *mut obj);
}
extern "C" {
    pub fn init_dummyobj(
        arg1: *mut obj,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_long,
    ) -> *mut obj;
}
extern "C" {
    pub fn do_mkroom(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn fill_zoo(arg1: *mut mkroom);
}
extern "C" {
    pub fn antholemon() -> *mut permonst;
}
extern "C" {
    pub fn nexttodoor(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn has_dnstairs(arg1: *mut mkroom) -> boolean;
}
extern "C" {
    pub fn has_upstairs(arg1: *mut mkroom) -> boolean;
}
extern "C" {
    pub fn somex(arg1: *mut mkroom) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn somey(arg1: *mut mkroom) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inside_room(arg1: *mut mkroom, arg2: xchar, arg3: xchar) -> boolean;
}
extern "C" {
    pub fn somexy(arg1: *mut mkroom, arg2: *mut coord) -> boolean;
}
extern "C" {
    pub fn somexyspace(arg1: *mut mkroom, arg2: *mut coord) -> boolean;
}
extern "C" {
    pub fn mkundead(arg1: *mut coord, arg2: boolean, arg3: ::std::os::raw::c_int);
}
extern "C" {
    pub fn courtmon() -> *mut permonst;
}
extern "C" {
    pub fn save_rooms(arg1: *mut NHFILE);
}
extern "C" {
    pub fn rest_rooms(arg1: *mut NHFILE);
}
extern "C" {
    pub fn search_special(arg1: schar) -> *mut mkroom;
}
extern "C" {
    pub fn cmap_to_type(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mon_sanity_check();
}
extern "C" {
    pub fn zombie_maker(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn zombie_form(arg1: *mut permonst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn m_poisongas_ok(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn undead_to_corpse(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn genus(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pm_to_cham(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn minliquid(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn movemon() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn meatmetal(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn meatobj(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn meatcorpse(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpickgold(arg1: *mut monst);
}
extern "C" {
    pub fn mpickstuff(arg1: *mut monst, arg2: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn curr_mon_load(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn max_mon_load(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn can_carry(arg1: *mut monst, arg2: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mon_allowflags(arg1: *mut monst) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mfndpos(
        arg1: *mut monst,
        arg2: *mut coord,
        arg3: *mut ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn monnear(
        arg1: *mut monst,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn dmonsfree();
}
extern "C" {
    pub fn elemental_clog(arg1: *mut monst);
}
extern "C" {
    pub fn mcalcmove(arg1: *mut monst, arg2: boolean) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mcalcdistress();
}
extern "C" {
    pub fn replmon(arg1: *mut monst, arg2: *mut monst);
}
extern "C" {
    pub fn relmon(arg1: *mut monst, arg2: *mut *mut monst);
}
extern "C" {
    pub fn mlifesaver(arg1: *mut monst) -> *mut obj;
}
extern "C" {
    pub fn corpse_chance(arg1: *mut monst, arg2: *mut monst, arg3: boolean) -> boolean;
}
extern "C" {
    pub fn mondead(arg1: *mut monst);
}
extern "C" {
    pub fn mondied(arg1: *mut monst);
}
extern "C" {
    pub fn mongone(arg1: *mut monst);
}
extern "C" {
    pub fn monstone(arg1: *mut monst);
}
extern "C" {
    pub fn monkilled(
        arg1: *mut monst,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn set_ustuck(arg1: *mut monst);
}
extern "C" {
    pub fn unstuck(arg1: *mut monst);
}
extern "C" {
    pub fn killed(arg1: *mut monst);
}
extern "C" {
    pub fn xkilled(arg1: *mut monst, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mon_to_stone(arg1: *mut monst);
}
extern "C" {
    pub fn m_into_limbo(arg1: *mut monst);
}
extern "C" {
    pub fn mnexto(arg1: *mut monst);
}
extern "C" {
    pub fn maybe_mnexto(arg1: *mut monst);
}
extern "C" {
    pub fn mnearto(
        arg1: *mut monst,
        arg2: xchar,
        arg3: xchar,
        arg4: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn m_respond(arg1: *mut monst);
}
extern "C" {
    pub fn setmangry(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn wakeup(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn wake_nearby();
}
extern "C" {
    pub fn wake_nearto(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn seemimic(arg1: *mut monst);
}
extern "C" {
    pub fn rescham();
}
extern "C" {
    pub fn restartcham();
}
extern "C" {
    pub fn restore_cham(arg1: *mut monst);
}
extern "C" {
    pub fn maybe_unhide_at(arg1: xchar, arg2: xchar);
}
extern "C" {
    pub fn hideunder(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn hide_monst(arg1: *mut monst);
}
extern "C" {
    pub fn mon_animal_list(arg1: boolean);
}
extern "C" {
    pub fn valid_vampshiftform(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> boolean;
}
extern "C" {
    pub fn validvamp(
        arg1: *mut monst,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn select_newcham_form(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mgender_from_permonst(arg1: *mut monst, arg2: *mut permonst);
}
extern "C" {
    pub fn newcham(
        arg1: *mut monst,
        arg2: *mut permonst,
        arg3: boolean,
        arg4: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn can_be_hatched(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn egg_type_from_parent(
        arg1: ::std::os::raw::c_int,
        arg2: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dead_species(arg1: ::std::os::raw::c_int, arg2: boolean) -> boolean;
}
extern "C" {
    pub fn kill_genocided_monsters();
}
extern "C" {
    pub fn golemeffects(arg1: *mut monst, arg2: ::std::os::raw::c_int, arg3: ::std::os::raw::c_int);
}
extern "C" {
    pub fn angry_guards(arg1: boolean) -> boolean;
}
extern "C" {
    pub fn pacify_guards();
}
extern "C" {
    pub fn decide_to_shapeshift(arg1: *mut monst, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn vamp_stone(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn set_mon_data(arg1: *mut monst, arg2: *mut permonst);
}
extern "C" {
    pub fn attacktype_fordmg(
        arg1: *mut permonst,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut attack;
}
extern "C" {
    pub fn attacktype(arg1: *mut permonst, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn noattacks(arg1: *mut permonst) -> boolean;
}
extern "C" {
    pub fn poly_when_stoned(arg1: *mut permonst) -> boolean;
}
extern "C" {
    pub fn resists_drli(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn resists_magm(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn resists_blnd(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn can_blnd(arg1: *mut monst, arg2: *mut monst, arg3: uchar, arg4: *mut obj) -> boolean;
}
extern "C" {
    pub fn ranged_attk(arg1: *mut permonst) -> boolean;
}
extern "C" {
    pub fn hates_silver(arg1: *mut permonst) -> boolean;
}
extern "C" {
    pub fn mon_hates_silver(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn mon_hates_light(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn passes_bars(arg1: *mut permonst) -> boolean;
}
extern "C" {
    pub fn can_blow(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn can_chant(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn can_be_strangled(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn can_track(arg1: *mut permonst) -> boolean;
}
extern "C" {
    pub fn breakarm(arg1: *mut permonst) -> boolean;
}
extern "C" {
    pub fn sliparm(arg1: *mut permonst) -> boolean;
}
extern "C" {
    pub fn sticks(arg1: *mut permonst) -> boolean;
}
extern "C" {
    pub fn cantvomit(arg1: *mut permonst) -> boolean;
}
extern "C" {
    pub fn num_horns(arg1: *mut permonst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dmgtype_fromattack(
        arg1: *mut permonst,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut attack;
}
extern "C" {
    pub fn dmgtype(arg1: *mut permonst, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn max_passive_dmg(arg1: *mut monst, arg2: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn same_race(arg1: *mut permonst, arg2: *mut permonst) -> boolean;
}
extern "C" {
    pub fn monsndx(arg1: *mut permonst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn name_to_mon(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn name_to_monplus(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn name_to_monclass(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gender(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pronoun_gender(arg1: *mut monst, arg2: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn levl_follower(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn little_to_big(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn big_to_little(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn big_little_match(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn locomotion(
        arg1: *const permonst,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn stagger(
        arg1: *const permonst,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn on_fire(arg1: *mut permonst, arg2: *mut attack) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn raceptr(arg1: *mut monst) -> *const permonst;
}
extern "C" {
    pub fn olfaction(arg1: *mut permonst) -> boolean;
}
extern "C" {
    pub fn itsstuck(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn mb_trapped(arg1: *mut monst, arg2: boolean) -> boolean;
}
extern "C" {
    pub fn monhaskey(arg1: *mut monst, arg2: boolean) -> boolean;
}
extern "C" {
    pub fn mon_regen(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn dochugw(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onscary(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut monst,
    ) -> boolean;
}
extern "C" {
    pub fn find_pmmonst(arg1: ::std::os::raw::c_int) -> *mut monst;
}
extern "C" {
    pub fn bee_eat_jelly(arg1: *mut monst, arg2: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn monflee(arg1: *mut monst, arg2: ::std::os::raw::c_int, arg3: boolean, arg4: boolean);
}
extern "C" {
    pub fn mon_yells(arg1: *mut monst, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn dochug(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn m_digweapon_check(arg1: *mut monst, arg2: xchar, arg3: xchar) -> boolean;
}
extern "C" {
    pub fn m_move(arg1: *mut monst, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn m_move_aggress(arg1: *mut monst, arg2: xchar, arg3: xchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dissolve_bars(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn closed_door(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn accessible(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn set_apparxy(arg1: *mut monst);
}
extern "C" {
    pub fn can_ooze(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn can_fog(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn should_displace(
        arg1: *mut monst,
        arg2: *mut coord,
        arg3: *mut ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_int,
        arg5: xchar,
        arg6: xchar,
    ) -> boolean;
}
extern "C" {
    pub fn undesirable_disp(arg1: *mut monst, arg2: xchar, arg3: xchar) -> boolean;
}
extern "C" {
    pub fn monst_globals_init();
}
extern "C" {
    pub fn mk_mplayer(arg1: *mut permonst, arg2: xchar, arg3: xchar, arg4: boolean) -> *mut monst;
}
extern "C" {
    pub fn create_mplayers(arg1: ::std::os::raw::c_int, arg2: boolean);
}
extern "C" {
    pub fn mplayer_talk(arg1: *mut monst);
}
extern "C" {
    pub fn switchar() -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn freediskspace(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn findfirst(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn findnext() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn filesize(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn foundfile_buffer() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn chdrive(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn disable_ctrlP();
}
extern "C" {
    pub fn enable_ctrlP();
}
extern "C" {
    pub fn get_username(arg1: *mut ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn nt_regularize(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub static mut nt_kbhit: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
}
extern "C" {
    pub fn Delay(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn m_has_launcher_and_ammo(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn thitu(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut obj,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ohitmon(
        arg1: *mut monst,
        arg2: *mut obj,
        arg3: ::std::os::raw::c_int,
        arg4: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn thrwmu(arg1: *mut monst);
}
extern "C" {
    pub fn spitmu(arg1: *mut monst, arg2: *mut attack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn breamu(arg1: *mut monst, arg2: *mut attack) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linedup_callback(
        arg1: xchar,
        arg2: xchar,
        arg3: xchar,
        arg4: xchar,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_int,
            ) -> boolean,
        >,
    ) -> boolean;
}
extern "C" {
    pub fn linedup(
        arg1: xchar,
        arg2: xchar,
        arg3: xchar,
        arg4: xchar,
        arg5: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn lined_up(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn m_carrying(arg1: *mut monst, arg2: ::std::os::raw::c_int) -> *mut obj;
}
extern "C" {
    pub fn thrwmm(arg1: *mut monst, arg2: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spitmm(arg1: *mut monst, arg2: *mut attack, arg3: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn breamm(arg1: *mut monst, arg2: *mut attack, arg3: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn m_useupall(arg1: *mut monst, arg2: *mut obj);
}
extern "C" {
    pub fn m_useup(arg1: *mut monst, arg2: *mut obj);
}
extern "C" {
    pub fn m_throw(
        arg1: *mut monst,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *mut obj,
    );
}
extern "C" {
    pub fn hit_bars(
        arg1: *mut *mut obj,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: boolean,
        arg7: boolean,
    );
}
extern "C" {
    pub fn hits_bars(
        arg1: *mut *mut obj,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn find_defensive(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn use_defensive(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rnd_defensive_item(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_offensive(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn use_offensive(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rnd_offensive_item(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_misc(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn use_misc(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rnd_misc_item(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn searches_for_item(arg1: *mut monst, arg2: *mut obj) -> boolean;
}
extern "C" {
    pub fn mon_reflects(arg1: *mut monst, arg2: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn ureflects(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn mcureblindness(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn munstone(arg1: *mut monst, arg2: boolean) -> boolean;
}
extern "C" {
    pub fn munslime(arg1: *mut monst, arg2: boolean) -> boolean;
}
extern "C" {
    pub fn awaken_soldiers(arg1: *mut monst);
}
extern "C" {
    pub fn do_play_instrument(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_lan_features();
}
extern "C" {
    pub fn lan_username() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn l_selection_check(
        arg1: *mut lua_State,
        arg2: ::std::os::raw::c_int,
    ) -> *mut selectionvar;
}
extern "C" {
    pub fn l_selection_register(arg1: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nhl_push_obj(arg1: *mut lua_State, arg2: *mut obj);
}
extern "C" {
    pub fn nhl_obj_u_giveobj(arg1: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn l_obj_register(arg1: *mut lua_State) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nhl_init() -> *mut lua_State;
}
extern "C" {
    pub fn nhl_done(arg1: *mut lua_State);
}
extern "C" {
    pub fn nhl_loadlua(arg1: *mut lua_State, arg2: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn load_lua(arg1: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn nhl_error(arg1: *mut lua_State, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn lcheck_param_table(arg1: *mut lua_State);
}
extern "C" {
    pub fn get_table_mapchr(arg1: *mut lua_State, arg2: *const ::std::os::raw::c_char) -> schar;
}
extern "C" {
    pub fn get_table_mapchr_opt(
        arg1: *mut lua_State,
        arg2: *const ::std::os::raw::c_char,
        arg3: schar,
    ) -> schar;
}
extern "C" {
    pub fn nhl_add_table_entry_int(
        arg1: *mut lua_State,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn nhl_add_table_entry_char(
        arg1: *mut lua_State,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn nhl_add_table_entry_str(
        arg1: *mut lua_State,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn splev_chr2typ(arg1: ::std::os::raw::c_char) -> schar;
}
extern "C" {
    pub fn check_mapchr(arg1: *const ::std::os::raw::c_char) -> schar;
}
extern "C" {
    pub fn get_table_int(
        arg1: *mut lua_State,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_table_int_opt(
        arg1: *mut lua_State,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_table_str(
        arg1: *mut lua_State,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_table_str_opt(
        arg1: *mut lua_State,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_table_boolean(
        arg1: *mut lua_State,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_table_boolean_opt(
        arg1: *mut lua_State,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_table_option(
        arg1: *mut lua_State,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn str_lines_max_width(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_lua_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn regex_init() -> *mut nhregex;
}
extern "C" {
    pub fn regex_compile(arg1: *const ::std::os::raw::c_char, arg2: *mut nhregex) -> boolean;
}
extern "C" {
    pub fn regex_error_desc(arg1: *mut nhregex) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn regex_match(arg1: *const ::std::os::raw::c_char, arg2: *mut nhregex) -> boolean;
}
extern "C" {
    pub fn regex_free(arg1: *mut nhregex);
}
extern "C" {
    pub fn get_scr_size();
}
extern "C" {
    pub fn nttty_kbhit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nttty_open(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn nttty_rubout();
}
extern "C" {
    pub fn tgetch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ntposkey(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_output_mode(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn synch_cursor();
}
extern "C" {
    pub fn nethack_enter_nttty();
}
extern "C" {
    pub fn nttty_exit();
}
extern "C" {
    pub fn init_objects();
}
extern "C" {
    pub fn obj_shuffle_range(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn find_skates() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn objdescr_is(arg1: *mut obj, arg2: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn oinit();
}
extern "C" {
    pub fn savenames(arg1: *mut NHFILE);
}
extern "C" {
    pub fn restnames(arg1: *mut NHFILE);
}
extern "C" {
    pub fn discover_object(arg1: ::std::os::raw::c_int, arg2: boolean, arg3: boolean);
}
extern "C" {
    pub fn undiscover_object(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn choose_disco_sort(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dodiscovered() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doclassdisco() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename_disco();
}
extern "C" {
    pub fn objects_globals_init();
}
extern "C" {
    pub fn obj_typename(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn simple_typename(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn safe_typename(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn obj_is_pname(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn distant_name(
        arg1: *mut obj,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut obj) -> *mut ::std::os::raw::c_char,
        >,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fruitname(arg1: boolean) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fruit_from_indx(arg1: ::std::os::raw::c_int) -> *mut fruit;
}
extern "C" {
    pub fn fruit_from_name(
        arg1: *const ::std::os::raw::c_char,
        arg2: boolean,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut fruit;
}
extern "C" {
    pub fn reorder_fruit(arg1: boolean);
}
extern "C" {
    pub fn xname(arg1: *mut obj) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mshot_xname(arg1: *mut obj) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn the_unique_obj(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn the_unique_pm(arg1: *mut permonst) -> boolean;
}
extern "C" {
    pub fn erosion_matters(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn doname(arg1: *mut obj) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn doname_with_price(arg1: *mut obj) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn doname_vague_quan(arg1: *mut obj) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn not_fully_identified(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn corpse_xname(
        arg1: *mut obj,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cxname(arg1: *mut obj) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cxname_singular(arg1: *mut obj) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn killer_xname(arg1: *mut obj) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn short_oname(
        arg1: *mut obj,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut obj) -> *mut ::std::os::raw::c_char,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut obj) -> *mut ::std::os::raw::c_char,
        >,
        arg4: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn singular(
        arg1: *mut obj,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut obj) -> *mut ::std::os::raw::c_char,
        >,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn just_an(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn an(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn An(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn The(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn the(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn aobjnam(
        arg1: *mut obj,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn yobjnam(
        arg1: *mut obj,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Yobjnam2(
        arg1: *mut obj,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Tobjnam(
        arg1: *mut obj,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn otense(
        arg1: *mut obj,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn vtense(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Doname2(arg1: *mut obj) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn yname(arg1: *mut obj) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Yname2(arg1: *mut obj) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ysimple_name(arg1: *mut obj) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Ysimple_name2(arg1: *mut obj) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn simpleonames(arg1: *mut obj) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ansimpleoname(arg1: *mut obj) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn thesimpleoname(arg1: *mut obj) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bare_artifactname(arg1: *mut obj) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn makeplural(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn makesingular(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn readobjnam(arg1: *mut ::std::os::raw::c_char, arg2: *mut obj) -> *mut obj;
}
extern "C" {
    pub fn rnd_class(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn suit_simple_name(arg1: *mut obj) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn cloak_simple_name(arg1: *mut obj) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn helm_simple_name(arg1: *mut obj) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn gloves_simple_name(arg1: *mut obj) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn boots_simple_name(arg1: *mut obj) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn shield_simple_name(arg1: *mut obj) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn shirt_simple_name(arg1: *mut obj) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mimic_obj_name(arg1: *mut monst) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn safe_qbuf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut obj,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut obj) -> *mut ::std::os::raw::c_char,
        >,
        arg6: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut obj) -> *mut ::std::os::raw::c_char,
        >,
        arg7: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn shiny_obj(arg1: ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn match_optname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn txt2key(arg1: *mut ::std::os::raw::c_char) -> uchar;
}
extern "C" {
    pub fn initoptions();
}
extern "C" {
    pub fn initoptions_init();
}
extern "C" {
    pub fn initoptions_finish();
}
extern "C" {
    pub fn parseoptions(arg1: *mut ::std::os::raw::c_char, arg2: boolean, arg3: boolean)
        -> boolean;
}
extern "C" {
    pub fn get_option_value(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn doset() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dotogglepickup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn option_help();
}
extern "C" {
    pub fn next_opt(arg1: winid, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fruitadd(arg1: *mut ::std::os::raw::c_char, arg2: *mut fruit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn choose_classes_menu(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: boolean,
        arg4: *mut ::std::os::raw::c_char,
        arg5: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn parsebindings(arg1: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn oc_to_str(arg1: *mut ::std::os::raw::c_char, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn add_menu_cmd_alias(arg1: ::std::os::raw::c_char, arg2: ::std::os::raw::c_char);
}
extern "C" {
    pub fn get_menu_cmd_key(arg1: ::std::os::raw::c_char) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn map_menu_cmd(arg1: ::std::os::raw::c_char) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn collect_menu_keys(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_uint,
        arg3: boolean,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn show_menu_controls(arg1: winid, arg2: boolean);
}
extern "C" {
    pub fn assign_warnings(arg1: *mut uchar);
}
extern "C" {
    pub fn nh_getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn reset_duplicate_opt_detection();
}
extern "C" {
    pub fn set_wc_option_mod_status(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_wc2_option_mod_status(arg1: ::std::os::raw::c_ulong, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn set_option_mod_status(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn add_autopickup_exception(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_autopickup_exceptions();
}
extern "C" {
    pub fn load_symset(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn free_symsets();
}
extern "C" {
    pub fn parsesymbols(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn match_sym(arg1: *mut ::std::os::raw::c_char) -> *mut symparse;
}
extern "C" {
    pub fn set_playmode();
}
extern "C" {
    pub fn sym_val(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn query_color(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn query_attr(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clr2colorname(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn match_str2clr(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn match_str2attr(
        arg1: *const ::std::os::raw::c_char,
        arg2: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_menu_coloring(arg1: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn get_menu_coloring(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn free_menu_coloring();
}
extern "C" {
    pub fn msgtype_parse_add(arg1: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn msgtype_type(
        arg1: *const ::std::os::raw::c_char,
        arg2: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hide_unhide_msgtypes(arg1: boolean, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn msgtype_free();
}
extern "C" {
    pub fn self_lookat(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn monhealthdescr(
        mon: *mut monst,
        arg1: boolean,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mhidden_description(arg1: *mut monst, arg2: boolean, arg3: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn object_from_map(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut *mut obj,
    ) -> boolean;
}
extern "C" {
    pub fn do_screen_description(
        arg1: coord,
        arg2: boolean,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: *mut *const ::std::os::raw::c_char,
        arg6: *mut *mut permonst,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_look(arg1: ::std::os::raw::c_int, arg2: *mut coord) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dowhatis() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doquickwhatis() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doidtrap() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dowhatdoes() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dowhatdoes_core(
        arg1: ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dohelp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dohistory() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdirx(arg1: *mut ::std::os::raw::c_char, arg2: boolean);
}
extern "C" {
    pub fn authorize_wizard_mode() -> boolean;
}
extern "C" {
    pub fn getlock() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_portable_device() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn flushout();
}
extern "C" {
    pub fn dosh() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn append_slash(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn getreturn(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn msmsg(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn gettty();
}
extern "C" {
    pub fn settty(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setftty();
}
extern "C" {
    pub fn error(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn collect_obj_classes(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut obj,
        arg3: boolean,
        arg4: ::std::option::Option<unsafe extern "C" fn(arg1: *mut obj) -> boolean>,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rider_corpse_revival(arg1: *mut obj, arg2: boolean) -> boolean;
}
extern "C" {
    pub fn deferred_decor(arg1: boolean);
}
extern "C" {
    pub fn menu_class_present(arg1: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn add_valid_menu_class(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn allow_all(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn allow_category(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn is_worn_by_type(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn ck_bag(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn removed_from_icebox(arg1: *mut obj);
}
extern "C" {
    pub fn pickup(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pickup_object(
        arg1: *mut obj,
        arg2: ::std::os::raw::c_long,
        arg3: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn query_category(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut obj,
        arg3: ::std::os::raw::c_int,
        arg4: *mut *mut menu_item,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn query_objlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut obj,
        arg3: ::std::os::raw::c_int,
        arg4: *mut *mut menu_item,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::option::Option<unsafe extern "C" fn(arg1: *mut obj) -> boolean>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pick_obj(arg1: *mut obj) -> *mut obj;
}
extern "C" {
    pub fn encumber_msg() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn container_at(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doloot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn observe_quantum_cat(arg1: *mut obj, arg2: boolean, arg3: boolean);
}
extern "C" {
    pub fn container_gone(
        arg1: ::std::option::Option<unsafe extern "C" fn(arg1: *mut obj) -> ::std::os::raw::c_int>,
    ) -> boolean;
}
extern "C" {
    pub fn u_handsy() -> boolean;
}
extern "C" {
    pub fn use_container(
        arg1: *mut *mut obj,
        arg2: ::std::os::raw::c_int,
        arg3: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn loot_mon(
        arg1: *mut monst,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dotip() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_autopickup_exceptions(arg1: *mut obj) -> *mut autopickup_exception;
}
extern "C" {
    pub fn autopick_testobj(arg1: *mut obj, arg2: boolean) -> boolean;
}
extern "C" {
    pub fn dumplogmsg(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn dumplogfreemessages();
}
extern "C" {
    pub fn pline(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn custompline(arg1: ::std::os::raw::c_uint, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn Norep(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn free_youbuf();
}
extern "C" {
    pub fn You(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn Your(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn You_feel(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn You_cant(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn You_hear(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn You_see(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn pline_The(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn There(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn verbalize(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn raw_printf(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn impossible(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn config_error_add(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn nhassert_failed(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn set_uasmon();
}
extern "C" {
    pub fn float_vs_flight();
}
extern "C" {
    pub fn change_sex();
}
extern "C" {
    pub fn polyself(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn polymon(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rehumanize();
}
extern "C" {
    pub fn dobreathe() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dospit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doremove() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dospinweb() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dosummon() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dogaze() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dohide() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dopoly() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn domindblast() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uunstick();
}
extern "C" {
    pub fn skinback(arg1: boolean);
}
extern "C" {
    pub fn mbodypart(
        arg1: *mut monst,
        arg2: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn body_part(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn poly_gender() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ugolemeffects(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ugenocided() -> boolean;
}
extern "C" {
    pub fn udeadinside() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn set_itimeout(arg1: *mut ::std::os::raw::c_long, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn incr_itimeout(arg1: *mut ::std::os::raw::c_long, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn make_confused(arg1: ::std::os::raw::c_long, arg2: boolean);
}
extern "C" {
    pub fn make_stunned(arg1: ::std::os::raw::c_long, arg2: boolean);
}
extern "C" {
    pub fn make_sick(
        arg1: ::std::os::raw::c_long,
        arg2: *const ::std::os::raw::c_char,
        arg3: boolean,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn make_slimed(arg1: ::std::os::raw::c_long, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn make_stoned(
        arg1: ::std::os::raw::c_long,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn make_vomiting(arg1: ::std::os::raw::c_long, arg2: boolean);
}
extern "C" {
    pub fn make_blinded(arg1: ::std::os::raw::c_long, arg2: boolean);
}
extern "C" {
    pub fn toggle_blindness();
}
extern "C" {
    pub fn make_hallucinated(
        arg1: ::std::os::raw::c_long,
        arg2: boolean,
        arg3: ::std::os::raw::c_long,
    ) -> boolean;
}
extern "C" {
    pub fn make_deaf(arg1: ::std::os::raw::c_long, arg2: boolean);
}
extern "C" {
    pub fn make_glib(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn self_invis_message();
}
extern "C" {
    pub fn dodrink() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dopotion(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn peffects(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn healup(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: boolean,
        arg4: boolean,
    );
}
extern "C" {
    pub fn strange_feeling(arg1: *mut obj, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn potionhit(arg1: *mut monst, arg2: *mut obj, arg3: ::std::os::raw::c_int);
}
extern "C" {
    pub fn potionbreathe(arg1: *mut obj);
}
extern "C" {
    pub fn dodip() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mongrantswish(arg1: *mut *mut monst);
}
extern "C" {
    pub fn djinni_from_bottle(arg1: *mut obj);
}
extern "C" {
    pub fn split_mon(arg1: *mut monst, arg2: *mut monst) -> *mut monst;
}
extern "C" {
    pub fn bottlename() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn critically_low_hp(arg1: boolean) -> boolean;
}
extern "C" {
    pub fn stuck_in_wall() -> boolean;
}
extern "C" {
    pub fn dosacrifice() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn can_pray(arg1: boolean) -> boolean;
}
extern "C" {
    pub fn dopray() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u_gname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn doturn() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn altarmask_at(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn a_gname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn a_gname_at(x: xchar, y: xchar) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn align_gname(arg1: aligntyp) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn halu_gname(arg1: aligntyp) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn align_gtitle(arg1: aligntyp) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn altar_wrath(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn move_special(
        arg1: *mut monst,
        arg2: boolean,
        arg3: schar,
        arg4: boolean,
        arg5: boolean,
        arg6: xchar,
        arg7: xchar,
        arg8: xchar,
        arg9: xchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn temple_occupied(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn inhistemple(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn pri_move(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn priestini(
        arg1: *mut d_level,
        arg2: *mut mkroom,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: boolean,
    );
}
extern "C" {
    pub fn mon_aligntyp(arg1: *mut monst) -> aligntyp;
}
extern "C" {
    pub fn priestname(
        arg1: *mut monst,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn p_coaligned(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn findpriest(arg1: ::std::os::raw::c_char) -> *mut monst;
}
extern "C" {
    pub fn intemple(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn forget_temple_entry(arg1: *mut monst);
}
extern "C" {
    pub fn priest_talk(arg1: *mut monst);
}
extern "C" {
    pub fn mk_roamer(
        arg1: *mut permonst,
        arg2: aligntyp,
        arg3: xchar,
        arg4: xchar,
        arg5: boolean,
    ) -> *mut monst;
}
extern "C" {
    pub fn reset_hostility(arg1: *mut monst);
}
extern "C" {
    pub fn in_your_sanctuary(arg1: *mut monst, arg2: xchar, arg3: xchar) -> boolean;
}
extern "C" {
    pub fn ghod_hitsu(arg1: *mut monst);
}
extern "C" {
    pub fn angry_priest();
}
extern "C" {
    pub fn clearpriests();
}
extern "C" {
    pub fn restpriest(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn newepri(arg1: *mut monst);
}
extern "C" {
    pub fn free_epri(arg1: *mut monst);
}
extern "C" {
    pub fn onquest();
}
extern "C" {
    pub fn nemdead();
}
extern "C" {
    pub fn artitouch(arg1: *mut obj);
}
extern "C" {
    pub fn ok_to_quest() -> boolean;
}
extern "C" {
    pub fn leader_speaks(arg1: *mut monst);
}
extern "C" {
    pub fn nemesis_speaks();
}
extern "C" {
    pub fn quest_chat(arg1: *mut monst);
}
extern "C" {
    pub fn quest_talk(arg1: *mut monst);
}
extern "C" {
    pub fn quest_stat_check(arg1: *mut monst);
}
extern "C" {
    pub fn finish_quest(arg1: *mut obj);
}
extern "C" {
    pub fn load_qtlist();
}
extern "C" {
    pub fn unload_qtlist();
}
extern "C" {
    pub fn quest_info(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn ldrname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn is_quest_artifact(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn find_quest_artifact(arg1: ::std::os::raw::c_uint) -> *mut obj;
}
extern "C" {
    pub fn com_pager(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn qt_pager(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn qt_montype() -> *mut permonst;
}
extern "C" {
    pub fn deliver_splev_message();
}
extern "C" {
    pub fn learnscroll(arg1: *mut obj);
}
extern "C" {
    pub fn tshirt_text(
        arg1: *mut obj,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn apron_text(
        arg1: *mut obj,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn candy_wrapper_text(arg1: *mut obj) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn assign_candy_wrapper(arg1: *mut obj);
}
extern "C" {
    pub fn doread() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn charge_ok(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn recharge(arg1: *mut obj, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn seffects(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drop_boulder_on_player(arg1: boolean, arg2: boolean, arg3: boolean, arg4: boolean);
}
extern "C" {
    pub fn drop_boulder_on_monster(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: boolean,
        arg4: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn wand_explode(arg1: *mut obj, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn litroom(arg1: boolean, arg2: *mut obj);
}
extern "C" {
    pub fn do_genocide(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn punish(arg1: *mut obj);
}
extern "C" {
    pub fn unpunish();
}
extern "C" {
    pub fn cant_revive(arg1: *mut ::std::os::raw::c_int, arg2: boolean, arg3: *mut obj) -> boolean;
}
extern "C" {
    pub fn create_particular() -> boolean;
}
extern "C" {
    pub fn init_rect();
}
extern "C" {
    pub fn get_rect(arg1: *mut NhRect) -> *mut NhRect;
}
extern "C" {
    pub fn rnd_rect() -> *mut NhRect;
}
extern "C" {
    pub fn remove_rect(arg1: *mut NhRect);
}
extern "C" {
    pub fn add_rect(arg1: *mut NhRect);
}
extern "C" {
    pub fn split_rects(arg1: *mut NhRect, arg2: *mut NhRect);
}
extern "C" {
    pub fn clear_regions();
}
extern "C" {
    pub fn run_regions();
}
extern "C" {
    pub fn in_out_region(arg1: xchar, arg2: xchar) -> boolean;
}
extern "C" {
    pub fn m_in_out_region(arg1: *mut monst, arg2: xchar, arg3: xchar) -> boolean;
}
extern "C" {
    pub fn update_player_regions();
}
extern "C" {
    pub fn update_monster_region(arg1: *mut monst);
}
extern "C" {
    pub fn visible_region_at(arg1: xchar, arg2: xchar) -> *mut NhRegion;
}
extern "C" {
    pub fn show_region(arg1: *mut NhRegion, arg2: xchar, arg3: xchar);
}
extern "C" {
    pub fn save_regions(arg1: *mut NHFILE);
}
extern "C" {
    pub fn rest_regions(arg1: *mut NHFILE);
}
extern "C" {
    pub fn region_stats(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn create_gas_cloud(
        arg1: xchar,
        arg2: xchar,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut NhRegion;
}
extern "C" {
    pub fn region_danger() -> boolean;
}
extern "C" {
    pub fn region_safety();
}
extern "C" {
    pub fn inven_inuse(arg1: boolean);
}
extern "C" {
    pub fn dorecover(arg1: *mut NHFILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn restcemetery(arg1: *mut NHFILE, arg2: *mut *mut cemetery);
}
extern "C" {
    pub fn trickery(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn getlev(arg1: *mut NHFILE, arg2: ::std::os::raw::c_int, arg3: xchar);
}
extern "C" {
    pub fn get_plname_from_file(arg1: *mut NHFILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn restore_menu(arg1: winid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn minit();
}
extern "C" {
    pub fn lookup_id_mapping(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_uint,
    ) -> boolean;
}
extern "C" {
    pub fn validate(
        arg1: *mut NHFILE,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reset_restpref();
}
extern "C" {
    pub fn set_restpref(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn set_savepref(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn genl_outrip(arg1: winid, arg2: ::std::os::raw::c_int, arg3: time_t);
}
extern "C" {
    pub fn init_isaac64(
        arg1: ::std::os::raw::c_ulong,
        fn_: ::std::option::Option<
            unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn nhrand() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rn2(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rn2_on_display_rng(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rnl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rnd(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn d(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rne(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rnz(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn validrole(arg1: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn validrace(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn validgend(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn validalign(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn randrole(arg1: boolean) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn randrace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn randgend(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn randalign(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn str2role(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn str2race(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn str2gend(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn str2align(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ok_role(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn pick_role(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ok_race(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn pick_race(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ok_gend(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn pick_gend(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ok_align(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn pick_align(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rigid_role_checks();
}
extern "C" {
    pub fn setrolefilter(arg1: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn gotrolefilter() -> boolean;
}
extern "C" {
    pub fn clearrolefilter();
}
extern "C" {
    pub fn build_plselection_prompt(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn root_plselection_prompt(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn plnamesuffix();
}
extern "C" {
    pub fn role_selection_prolog(arg1: ::std::os::raw::c_int, arg2: winid);
}
extern "C" {
    pub fn role_menu_extra(arg1: ::std::os::raw::c_int, arg2: winid, arg3: boolean);
}
extern "C" {
    pub fn role_init();
}
extern "C" {
    pub fn Hello(arg1: *mut monst) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Goodbye() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn getrumor(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: boolean,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_rnd_text(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn outrumor(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn outoracle(arg1: boolean, arg2: boolean);
}
extern "C" {
    pub fn save_oracles(arg1: *mut NHFILE);
}
extern "C" {
    pub fn restore_oracles(arg1: *mut NHFILE);
}
extern "C" {
    pub fn doconsult(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rumor_check();
}
extern "C" {
    pub fn dosave() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dosave0() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tricked_fileremoved(arg1: *mut NHFILE, arg2: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn savestateinlock();
}
extern "C" {
    pub fn savelev(arg1: *mut NHFILE, arg2: xchar);
}
extern "C" {
    pub fn mon_to_buffer(arg1: *mut monst, arg2: *mut ::std::os::raw::c_int) -> genericptr_t;
}
extern "C" {
    pub fn close_check(arg1: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn savecemetery(arg1: *mut NHFILE, arg2: *mut *mut cemetery);
}
extern "C" {
    pub fn savefruitchn(arg1: *mut NHFILE);
}
extern "C" {
    pub fn store_plname_in_file(arg1: *mut NHFILE);
}
extern "C" {
    pub fn free_dungeons();
}
extern "C" {
    pub fn freedynamicdata();
}
extern "C" {
    pub fn store_savefileinfo(arg1: *mut NHFILE);
}
extern "C" {
    pub fn nhdatatypes_size() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn assignlog(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn getlog(arg1: *mut NHFILE) -> *mut FILE;
}
extern "C" {
    pub fn closelog(arg1: *mut NHFILE);
}
extern "C" {
    pub fn newread(
        arg1: *mut NHFILE,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: genericptr_t,
        arg5: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn bufon(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn bufoff(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn bflush(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn bwrite(arg1: ::std::os::raw::c_int, arg2: genericptr_t, arg3: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn mread(arg1: ::std::os::raw::c_int, arg2: genericptr_t, arg3: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn bclose(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Bufon(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Bufoff(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Bflush(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Bwrite(
        arg1: ::std::os::raw::c_int,
        arg2: genericptr_t,
        arg3: ::std::os::raw::c_uint,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Bread(
        arg1: ::std::os::raw::c_int,
        arg2: genericptr_t,
        arg3: ::std::os::raw::c_uint,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Binit(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn Bclose(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Mread(
        arg1: ::std::os::raw::c_int,
        arg2: genericptr_t,
        arg3: ::std::os::raw::c_uint,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn Minit(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setpaid(arg1: *mut monst);
}
extern "C" {
    pub fn money2mon(arg1: *mut monst, arg2: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn money2u(arg1: *mut monst, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn shkgone(arg1: *mut monst);
}
extern "C" {
    pub fn set_residency(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn replshk(arg1: *mut monst, arg2: *mut monst);
}
extern "C" {
    pub fn restshk(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn inside_shop(arg1: xchar, arg2: xchar) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn u_left_shop(arg1: *mut ::std::os::raw::c_char, arg2: boolean);
}
extern "C" {
    pub fn remote_burglary(arg1: xchar, arg2: xchar);
}
extern "C" {
    pub fn u_entered_shop(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn pick_pick(arg1: *mut obj);
}
extern "C" {
    pub fn same_price(arg1: *mut obj, arg2: *mut obj) -> boolean;
}
extern "C" {
    pub fn shopper_financial_report();
}
extern "C" {
    pub fn inhishop(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shop_keeper(arg1: ::std::os::raw::c_char) -> *mut monst;
}
extern "C" {
    pub fn tended_shop(arg1: *mut mkroom) -> boolean;
}
extern "C" {
    pub fn is_unpaid(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn delete_contents(arg1: *mut obj);
}
extern "C" {
    pub fn obfree(arg1: *mut obj, arg2: *mut obj);
}
extern "C" {
    pub fn home_shk(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn make_happy_shk(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn make_happy_shoppers(arg1: boolean);
}
extern "C" {
    pub fn hot_pursuit(arg1: *mut monst);
}
extern "C" {
    pub fn make_angry_shk(arg1: *mut monst, arg2: xchar, arg3: xchar);
}
extern "C" {
    pub fn dopay() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn paybill(arg1: ::std::os::raw::c_int, arg2: boolean) -> boolean;
}
extern "C" {
    pub fn finish_paybill();
}
extern "C" {
    pub fn find_oid(arg1: ::std::os::raw::c_uint) -> *mut obj;
}
extern "C" {
    pub fn contained_cost(
        arg1: *mut obj,
        arg2: *mut monst,
        arg3: ::std::os::raw::c_long,
        arg4: boolean,
        arg5: boolean,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn contained_gold(arg1: *mut obj, arg2: boolean) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn picked_container(arg1: *mut obj);
}
extern "C" {
    pub fn gem_learned(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn alter_cost(arg1: *mut obj, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn unpaid_cost(arg1: *mut obj, arg2: boolean) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn billable(
        arg1: *mut *mut monst,
        arg2: *mut obj,
        arg3: ::std::os::raw::c_char,
        arg4: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn addtobill(arg1: *mut obj, arg2: boolean, arg3: boolean, arg4: boolean);
}
extern "C" {
    pub fn splitbill(arg1: *mut obj, arg2: *mut obj);
}
extern "C" {
    pub fn subfrombill(arg1: *mut obj, arg2: *mut monst);
}
extern "C" {
    pub fn stolen_value(
        arg1: *mut obj,
        arg2: xchar,
        arg3: xchar,
        arg4: boolean,
        arg5: boolean,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn donate_gold(arg1: ::std::os::raw::c_long, arg2: *mut monst, arg3: boolean);
}
extern "C" {
    pub fn sellobj_state(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sellobj(arg1: *mut obj, arg2: xchar, arg3: xchar);
}
extern "C" {
    pub fn doinvbill(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shkcatch(arg1: *mut obj, arg2: xchar, arg3: xchar) -> *mut monst;
}
extern "C" {
    pub fn add_damage(arg1: xchar, arg2: xchar, arg3: ::std::os::raw::c_long);
}
extern "C" {
    pub fn repair_damage(
        arg1: *mut monst,
        arg2: *mut damage,
        arg3: *mut ::std::os::raw::c_int,
        arg4: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shk_move(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn after_shk_move(arg1: *mut monst);
}
extern "C" {
    pub fn is_fshk(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn shopdig(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn pay_for_damage(arg1: *const ::std::os::raw::c_char, arg2: boolean);
}
extern "C" {
    pub fn costly_spot(arg1: xchar, arg2: xchar) -> boolean;
}
extern "C" {
    pub fn shop_object(arg1: xchar, arg2: xchar) -> *mut obj;
}
extern "C" {
    pub fn price_quote(arg1: *mut obj);
}
extern "C" {
    pub fn shk_chat(arg1: *mut monst);
}
extern "C" {
    pub fn check_unpaid_usage(arg1: *mut obj, arg2: boolean);
}
extern "C" {
    pub fn check_unpaid(arg1: *mut obj);
}
extern "C" {
    pub fn costly_gold(arg1: xchar, arg2: xchar, arg3: ::std::os::raw::c_long);
}
extern "C" {
    pub fn get_cost_of_shop_item(
        arg1: *mut obj,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn oid_price_adjustment(
        arg1: *mut obj,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn block_door(arg1: xchar, arg2: xchar) -> boolean;
}
extern "C" {
    pub fn block_entry(arg1: xchar, arg2: xchar) -> boolean;
}
extern "C" {
    pub fn shk_your(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut obj,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn Shk_Your(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut obj,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn globby_bill_fixup(arg1: *mut obj, arg2: *mut obj);
}
extern "C" {
    pub fn globby_donation(arg1: *mut obj, arg2: *mut obj);
}
extern "C" {
    pub fn neweshk(arg1: *mut monst);
}
extern "C" {
    pub fn free_eshk(arg1: *mut monst);
}
extern "C" {
    pub fn stock_room(arg1: ::std::os::raw::c_int, arg2: *mut mkroom);
}
extern "C" {
    pub fn saleable(arg1: *mut monst, arg2: *mut obj) -> boolean;
}
extern "C" {
    pub fn get_shop_item(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Shknam(arg1: *mut monst) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn shkname(arg1: *mut monst) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn shkname_is_pname(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn is_izchak(arg1: *mut monst, arg2: boolean) -> boolean;
}
extern "C" {
    pub fn take_gold();
}
extern "C" {
    pub fn dosit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rndcurse();
}
extern "C" {
    pub fn attrcurse();
}
extern "C" {
    pub fn dosounds();
}
extern "C" {
    pub fn growl_sound(arg1: *mut monst) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn growl(arg1: *mut monst);
}
extern "C" {
    pub fn yelp(arg1: *mut monst);
}
extern "C" {
    pub fn whimper(arg1: *mut monst);
}
extern "C" {
    pub fn beg(arg1: *mut monst);
}
extern "C" {
    pub fn maybe_gasp(arg1: *mut monst) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn dotalk() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tiphat() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add_sound_mapping(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn play_sound_for_message(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn maybe_play_sound(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn release_sound_mappings();
}
extern "C" {
    pub fn create_des_coder();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mapfragment {
    _unused: [u8; 0],
}
extern "C" {
    pub fn mapfrag_fromstr(arg1: *mut ::std::os::raw::c_char) -> *mut mapfragment;
}
extern "C" {
    pub fn mapfrag_free(arg1: *mut *mut mapfragment);
}
extern "C" {
    pub fn mapfrag_get(
        arg1: *mut mapfragment,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> schar;
}
extern "C" {
    pub fn mapfrag_canmatch(arg1: *mut mapfragment) -> boolean;
}
extern "C" {
    pub fn mapfrag_error(arg1: *mut mapfragment) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mapfrag_match(
        arg1: *mut mapfragment,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn flip_level(arg1: ::std::os::raw::c_int, arg2: boolean);
}
extern "C" {
    pub fn flip_level_rnd(arg1: ::std::os::raw::c_int, arg2: boolean);
}
extern "C" {
    pub fn check_room(
        arg1: *mut xchar,
        arg2: *mut xchar,
        arg3: *mut xchar,
        arg4: *mut xchar,
        arg5: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn create_room(
        arg1: xchar,
        arg2: xchar,
        arg3: xchar,
        arg4: xchar,
        arg5: xchar,
        arg6: xchar,
        arg7: xchar,
        arg8: xchar,
    ) -> boolean;
}
extern "C" {
    pub fn create_secret_door(arg1: *mut mkroom, arg2: xchar);
}
extern "C" {
    pub fn dig_corridor(
        arg1: *mut coord,
        arg2: *mut coord,
        arg3: boolean,
        arg4: schar,
        arg5: schar,
    ) -> boolean;
}
extern "C" {
    pub fn fill_special_room(arg1: *mut mkroom);
}
extern "C" {
    pub fn wallify_map(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn load_special(arg1: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn selection_getpoint(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut selectionvar,
    ) -> xchar;
}
extern "C" {
    pub fn selection_new() -> *mut selectionvar;
}
extern "C" {
    pub fn selection_free(arg1: *mut selectionvar, arg2: boolean);
}
extern "C" {
    pub fn selection_clone(arg1: *mut selectionvar) -> *mut selectionvar;
}
extern "C" {
    pub fn set_selection_floodfillchk(
        arg1: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn selection_floodfill(
        arg1: *mut selectionvar,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: boolean,
    );
}
extern "C" {
    pub fn pm_good_location(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut permonst,
    ) -> boolean;
}
extern "C" {
    pub fn get_location_coord(
        arg1: *mut xchar,
        arg2: *mut xchar,
        arg3: ::std::os::raw::c_int,
        arg4: *mut mkroom,
        arg5: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn selection_setpoint(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut selectionvar,
        arg4: xchar,
    );
}
extern "C" {
    pub fn selection_not(arg1: *mut selectionvar) -> *mut selectionvar;
}
extern "C" {
    pub fn selection_filter_percent(arg1: *mut selectionvar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn selection_rndcoord(
        arg1: *mut selectionvar,
        arg2: *mut xchar,
        arg3: *mut xchar,
        arg4: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn selection_do_grow(arg1: *mut selectionvar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn selection_do_line(
        arg1: xchar,
        arg2: xchar,
        arg3: xchar,
        arg4: xchar,
        arg5: *mut selectionvar,
    );
}
extern "C" {
    pub fn selection_do_randline(
        arg1: xchar,
        arg2: xchar,
        arg3: xchar,
        arg4: xchar,
        arg5: schar,
        arg6: schar,
        arg7: *mut selectionvar,
    );
}
extern "C" {
    pub fn selection_filter_mapchar(
        arg1: *mut selectionvar,
        arg2: xchar,
        arg3: ::std::os::raw::c_int,
    ) -> *mut selectionvar;
}
extern "C" {
    pub fn set_floodfillchk_match_under(arg1: xchar);
}
extern "C" {
    pub fn selection_do_ellipse(
        arg1: *mut selectionvar,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn selection_do_gradient(
        arg1: *mut selectionvar,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_long,
        arg4: ::std::os::raw::c_long,
        arg5: ::std::os::raw::c_long,
        arg6: ::std::os::raw::c_long,
        arg7: ::std::os::raw::c_long,
        arg8: ::std::os::raw::c_long,
        arg9: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn update_croom();
}
extern "C" {
    pub fn get_trapname_bytype(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn l_register_des(arg1: *mut lua_State);
}
extern "C" {
    pub fn book_cursed(arg1: *mut obj);
}
extern "C" {
    pub fn study_book(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn book_disappears(arg1: *mut obj);
}
extern "C" {
    pub fn book_substitution(arg1: *mut obj, arg2: *mut obj);
}
extern "C" {
    pub fn age_spells();
}
extern "C" {
    pub fn docast() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spell_skilltype(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spelleffects(arg1: ::std::os::raw::c_int, arg2: boolean) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tport_spell(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn losespells();
}
extern "C" {
    pub fn dovspell() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initialspell(arg1: *mut obj);
}
extern "C" {
    pub fn somegold(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn stealgold(arg1: *mut monst);
}
extern "C" {
    pub fn thiefdead();
}
extern "C" {
    pub fn remove_worn_item(arg1: *mut obj, arg2: boolean);
}
extern "C" {
    pub fn steal(arg1: *mut monst, arg2: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mpickobj(arg1: *mut monst, arg2: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stealamulet(arg1: *mut monst);
}
extern "C" {
    pub fn maybe_absorb_item(
        arg1: *mut monst,
        arg2: *mut obj,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mdrop_obj(arg1: *mut monst, arg2: *mut obj, arg3: boolean);
}
extern "C" {
    pub fn mdrop_special_objs(arg1: *mut monst);
}
extern "C" {
    pub fn relobj(arg1: *mut monst, arg2: ::std::os::raw::c_int, arg3: boolean);
}
extern "C" {
    pub fn findgold(arg1: *mut obj) -> *mut obj;
}
extern "C" {
    pub fn rider_cant_reach();
}
extern "C" {
    pub fn can_saddle(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn use_saddle(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn put_saddle_on_mon(arg1: *mut obj, arg2: *mut monst);
}
extern "C" {
    pub fn can_ride(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn doride() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mount_steed(arg1: *mut monst, arg2: boolean) -> boolean;
}
extern "C" {
    pub fn exercise_steed();
}
extern "C" {
    pub fn kick_steed();
}
extern "C" {
    pub fn dismount_steed(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn place_monster(
        arg1: *mut monst,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn stucksteed(arg1: boolean) -> boolean;
}
extern "C" {
    pub fn switch_symbols(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn assign_graphics(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn init_symbols();
}
extern "C" {
    pub fn init_showsyms();
}
extern "C" {
    pub fn init_primary_symbols();
}
extern "C" {
    pub fn init_rogue_symbols();
}
extern "C" {
    pub fn init_ov_primary_symbols();
}
extern "C" {
    pub fn init_ov_rogue_symbols();
}
extern "C" {
    pub fn clear_symsetentry(arg1: ::std::os::raw::c_int, arg2: boolean);
}
extern "C" {
    pub fn update_primary_symset(arg1: *mut symparse, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn update_rogue_symset(arg1: *mut symparse, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn update_ov_primary_symset(arg1: *mut symparse, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn update_ov_rogue_symset(arg1: *mut symparse, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn get_othersym(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> nhsym;
}
extern "C" {
    pub fn sys_early_init();
}
extern "C" {
    pub fn sysopt_release();
}
extern "C" {
    pub fn sysopt_seduce_set(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn noteleport_level(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn goodpos(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut monst,
        arg4: ::std::os::raw::c_long,
    ) -> boolean;
}
extern "C" {
    pub fn enexto(arg1: *mut coord, arg2: xchar, arg3: xchar, arg4: *mut permonst) -> boolean;
}
extern "C" {
    pub fn enexto_core(
        arg1: *mut coord,
        arg2: xchar,
        arg3: xchar,
        arg4: *mut permonst,
        arg5: ::std::os::raw::c_long,
    ) -> boolean;
}
extern "C" {
    pub fn teleds(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn safe_teleds(arg1: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn teleport_pet(arg1: *mut monst, arg2: boolean) -> boolean;
}
extern "C" {
    pub fn tele();
}
extern "C" {
    pub fn scrolltele(arg1: *mut obj);
}
extern "C" {
    pub fn dotelecmd() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dotele(arg1: boolean) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn level_tele();
}
extern "C" {
    pub fn domagicportal(arg1: *mut trap);
}
extern "C" {
    pub fn tele_trap(arg1: *mut trap);
}
extern "C" {
    pub fn level_tele_trap(arg1: *mut trap, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rloc_to(arg1: *mut monst, arg2: ::std::os::raw::c_int, arg3: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rloc(arg1: *mut monst, arg2: boolean) -> boolean;
}
extern "C" {
    pub fn tele_restrict(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn mtele_trap(arg1: *mut monst, arg2: *mut trap, arg3: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mlevel_tele_trap(
        arg1: *mut monst,
        arg2: *mut trap,
        arg3: boolean,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rloco(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn random_teleport_level() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn u_teleport_mon(arg1: *mut monst, arg2: boolean) -> boolean;
}
extern "C" {
    pub fn substitute_tiles(arg1: *mut d_level);
}
extern "C" {
    pub fn burn_away_slime();
}
extern "C" {
    pub fn nh_timeout();
}
extern "C" {
    pub fn fall_asleep(arg1: ::std::os::raw::c_int, arg2: boolean);
}
extern "C" {
    pub fn attach_egg_hatch_timeout(arg1: *mut obj, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn attach_fig_transform_timeout(arg1: *mut obj);
}
extern "C" {
    pub fn kill_egg(arg1: *mut obj);
}
extern "C" {
    pub fn hatch_egg(arg1: *mut any, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn learn_egg_type(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn burn_object(arg1: *mut any, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn begin_burn(arg1: *mut obj, arg2: boolean);
}
extern "C" {
    pub fn end_burn(arg1: *mut obj, arg2: boolean);
}
extern "C" {
    pub fn do_storms();
}
extern "C" {
    pub fn start_timer(
        arg1: ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::os::raw::c_short,
        arg4: *mut any,
    ) -> boolean;
}
extern "C" {
    pub fn stop_timer(arg1: ::std::os::raw::c_short, arg2: *mut any) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn peek_timer(arg1: ::std::os::raw::c_short, arg2: *mut any) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn run_timers();
}
extern "C" {
    pub fn obj_move_timers(arg1: *mut obj, arg2: *mut obj);
}
extern "C" {
    pub fn obj_split_timers(arg1: *mut obj, arg2: *mut obj);
}
extern "C" {
    pub fn obj_stop_timers(arg1: *mut obj);
}
extern "C" {
    pub fn obj_has_timer(arg1: *mut obj, arg2: ::std::os::raw::c_short) -> boolean;
}
extern "C" {
    pub fn spot_stop_timers(arg1: xchar, arg2: xchar, arg3: ::std::os::raw::c_short);
}
extern "C" {
    pub fn spot_time_expires(
        arg1: xchar,
        arg2: xchar,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn spot_time_left(
        arg1: xchar,
        arg2: xchar,
        arg3: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn obj_is_local(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn save_timers(arg1: *mut NHFILE, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn restore_timers(
        arg1: *mut NHFILE,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn timer_stats(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
    );
}
extern "C" {
    pub fn relink_timers(arg1: boolean);
}
extern "C" {
    pub fn wiz_timeout_queue() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_sanity_check();
}
extern "C" {
    pub fn formatkiller(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
        arg4: boolean,
    );
}
extern "C" {
    pub fn observable_depth(arg1: *mut d_level) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn topten(arg1: ::std::os::raw::c_int, arg2: time_t);
}
extern "C" {
    pub fn prscore(arg1: ::std::os::raw::c_int, arg2: *mut *mut ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct toptenentry {
    _unused: [u8; 0],
}
extern "C" {
    pub fn get_rnd_toptenentry() -> *mut toptenentry;
}
extern "C" {
    pub fn tt_oname(arg1: *mut obj) -> *mut obj;
}
extern "C" {
    pub fn initrack();
}
extern "C" {
    pub fn settrack();
}
extern "C" {
    pub fn gettrack(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> *mut coord;
}
extern "C" {
    pub fn burnarmor(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn erode_obj(
        arg1: *mut obj,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grease_protect(
        arg1: *mut obj,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut monst,
    ) -> boolean;
}
extern "C" {
    pub fn maketrap(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut trap;
}
extern "C" {
    pub fn fall_through(arg1: boolean, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn animate_statue(
        arg1: *mut obj,
        arg2: xchar,
        arg3: xchar,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> *mut monst;
}
extern "C" {
    pub fn activate_statue_trap(
        arg1: *mut trap,
        arg2: xchar,
        arg3: xchar,
        arg4: boolean,
    ) -> *mut monst;
}
extern "C" {
    pub fn set_utrap(arg1: ::std::os::raw::c_uint, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn reset_utrap(arg1: boolean);
}
extern "C" {
    pub fn dotrap(arg1: *mut trap, arg2: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn seetrap(arg1: *mut trap);
}
extern "C" {
    pub fn feeltrap(arg1: *mut trap);
}
extern "C" {
    pub fn mintrap(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn instapetrify(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn minstapetrify(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn selftouch(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn mselftouch(arg1: *mut monst, arg2: *const ::std::os::raw::c_char, arg3: boolean);
}
extern "C" {
    pub fn float_up();
}
extern "C" {
    pub fn fill_pit(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn float_down(
        arg1: ::std::os::raw::c_long,
        arg2: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn climb_pit();
}
extern "C" {
    pub fn fire_damage(arg1: *mut obj, arg2: boolean, arg3: xchar, arg4: xchar) -> boolean;
}
extern "C" {
    pub fn fire_damage_chain(
        arg1: *mut obj,
        arg2: boolean,
        arg3: boolean,
        arg4: xchar,
        arg5: xchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lava_damage(arg1: *mut obj, arg2: xchar, arg3: xchar) -> boolean;
}
extern "C" {
    pub fn acid_damage(arg1: *mut obj);
}
extern "C" {
    pub fn water_damage(
        arg1: *mut obj,
        arg2: *const ::std::os::raw::c_char,
        arg3: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn water_damage_chain(arg1: *mut obj, arg2: boolean);
}
extern "C" {
    pub fn drown() -> boolean;
}
extern "C" {
    pub fn drain_en(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn dountrap() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cnv_trap_obj(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut trap,
        arg4: boolean,
    );
}
extern "C" {
    pub fn untrap(arg1: boolean) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openholdingtrap(arg1: *mut monst, arg2: *mut boolean) -> boolean;
}
extern "C" {
    pub fn closeholdingtrap(arg1: *mut monst, arg2: *mut boolean) -> boolean;
}
extern "C" {
    pub fn openfallingtrap(arg1: *mut monst, arg2: boolean, arg3: *mut boolean) -> boolean;
}
extern "C" {
    pub fn chest_trap(arg1: *mut obj, arg2: ::std::os::raw::c_int, arg3: boolean) -> boolean;
}
extern "C" {
    pub fn deltrap(arg1: *mut trap);
}
extern "C" {
    pub fn delfloortrap(arg1: *mut trap) -> boolean;
}
extern "C" {
    pub fn t_at(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> *mut trap;
}
extern "C" {
    pub fn b_trapped(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn unconscious() -> boolean;
}
extern "C" {
    pub fn blow_up_landmine(arg1: *mut trap);
}
extern "C" {
    pub fn launch_obj(
        arg1: ::std::os::raw::c_short,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn launch_in_progress() -> boolean;
}
extern "C" {
    pub fn force_launch_placement();
}
extern "C" {
    pub fn uteetering_at_seen_pit(arg1: *mut trap) -> boolean;
}
extern "C" {
    pub fn uescaped_shaft(arg1: *mut trap) -> boolean;
}
extern "C" {
    pub fn lava_effects() -> boolean;
}
extern "C" {
    pub fn sink_into_lava();
}
extern "C" {
    pub fn sokoban_guilt();
}
extern "C" {
    pub fn trapname(arg1: ::std::os::raw::c_int, arg2: boolean) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ignite_items(arg1: *mut obj);
}
extern "C" {
    pub fn u_init();
}
extern "C" {
    pub fn dynamic_multi_reason(
        arg1: *mut monst,
        arg2: *const ::std::os::raw::c_char,
        arg3: boolean,
    );
}
extern "C" {
    pub fn erode_armor(arg1: *mut monst, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn attack_checks(arg1: *mut monst, arg2: *mut obj) -> boolean;
}
extern "C" {
    pub fn check_caitiff(arg1: *mut monst);
}
extern "C" {
    pub fn find_roll_to_hit(
        arg1: *mut monst,
        arg2: uchar,
        arg3: *mut obj,
        arg4: *mut ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_attack(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn hmon(
        arg1: *mut monst,
        arg2: *mut obj,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn shade_miss(
        arg1: *mut monst,
        arg2: *mut monst,
        arg3: *mut obj,
        arg4: boolean,
        arg5: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn mhitm_ad_rust(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_corr(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_dcay(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_dren(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_drli(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_fire(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_cold(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_elec(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_acid(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_sgld(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_tlpt(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_blnd(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_curs(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_drst(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_drin(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_stck(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_wrap(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_plys(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_slee(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_slim(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_ench(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_slow(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_conf(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_poly(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_famn(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_pest(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_deth(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_halu(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_phys(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_ston(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_were(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_heal(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_stun(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_legs(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_dgst(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_samu(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_dise(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_sedu(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_ad_ssex(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn mhitm_adtyping(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn do_stone_u(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn do_stone_mon(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: *mut monst,
        arg4: *mut mhitm_data,
    );
}
extern "C" {
    pub fn damageum(
        arg1: *mut monst,
        arg2: *mut attack,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn missum(arg1: *mut monst, arg2: *mut attack, arg3: boolean);
}
extern "C" {
    pub fn passive(
        arg1: *mut monst,
        arg2: *mut obj,
        arg3: boolean,
        arg4: boolean,
        arg5: uchar,
        arg6: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn passive_obj(arg1: *mut monst, arg2: *mut obj, arg3: *mut attack);
}
extern "C" {
    pub fn stumble_onto_mimic(arg1: *mut monst);
}
extern "C" {
    pub fn flash_hits_mon(arg1: *mut monst, arg2: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn light_hits_gremlin(arg1: *mut monst, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newegd(arg1: *mut monst);
}
extern "C" {
    pub fn free_egd(arg1: *mut monst);
}
extern "C" {
    pub fn grddead(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn findgd() -> *mut monst;
}
extern "C" {
    pub fn vault_summon_gd();
}
extern "C" {
    pub fn vault_occupied(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn uleftvault(arg1: *mut monst);
}
extern "C" {
    pub fn invault();
}
extern "C" {
    pub fn gd_move(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn paygd(arg1: boolean);
}
extern "C" {
    pub fn hidden_gold(arg1: boolean) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn gd_sound() -> boolean;
}
extern "C" {
    pub fn vault_gd_watching(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn version_string(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getversionstring(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn doversion() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doextversion() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn check_version(
        arg1: *mut version_info,
        arg2: *const ::std::os::raw::c_char,
        arg3: boolean,
        arg4: ::std::os::raw::c_ulong,
    ) -> boolean;
}
extern "C" {
    pub fn uptodate(
        arg1: *mut NHFILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> boolean;
}
extern "C" {
    pub fn store_formatindicator(arg1: *mut NHFILE);
}
extern "C" {
    pub fn store_version(arg1: *mut NHFILE);
}
extern "C" {
    pub fn get_feature_notice_ver(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn get_current_feature_ver() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn copyright_banner_line(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn early_version_info(arg1: boolean);
}
extern "C" {
    pub fn get_port_id(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn port_insert_pastebuf(arg1: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn vision_init();
}
extern "C" {
    pub fn does_block(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vision_reset();
}
extern "C" {
    pub fn vision_recalc(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn block_point(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn unblock_point(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn clear_path(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn do_clear_area(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        arg5: genericptr_t,
    );
}
extern "C" {
    pub fn howmonseen(arg1: *mut monst) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn weapon_descr(arg1: *mut obj) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn hitval(arg1: *mut obj, arg2: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dmgval(arg1: *mut obj, arg2: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn special_dmgval(
        arg1: *mut monst,
        arg2: *mut monst,
        arg3: ::std::os::raw::c_long,
        arg4: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn silver_sears(arg1: *mut monst, arg2: *mut monst, arg3: ::std::os::raw::c_long);
}
extern "C" {
    pub fn select_rwep(arg1: *mut monst) -> *mut obj;
}
extern "C" {
    pub fn monmightthrowwep(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn select_hwep(arg1: *mut monst) -> *mut obj;
}
extern "C" {
    pub fn possibly_unwield(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn mwepgone(arg1: *mut monst);
}
extern "C" {
    pub fn mon_wield_item(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abon() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dbon() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wet_a_towel(arg1: *mut obj, arg2: ::std::os::raw::c_int, arg3: boolean);
}
extern "C" {
    pub fn dry_a_towel(arg1: *mut obj, arg2: ::std::os::raw::c_int, arg3: boolean);
}
extern "C" {
    pub fn skill_level_name(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn skill_name(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn can_advance(arg1: ::std::os::raw::c_int, arg2: boolean) -> boolean;
}
extern "C" {
    pub fn enhance_weapon_skill() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unrestrict_weapon_skill(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn use_skill(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn add_weapon_skill(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn lose_weapon_skill(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn drain_weapon_skill(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn weapon_type(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uwep_skill_type() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn weapon_hit_bonus(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn weapon_dam_bonus(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn skill_init(arg1: *const def_skill);
}
extern "C" {
    pub fn were_change(arg1: *mut monst);
}
extern "C" {
    pub fn counter_were(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn were_beastie(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn new_were(arg1: *mut monst);
}
extern "C" {
    pub fn were_summon(
        arg1: *mut permonst,
        arg2: boolean,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn you_were();
}
extern "C" {
    pub fn you_unwere(arg1: boolean);
}
extern "C" {
    pub fn set_ulycn(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setuwep(arg1: *mut obj);
}
extern "C" {
    pub fn setuqwep(arg1: *mut obj);
}
extern "C" {
    pub fn setuswapwep(arg1: *mut obj);
}
extern "C" {
    pub fn dowield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn doswapweapon() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dowieldquiver() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wield_tool(arg1: *mut obj, arg2: *const ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn can_twoweapon() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drop_uswapwep();
}
extern "C" {
    pub fn dotwoweapon() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn uwepgone();
}
extern "C" {
    pub fn uswapwepgone();
}
extern "C" {
    pub fn uqwepgone();
}
extern "C" {
    pub fn set_twoweap(arg1: boolean);
}
extern "C" {
    pub fn untwoweapon();
}
extern "C" {
    pub fn chwepon(arg1: *mut obj, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn welded(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn weldmsg(arg1: *mut obj);
}
extern "C" {
    pub fn setmnotwielded(arg1: *mut monst, arg2: *mut obj);
}
extern "C" {
    pub fn mwelded(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn choose_windows(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn genl_can_suspend_no() -> boolean;
}
extern "C" {
    pub fn genl_can_suspend_yes() -> boolean;
}
extern "C" {
    pub fn genl_message_menu(
        arg1: ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn genl_preference_update(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn genl_getmsghistory(arg1: boolean) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn genl_putmsghistory(arg1: *const ::std::os::raw::c_char, arg2: boolean);
}
extern "C" {
    pub fn nhwindows_hangup();
}
extern "C" {
    pub fn genl_status_init();
}
extern "C" {
    pub fn genl_status_finish();
}
extern "C" {
    pub fn genl_status_enablefield(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: boolean,
    );
}
extern "C" {
    pub fn genl_status_update(
        arg1: ::std::os::raw::c_int,
        arg2: genericptr_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: *mut ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn dump_fmtstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: boolean,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dump_open_log(arg1: time_t);
}
extern "C" {
    pub fn dump_close_log();
}
extern "C" {
    pub fn dump_redirect(arg1: boolean);
}
extern "C" {
    pub fn dump_forward_putstr(
        arg1: winid,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn has_color(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glyph2ttychar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn glyph2symidx(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn encglyph(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn decode_mixed(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn genl_putmixed(
        arg1: winid,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn menuitem_invert_test(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_uint,
        arg3: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn nethack_enter_winnt();
}
extern "C" {
    pub fn amulet();
}
extern "C" {
    pub fn mon_has_amulet(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mon_has_special(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tactics(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_aggravatables(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn aggravate();
}
extern "C" {
    pub fn clonewiz();
}
extern "C" {
    pub fn pick_nasty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nasty(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resurrect();
}
extern "C" {
    pub fn intervene();
}
extern "C" {
    pub fn wizdead();
}
extern "C" {
    pub fn cuss(arg1: *mut monst);
}
extern "C" {
    pub fn get_wormno() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initworm(arg1: *mut monst, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn worm_move(arg1: *mut monst);
}
extern "C" {
    pub fn worm_nomove(arg1: *mut monst);
}
extern "C" {
    pub fn wormgone(arg1: *mut monst);
}
extern "C" {
    pub fn wormhitu(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cutworm(arg1: *mut monst, arg2: xchar, arg3: xchar, arg4: boolean);
}
extern "C" {
    pub fn see_wsegs(arg1: *mut monst);
}
extern "C" {
    pub fn detect_wsegs(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn save_worm(arg1: *mut NHFILE);
}
extern "C" {
    pub fn rest_worm(arg1: *mut NHFILE);
}
extern "C" {
    pub fn place_wsegs(arg1: *mut monst, arg2: *mut monst);
}
extern "C" {
    pub fn sanity_check_worm(arg1: *mut monst);
}
extern "C" {
    pub fn wormno_sanity_check();
}
extern "C" {
    pub fn remove_worm(arg1: *mut monst);
}
extern "C" {
    pub fn place_worm_tail_randomly(arg1: *mut monst, arg2: xchar, arg3: xchar);
}
extern "C" {
    pub fn size_wseg(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn count_wsegs(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn worm_known(arg1: *mut monst) -> boolean;
}
extern "C" {
    pub fn worm_cross(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn wseg_at(
        arg1: *mut monst,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flip_worm_segs_vertical(
        arg1: *mut monst,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn flip_worm_segs_horizontal(
        arg1: *mut monst,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setworn(arg1: *mut obj, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn setnotworn(arg1: *mut obj);
}
extern "C" {
    pub fn allunworn();
}
extern "C" {
    pub fn wearmask_to_obj(arg1: ::std::os::raw::c_long) -> *mut obj;
}
extern "C" {
    pub fn wearslot(arg1: *mut obj) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mon_set_minvis(arg1: *mut monst);
}
extern "C" {
    pub fn mon_adjust_speed(arg1: *mut monst, arg2: ::std::os::raw::c_int, arg3: *mut obj);
}
extern "C" {
    pub fn update_mon_intrinsics(arg1: *mut monst, arg2: *mut obj, arg3: boolean, arg4: boolean);
}
extern "C" {
    pub fn find_mac(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn m_dowear(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn which_armor(arg1: *mut monst, arg2: ::std::os::raw::c_long) -> *mut obj;
}
extern "C" {
    pub fn mon_break_armor(arg1: *mut monst, arg2: boolean);
}
extern "C" {
    pub fn bypass_obj(arg1: *mut obj);
}
extern "C" {
    pub fn clear_bypasses();
}
extern "C" {
    pub fn bypass_objlist(arg1: *mut obj, arg2: boolean);
}
extern "C" {
    pub fn nxt_unbypassed_obj(arg1: *mut obj) -> *mut obj;
}
extern "C" {
    pub fn nxt_unbypassed_loot(arg1: *mut Loot, arg2: *mut obj) -> *mut obj;
}
extern "C" {
    pub fn racial_exception(arg1: *mut monst, arg2: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn extract_from_minvent(arg1: *mut monst, arg2: *mut obj, arg3: boolean, arg4: boolean);
}
extern "C" {
    pub fn dowrite(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn learnwand(arg1: *mut obj);
}
extern "C" {
    pub fn bhitm(arg1: *mut monst, arg2: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn release_hold();
}
extern "C" {
    pub fn probe_monster(arg1: *mut monst);
}
extern "C" {
    pub fn get_obj_location(
        arg1: *mut obj,
        arg2: *mut xchar,
        arg3: *mut xchar,
        arg4: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn get_mon_location(
        arg1: *mut monst,
        arg2: *mut xchar,
        arg3: *mut xchar,
        arg4: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn get_container_location(
        obj: *mut obj,
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut monst;
}
extern "C" {
    pub fn montraits(arg1: *mut obj, arg2: *mut coord, arg3: boolean) -> *mut monst;
}
extern "C" {
    pub fn revive(arg1: *mut obj, arg2: boolean) -> *mut monst;
}
extern "C" {
    pub fn unturn_dead(arg1: *mut monst) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unturn_you();
}
extern "C" {
    pub fn cancel_item(arg1: *mut obj);
}
extern "C" {
    pub fn drain_item(arg1: *mut obj, arg2: boolean) -> boolean;
}
extern "C" {
    pub fn obj_unpolyable(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn poly_obj(arg1: *mut obj, arg2: ::std::os::raw::c_int) -> *mut obj;
}
extern "C" {
    pub fn obj_resists(
        arg1: *mut obj,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn obj_shudders(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn do_osshock(arg1: *mut obj);
}
extern "C" {
    pub fn bhito(arg1: *mut obj, arg2: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bhitpile(
        arg1: *mut obj,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut obj, arg2: *mut obj) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: schar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zappable(arg1: *mut obj) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn do_enlightenment_effect();
}
extern "C" {
    pub fn zapnodir(arg1: *mut obj);
}
extern "C" {
    pub fn dozap() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zapyourself(arg1: *mut obj, arg2: boolean) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ubreatheu(arg1: *mut attack);
}
extern "C" {
    pub fn lightdamage(
        arg1: *mut obj,
        arg2: boolean,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flashburn(arg1: ::std::os::raw::c_long) -> boolean;
}
extern "C" {
    pub fn cancel_monst(
        arg1: *mut monst,
        arg2: *mut obj,
        arg3: boolean,
        arg4: boolean,
        arg5: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn zapsetup();
}
extern "C" {
    pub fn zapwrapup();
}
extern "C" {
    pub fn weffects(arg1: *mut obj);
}
extern "C" {
    pub fn spell_damage_bonus(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exclam(force: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn hit(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut monst,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn miss(arg1: *const ::std::os::raw::c_char, arg2: *mut monst);
}
extern "C" {
    pub fn bhit(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: bhit_call_types,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut monst, arg2: *mut obj) -> ::std::os::raw::c_int,
        >,
        arg6: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut obj, arg2: *mut obj) -> ::std::os::raw::c_int,
        >,
        arg7: *mut *mut obj,
    ) -> *mut monst;
}
extern "C" {
    pub fn boomhit(
        arg1: *mut obj,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut monst;
}
extern "C" {
    pub fn zhitm(
        arg1: *mut monst,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut *mut obj,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn burn_floor_objects(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: boolean,
        arg4: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buzz(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: xchar,
        arg4: xchar,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dobuzz(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: xchar,
        arg4: xchar,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: boolean,
    );
}
extern "C" {
    pub fn melt_ice(arg1: xchar, arg2: xchar, arg3: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn start_melt_ice_timeout(arg1: xchar, arg2: xchar, arg3: ::std::os::raw::c_long);
}
extern "C" {
    pub fn melt_ice_away(arg1: *mut any, arg2: ::std::os::raw::c_long);
}
extern "C" {
    pub fn zap_over_floor(
        arg1: xchar,
        arg2: xchar,
        arg3: ::std::os::raw::c_int,
        arg4: *mut boolean,
        arg5: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fracture_rock(arg1: *mut obj);
}
extern "C" {
    pub fn break_statue(arg1: *mut obj) -> boolean;
}
extern "C" {
    pub fn destroy_item(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn destroy_mitem(
        arg1: *mut monst,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn resist(
        arg1: *mut monst,
        arg2: ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn makewish();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct window_procs {
    pub name: *const ::std::os::raw::c_char,
    pub wincap: ::std::os::raw::c_ulong,
    pub wincap2: ::std::os::raw::c_ulong,
    pub has_color: [boolean; 16usize],
    pub win_init_nhwindows: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_int,
            arg2: *mut *mut ::std::os::raw::c_char,
        ),
    >,
    pub win_player_selection: ::std::option::Option<unsafe extern "C" fn()>,
    pub win_askname: ::std::option::Option<unsafe extern "C" fn()>,
    pub win_get_nh_event: ::std::option::Option<unsafe extern "C" fn()>,
    pub win_exit_nhwindows:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>,
    pub win_suspend_nhwindows:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>,
    pub win_resume_nhwindows: ::std::option::Option<unsafe extern "C" fn()>,
    pub win_create_nhwindow:
        ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> winid>,
    pub win_clear_nhwindow: ::std::option::Option<unsafe extern "C" fn(arg1: winid)>,
    pub win_display_nhwindow:
        ::std::option::Option<unsafe extern "C" fn(arg1: winid, arg2: boolean)>,
    pub win_destroy_nhwindow: ::std::option::Option<unsafe extern "C" fn(arg1: winid)>,
    pub win_curs: ::std::option::Option<
        unsafe extern "C" fn(arg1: winid, arg2: ::std::os::raw::c_int, arg3: ::std::os::raw::c_int),
    >,
    pub win_putstr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: winid,
            arg2: ::std::os::raw::c_int,
            arg3: *const ::std::os::raw::c_char,
        ),
    >,
    pub win_putmixed: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: winid,
            arg2: ::std::os::raw::c_int,
            arg3: *const ::std::os::raw::c_char,
        ),
    >,
    pub win_display_file: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char, arg2: boolean),
    >,
    pub win_start_menu:
        ::std::option::Option<unsafe extern "C" fn(arg1: winid, arg2: ::std::os::raw::c_ulong)>,
    pub win_add_menu: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: winid,
            arg2: *const glyph_info,
            arg3: *const any,
            arg4: ::std::os::raw::c_char,
            arg5: ::std::os::raw::c_char,
            arg6: ::std::os::raw::c_int,
            arg7: *const ::std::os::raw::c_char,
            arg8: ::std::os::raw::c_uint,
        ),
    >,
    pub win_end_menu: ::std::option::Option<
        unsafe extern "C" fn(arg1: winid, arg2: *const ::std::os::raw::c_char),
    >,
    pub win_select_menu: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: winid,
            arg2: ::std::os::raw::c_int,
            arg3: *mut *mut mi,
        ) -> ::std::os::raw::c_int,
    >,
    pub win_message_menu: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
            arg3: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_char,
    >,
    pub win_update_inventory:
        ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub win_mark_synch: ::std::option::Option<unsafe extern "C" fn()>,
    pub win_wait_synch: ::std::option::Option<unsafe extern "C" fn()>,
    pub win_cliparound: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int),
    >,
    pub win_print_glyph: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: winid,
            arg2: xchar,
            arg3: xchar,
            arg4: *const glyph_info,
            arg5: *const glyph_info,
        ),
    >,
    pub win_raw_print:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>,
    pub win_raw_print_bold:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>,
    pub win_nhgetch: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub win_nh_poskey: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_int,
            arg2: *mut ::std::os::raw::c_int,
            arg3: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub win_nhbell: ::std::option::Option<unsafe extern "C" fn()>,
    pub win_doprev_message: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub win_yn_function: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_char,
    >,
    pub win_getlin: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
        ),
    >,
    pub win_get_ext_cmd: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub win_number_pad: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub win_delay_output: ::std::option::Option<unsafe extern "C" fn()>,
    pub win_start_screen: ::std::option::Option<unsafe extern "C" fn()>,
    pub win_end_screen: ::std::option::Option<unsafe extern "C" fn()>,
    pub win_outrip: ::std::option::Option<
        unsafe extern "C" fn(arg1: winid, arg2: ::std::os::raw::c_int, arg3: time_t),
    >,
    pub win_preference_update:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>,
    pub win_getmsghistory:
        ::std::option::Option<unsafe extern "C" fn(arg1: boolean) -> *mut ::std::os::raw::c_char>,
    pub win_putmsghistory: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char, arg2: boolean),
    >,
    pub win_status_init: ::std::option::Option<unsafe extern "C" fn()>,
    pub win_status_finish: ::std::option::Option<unsafe extern "C" fn()>,
    pub win_status_enablefield: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: boolean,
        ),
    >,
    pub win_status_update: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: genericptr_t,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
            arg5: ::std::os::raw::c_int,
            arg6: *mut ::std::os::raw::c_ulong,
        ),
    >,
    pub win_can_suspend: ::std::option::Option<unsafe extern "C" fn() -> boolean>,
}
#[test]
fn bindgen_test_layout_window_procs() {
    assert_eq!(
        ::std::mem::size_of::<window_procs>(),
        408usize,
        concat!("Size of: ", stringify!(window_procs))
    );
    assert_eq!(
        ::std::mem::align_of::<window_procs>(),
        8usize,
        concat!("Alignment of ", stringify!(window_procs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).wincap as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(wincap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).wincap2 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(wincap2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).has_color as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(has_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_init_nhwindows as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_init_nhwindows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_procs>())).win_player_selection as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_player_selection)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_askname as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_askname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_get_nh_event as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_get_nh_event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_exit_nhwindows as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_exit_nhwindows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_procs>())).win_suspend_nhwindows as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_suspend_nhwindows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_procs>())).win_resume_nhwindows as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_resume_nhwindows)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_procs>())).win_create_nhwindow as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_create_nhwindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_clear_nhwindow as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_clear_nhwindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_procs>())).win_display_nhwindow as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_display_nhwindow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_procs>())).win_destroy_nhwindow as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_destroy_nhwindow)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_curs as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_curs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_putstr as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_putstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_putmixed as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_putmixed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_display_file as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_display_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_start_menu as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_start_menu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_add_menu as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_add_menu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_end_menu as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_end_menu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_select_menu as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_select_menu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_message_menu as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_message_menu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_procs>())).win_update_inventory as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_update_inventory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_mark_synch as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_mark_synch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_wait_synch as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_wait_synch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_cliparound as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_cliparound)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_print_glyph as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_print_glyph)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_raw_print as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_raw_print)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_raw_print_bold as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_raw_print_bold)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_nhgetch as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_nhgetch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_nh_poskey as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_nh_poskey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_nhbell as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_nhbell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_doprev_message as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_doprev_message)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_yn_function as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_yn_function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_getlin as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_getlin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_get_ext_cmd as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_get_ext_cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_number_pad as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_number_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_delay_output as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_delay_output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_start_screen as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_start_screen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_end_screen as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_end_screen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_outrip as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_outrip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_procs>())).win_preference_update as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_preference_update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_getmsghistory as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_getmsghistory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_putmsghistory as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_putmsghistory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_status_init as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_status_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_status_finish as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_status_finish)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_procs>())).win_status_enablefield as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_status_enablefield)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_status_update as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_status_update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_procs>())).win_can_suspend as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(window_procs),
            "::",
            stringify!(win_can_suspend)
        )
    );
}
extern "C" {
    pub static mut windowprocs: window_procs;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wc_Opt {
    pub wc_name: *const ::std::os::raw::c_char,
    pub wc_bit: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_wc_Opt() {
    assert_eq!(
        ::std::mem::size_of::<wc_Opt>(),
        16usize,
        concat!("Size of: ", stringify!(wc_Opt))
    );
    assert_eq!(
        ::std::mem::align_of::<wc_Opt>(),
        8usize,
        concat!("Alignment of ", stringify!(wc_Opt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Opt>())).wc_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Opt),
            "::",
            stringify!(wc_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wc_Opt>())).wc_bit as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Opt),
            "::",
            stringify!(wc_bit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sysopt {
    pub support: *mut ::std::os::raw::c_char,
    pub recover: *mut ::std::os::raw::c_char,
    pub wizards: *mut ::std::os::raw::c_char,
    pub fmtd_wizard_list: *mut ::std::os::raw::c_char,
    pub explorers: *mut ::std::os::raw::c_char,
    pub shellers: *mut ::std::os::raw::c_char,
    pub genericusers: *mut ::std::os::raw::c_char,
    pub debugfiles: *mut ::std::os::raw::c_char,
    pub dumplogfile: *mut ::std::os::raw::c_char,
    pub env_dbgfl: ::std::os::raw::c_int,
    pub maxplayers: ::std::os::raw::c_int,
    pub seduce: ::std::os::raw::c_int,
    pub check_save_uid: ::std::os::raw::c_int,
    pub check_plname: ::std::os::raw::c_int,
    pub bones_pools: ::std::os::raw::c_int,
    pub persmax: ::std::os::raw::c_int,
    pub pers_is_uid: ::std::os::raw::c_int,
    pub entrymax: ::std::os::raw::c_int,
    pub pointsmin: ::std::os::raw::c_int,
    pub tt_oname_maxrank: ::std::os::raw::c_int,
    pub gdbpath: *mut ::std::os::raw::c_char,
    pub greppath: *mut ::std::os::raw::c_char,
    pub panictrace_gdb: ::std::os::raw::c_int,
    pub panictrace_libc: ::std::os::raw::c_int,
    pub saveformat: [::std::os::raw::c_int; 2usize],
    pub bonesformat: [::std::os::raw::c_int; 2usize],
    pub accessibility: ::std::os::raw::c_int,
    pub portable_device_paths: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sysopt() {
    assert_eq!(
        ::std::mem::size_of::<sysopt>(),
        168usize,
        concat!("Size of: ", stringify!(sysopt))
    );
    assert_eq!(
        ::std::mem::align_of::<sysopt>(),
        8usize,
        concat!("Alignment of ", stringify!(sysopt))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).support as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(support)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).recover as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(recover)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).wizards as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(wizards)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).fmtd_wizard_list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(fmtd_wizard_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).explorers as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(explorers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).shellers as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(shellers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).genericusers as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(genericusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).debugfiles as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(debugfiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).dumplogfile as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(dumplogfile)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).env_dbgfl as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(env_dbgfl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).maxplayers as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(maxplayers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).seduce as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(seduce)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).check_save_uid as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(check_save_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).check_plname as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(check_plname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).bones_pools as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(bones_pools)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).persmax as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(persmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).pers_is_uid as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(pers_is_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).entrymax as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(entrymax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).pointsmin as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(pointsmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).tt_oname_maxrank as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(tt_oname_maxrank)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).gdbpath as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(gdbpath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).greppath as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(greppath)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).panictrace_gdb as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(panictrace_gdb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).panictrace_libc as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(panictrace_libc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).saveformat as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(saveformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).bonesformat as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(bonesformat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).accessibility as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(accessibility)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysopt>())).portable_device_paths as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(sysopt),
            "::",
            stringify!(portable_device_paths)
        )
    );
}
extern "C" {
    pub static mut sysopt: sysopt;
}
pub const bodypart_types_ARM: bodypart_types = 0;
pub const bodypart_types_EYE: bodypart_types = 1;
pub const bodypart_types_FACE: bodypart_types = 2;
pub const bodypart_types_FINGER: bodypart_types = 3;
pub const bodypart_types_FINGERTIP: bodypart_types = 4;
pub const bodypart_types_FOOT: bodypart_types = 5;
pub const bodypart_types_HAND: bodypart_types = 6;
pub const bodypart_types_HANDED: bodypart_types = 7;
pub const bodypart_types_HEAD: bodypart_types = 8;
pub const bodypart_types_LEG: bodypart_types = 9;
pub const bodypart_types_LIGHT_HEADED: bodypart_types = 10;
pub const bodypart_types_NECK: bodypart_types = 11;
pub const bodypart_types_SPINE: bodypart_types = 12;
pub const bodypart_types_TOE: bodypart_types = 13;
pub const bodypart_types_HAIR: bodypart_types = 14;
pub const bodypart_types_BLOOD: bodypart_types = 15;
pub const bodypart_types_LUNG: bodypart_types = 16;
pub const bodypart_types_NOSE: bodypart_types = 17;
pub const bodypart_types_STOMACH: bodypart_types = 18;
pub type bodypart_types = ::std::os::raw::c_int;
pub const getobj_callback_returns_GETOBJ_EXCLUDE: getobj_callback_returns = -2;
pub const getobj_callback_returns_GETOBJ_EXCLUDE_INACCESS: getobj_callback_returns = -1;
pub const getobj_callback_returns_GETOBJ_EXCLUDE_SELECTABLE: getobj_callback_returns = 0;
pub const getobj_callback_returns_GETOBJ_DOWNPLAY: getobj_callback_returns = 1;
pub const getobj_callback_returns_GETOBJ_SUGGEST: getobj_callback_returns = 2;
pub type getobj_callback_returns = ::std::os::raw::c_int;
pub const optset_restrictions_set_in_sysconf: optset_restrictions = 0;
pub const optset_restrictions_set_in_config: optset_restrictions = 1;
pub const optset_restrictions_set_viaprog: optset_restrictions = 2;
pub const optset_restrictions_set_gameview: optset_restrictions = 3;
pub const optset_restrictions_set_in_game: optset_restrictions = 4;
pub const optset_restrictions_set_wizonly: optset_restrictions = 5;
pub const optset_restrictions_set_hidden: optset_restrictions = 6;
pub type optset_restrictions = ::std::os::raw::c_int;
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CallInfo {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nhregex {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bucket {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_coder {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct win_choices {
    pub _address: u8,
}
