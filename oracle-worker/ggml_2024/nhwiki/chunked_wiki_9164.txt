Response arguments:
* `struct nhnet_game[] games`: the information about the games selected by
the arguments:
* `int gameid`: a value that can be given to `play_game` to connect to
this game
* `enum nh_game_modes playmode`: any special rules that might apply to
this game:
* `MODE_NORMAL` = 0: there is nothing special about this game;
* `MODE_EXPLORE` = 1: this game is in non-scoring discovery mode;
* `MODE_WIZARD` = 2: this game is in debug mode.
* `string plname`: the name of this game's player
* `string game_status`: a textual description of the current state of
the game (death reason for a completed game, location of the character
in the dungeon for an incomplete game)
* `string plalign`: the alignment of this game's character
* `string plgend`: the gender of this game's character
* `string plrace`: the race of this game's character
* `string plrole`: the role of this game's character
* `enum nh_log_status status`: the status of this game's save file:
* `LS_SAVED` = 0: an ordinary save file, nobody playing/replaying
* `LS_DONE` = 1: game over: quit, died, ascended, etc.
* `LS_IN_PROGRESS` = 2: someone is playing/watching/replaying this
game
* `LS_INVALID` = -1: something is badly wrong with the save file
* `LS_CRASHED` = -2: the save file needs manual recovery

===create_game===


Creates a new save file, that can subsequently be opened with `play_game` in
order to start a new game.  This mostly corresponds to the `nh_create_game`
API call in libnethack (although it has a slightly different calling
convention).

Command arguments:
* `struct nh_option_desc[] options`: the options this game should initially
be created with (including game mode, character, and character name); any
options omitted wil be filled in with defaults

Response arguments:
* `int gameid`: The game ID, for use with future `play_game` calls; if this
is -1, the game creation failed


===play_game===


Attaches to a game, causing that game to be loaded if it isn't already.  If
the game allows read access for the user the connection is authenticated as,
and the game is not completed, the user will be able to play, watch, and/or
replay the game.  Otherwise, the user will only be able to watch and replay
the game.  The `play_game` call does not respond until the gameplay is over
(or immediately, if an error happens); rather, the server will respond with a
number of followup commands to handle the user interaction side of the
gameplay itself.

This corresponds to the `nh_play_game` API call in libnethack.

Note that a `play_game` response may happen at any time after a unresponded
`play_game` command, even if there are unresponded requests in the meantime.
(This corresponds to a `longjmp` back to `nh_play_game` in the libnethack
API.)  The unresponded requests simply vanish, and the client should act as
though they never happened (removing menus that they opened from the screen,
forgetting messages, etc.).  This can happen in a few different situations:
* If the client requests a save or quit (via `exit_game`), perhaps while a
prompt is open;
* If something goes wrong and the server needs to rewind the save file
mid-turn;
* During network play, if the network connection breaks or times out on the
server, the client API code simulates this to transparently reconnect the
connection, even though it isn't actually sent over the network.

Command arguments:
* `int gameid`: A value returned from `list_games` or `create_game`
representing a game to attach to
* `enum followmode followmode`: How to load the game:
* `FM_PLAY` = 0: play the game
* `FM_WATCH` = 1: watch a game (like playing, but read-only)
* `FM_REPLAY` = 2: replay the game from the start (also read-only)
* (`FM_RECOVERQUIT` = 3: go through the game over sequence of a completed
game again (leaving bones, xlogfile entries, etc.); this is disallowed
in network play for security reasons, but exists in the local API)

Response arguments:
* `enum nh_play_status return`: what happen in the attempt to restore the game:
* `GAME_DETACHED` = 0: the game was restored successfully; eventually,
the client requested to stop playing, and the game still exists
* `GAME_OVER` = 1: the game was restored successfully; eventually, the
game ended through the death of the character or some similarly
permanent means; this return value is only sent to one process (the
one that sent the input causing the game to end)
* `GAME_ALREADY_OVER` = 2: the game was restored successfully, but
either it had already ended (and thus was loaded in replay mode), or
else it ended while attached but some other process sent the input
that caused the game to end
* `RESTART_PLAY` = 3: something happened that forced the server to jump
back to `play_game`; the client should in most cases immediately call
`play_game` with the same argument
* `CLIENT_RESTART` = 4: ditto, but on the request of the client, which
can react to it how it likes
* `REPLAY_FINISHED` = 5: the game is still going, but cannot continue in
replay mode because the end was reached; a client can reconnect in
play or watch mode if it likes
* `ERR_BAD_ARGS` = 6: the game did not start because the given game ID
does not exist
* `ERR_BAD_FILE` = 7: the game did not start because the given game ID
corresponds to a file on disk that cannot be read
* `ERR_IN_PROGRESS` = 8: it is impossible to attach to the game due to
locking issues; on POSIXy OSes, this should only happen if the file is
being recovered manually, but on some OSes this may happen if anyone
else is currently playing the game
* `ERR_RESTORE_FAILED` = 9: the game is completely corrupted and needs
manual recovery
* `ERR_RECOVER_REFUSED` = 10: the game is partially corrupted, and the
user chose not to rewind it when prompted about whether to rewind it
* (`ERR_NETWORK_ERROR` = 11: never sent over the network, but the
client library simulates this return value if it has to detach the
game due to network issues and cannot subsequently re-attach it, thus
clients using the client library may see it)


===set_email===


Change the email address associated with the authenticated user.  (This
address is not used by the game, but is available to server admins in case
they need to verify a user's identity, e.g. for a password reset request.)

Command arguments:
* `string email`: the new email address

Response arguments:
* `boolean return`: true if the email address change succeeded


===set_password===


Change the password associated with the authenticated user.  The same password
will be required by future `auth` requests.

Command arguments:
* `string password`: the new password (sent in plaintext, unless the
connection is encrypted some other way)

Response arguments:
* `boolean return`: true if the password change succeeded


===shutdown===


Exits the server process responsible for dealing with this client process and
closes the connection.  (If there is an active game, the server will attempt
to save it before exiting).

Command arguments: none

Response arguments:
* `int return`: Always 1.


==Server requests==


These requests are sent by the server, expecting a response from the client.
Normally they will only be sent as followups to a response from the client;
the only exceptions are `server_error` and `server_cancel`, which can be sent
at any time (except to interrupt the request half of a server request or
response half of a server response, in which case they will be delayed until
the server is done sending its current request/response).


===server_cancel===


Sending an `nh_play_game` response can be used by the server to retroactively
wipe out the state of a connection, e.g. to handle save file recovery, or a
mid-turn save.  However, sometimes the server only wants to countermand one
request; the typical example is when watching a game which opened a menu, and
then the player being watched makes a selection from the menu (in which case
the server needs to, effectively, undo the opening of the menu).

In this case, the server will send a `server_cancel` request.  The client
should treat any response-requiring server request it is currently processing,
or the next such request if it is not currently processing such a request, as
being cancelled by the server, and should thus give the appropriate
"cancelled by server" response to that request.

In the local API (rather than the network API), in which `libnethack` links
directly against an interface, the `server_cancel` request can be sent at
absolutely any time at all; this includes such inconvenient times as "in the
middle of allocating memory", or "in the middle of another request"; this is
"async-signal" timing.  Doing this over the network would be impossible to
parse (the closest equivalent would be TCP urgent data, which can interrupt an
existing data stream in such a way that both can be distinguishd, but is
limited to one byte and thus hard to fit JSON in).  Instead, the network API
will delay making a `server_cancel` request until it has finished sending any
current request, if possible.  Clients nonetheless need to make arrangements
to handle this request in the middle of accepting input from the user (which
is its entire purpose); for instance, if blocking on the keyboard because
their interface wants a keypress in order to handle whatever input request is
being made at the time, they will need to block on a network socket at the
same time in order to be able to handle a possible cancel.

Be aware of possible race conditions: if the client finishes processing a
request just as the server tries to cancel it, then the server will end up
accidentally cancelling its next request instead.  This is why "client
cancelled" and "server cancelled" responses look different: so if the server
spuriously cancels a request, it can just send the request again, rather than
interpreting the client as having cancelled the request intentionally.

No response to the `server_cancel` call should be sent; the server has no use
for it, and is not equipped for arbitrarily inconveniently timed responses.

Request arguments: none

Response arguments: no response


===request_command===


This request is sent by the server when the player's character is able to send
a new command.  The client should respond with a game command, possibly
following up with network API command in order to help decide which command to
respond with.

Request arguments:
* `boolean debug`: whether debug-mode commands are a reasonable response to
the prompt
* `boolean completed`: false if the client is in the middle of a multi-turn
command (whether it was interrupted by a monster or the like, or whether
the server's just giving the client the chance to interrupt); true if the
previous command completed or there was no previous command
* `boolean interrupted`: true if the character is aware of danger that might
cause a player to want to abort their current action (or not repeat a
repeated action); this is independent of `completed`

Response arguments:
* `string command`: what the player wants to tell their character to do;
this should be a string returned by `get_commands`, or else one of the
following internal-use commands:
* `"welcome"`: Display the "Welcome [back] to NetHack!" message; this
should be sent spontaneously by the client as the first command if the
game was restored due to player action (rather than due to a network
timeout or the like), rather than in response to user input
* `"repeat"`: Continue a multiple-turn command, or repeat the last
command in other circumstances; clients will typically want to send
this without further user interaction if `completed` and `interrupted`
are both false, but may allow the user to override this if they wish
* `"servercancel"`: Sent as a response if the server cancelled the API
call using a `server_cancel` call
* `struct nh_cmd_arg arg`: a set of arguments to the command (any subset of
the arguments that `nh_get_command` specified were acceptable)
* `enum nh_direction d`: [optional] a direction argument
* `DIR_W` = 0: west (`h`, `4`)
* `DIR_NW` = 1: northwest (`y`, `7`)
* `DIR_N` = 2: north (`k`, `8`)
* `DIR_NE` = 3: northeast (`u`, `9`)
* `DIR_E` = 4: east (`l`, `6`)
* `DIR_SE` = 5: southeast (`n`, `3`)
* `DIR_S` = 6: south (`j`, `2`)
* `DIR_SW` = 7: southwest (`b`, `1`)
* `DIR_UP` = 8: up (`<`)
* `DIR_DOWN` = 9: down (`>`)
* `DIR_SELF` = 10: at self (`.` or `s`)
* `charcode invlet`: [optional] an inventory letter
* `coordinate x`: [optional] an x coordinate
* `coordinate y`: [optional] a y coordinate
* `string str`: [optional] a string
* `charcode spelllet`: [optional] a spell letter
* `int limit`: [optional] the amount to limit the command to

===display_menu===


Requests the client to display a menu to the user (either simply for display,
or to allow them to make a selection), until the user makes a selection or the
server cancels the request using a `play_game` response.

Request arguments:
* `enum nh_pick_type how`: a specification of how many items the user can
choose from the menu:     
* `PICK_NONE` = 0: the user cannot select items, the menu is purely used
to present information to the user;
* `PICK_ONE` = 1: the user can pick one item from the menu;
* `PICK_ANY` = 2: the user can pick zero or more items from the menu
* `struct nh_menuitem[] items`: the menu items:
* `charcode accel`: a recommended accelerator for this menu entry
* `string caption`: the text of the menu entry
* `charcode group_accel`: a secondary recommended accelerator (which may
apply to more than one entry; if it does, a `PICK_ANY` menu should
toggle all entries with the `group_accel` if the user presses it)
* `int id`: a value to return in the `display_menu` response; if `id`
and `accel` are both 0, then the item is unselectable
* `enum nh_menuitem_role role`: what sort of entry this is:
* `MI_TEXT`: a line of text that is logically grouped together even
if it runs across multiple menu entries;
* `MI_NORMAL`: a normal menu item;
* `MI_HEADING`: a heading
* `boolean selected`: whether this menu item should be selected by
default (in a `PICK_ANY` menu, where choosing an item does not close
the menu, choosing an item should toggle its selection state)
* `enum placement_hint plhint`: a suggestion for a sensibleplcae on the
screen to place this menu, and styling for the menu (TODO: many of these
are unimplemented in nhcurses):
* `PLHINT_ANYWHERE` = 0: no suggested location;
* `PLHINT_LEFT` = 1: towards the left side of the screen;
* `PLHINT_RIGHT` = 2: towards the right side of the screen;
* `PLHINT_URGENT` = 3: appropriate styling for an important message;
* `PLHINT_INFO` = 4: appropriate styling for an informational message;
* `PLHINT_ONELINER` = 5: in the message area;
* `PLHINT_CONTAINER` = 6: an appropriate location for container
contents;
* `PLHINT_INVENTORY` = 7: over the inventory area (if any)
* `string title`: the title of the menu

Response arguments:
* `int[] results`: a list of the `id` of all selected items after the menu
was closed; this should be empty for `PICK_NONE` or if the menu was
cancelled via server or client, empty or a single element for `PICK_ONE`,
and any subset of elements for `PICK_ANY`,
* `enum nh_client_response howclosed`: an explanation of how the menu was
closed:
* `NHCR_ACCEPTED` = 0: pressing Return (or similar), scrolling off the
end, or (for `PICK_ONE`) selecting an item;
* `NHCR_CLIENT_CANCEL` = 1: pressing Escape (or similar)
* `NHCR_SERVER_CANCEL` = 5: by a `server_cancel` request


===display_objects===


A variant of `display_menu` specialised for inventory menus.  It provides extra
information and allows the user to specify partial stacks of items in addition
to full stacks.

Request arguments: same as `display_menu`, except for `items`:
* `struct nh_objitem[] items`: the menu items (sent as an array, not an
object, with elements in the order shown here):
* `string caption`: as in `display_menu`
* `int id`: as in `display_menu`
* `enum nh_menuitem_role role`: as in `display_menu`
* `int count`: the number of objects in the stack
* `int otype`: the obfuscated object type; I think this is an index into
the `objects[]` returned from `get_drawing_info`, but I'm not sure
* `int oclass`: the object class (are these listed anywhere public?)
* `int weight`: the object's weight, negative numbers means unknown
* `enum nh_bucstatus buc`: the object's beatitude:
* `B_UNKNOWN` = 0: unknown beatitude;
* `B_BLESSED` = 1: blessed;
* `B_UNCURSED` = 2: neither blessed nor cursed;
* `B_CURSED` = 3: cursed
* `charcode accel`: as in `display_menu`
* `charcode group_accel`: as in `display_menu`
* `boolean worn`: true if the object is equipped

Response arguments:
* `struct nh_objresult[] pick_list`: a list of all selected items after the
menu ws closed, as with `display_menu`, but with more information:
* `int id`: the `id` specified for this item in the request
* `int count`: the size of a partial stack specified for this item, or
-1 to select the entire stack; should be -1, or between 1 and the stack
size minus 1
* `enum nh_client_response howclosed`: as in `display_menu`


===getdir===


Requests a direction from the user (can be cancelled by the user, or the
server via a `play_game` response).

Request arguments:
* `string query`: a message to print along with the direction request (the
generic message is along the lines of "In which direction?", but the
message is often more specific, similar to "Zap your wand in which
direction?").
* `boolean restricted`: if true, the client should act as though diagonal
directions do not exist for the purpose of its help text (applies when the
player is polymorphed into a grid bug)

Response arguments:
* `enum nh_direction return`: The selected direction:
* `DIR_W` = 0: west (`h`, `4`)
* `DIR_NW` = 1: northwest (`y`, `7`)
* `DIR_N` = 2: north (`k`, `8`)
* `DIR_NE` = 3: northeast (`u`, `9`)
* `DIR_E` = 4: east (`l`, `6`)
* `DIR_SE` = 5: southeast (`n`, `3`)
* `DIR_S` = 6: south (`j`, `2`)
* `DIR_SW` = 7: southwest (`b`, `1`)
* `DIR_UP` = 8: up (`<`)
* `DIR_DOWN` = 9: down (`>`)
* `DIR_SELF` = 10: at self (`.` or `s`)
* `DIR_NONE` = -1: the user cancelled the prompt
* `DIR_SERVERCANCEL` = -2: the server cancelled the prompt


===getline===


Requests a line of input from the user (can be cancelled by the user, or the
server via a `play_game` response).

Request arguments:
* `string query`: The prompt to display along with the request for a line.

Response arguments:
* `string line`: The line of input from the user. Is the null string if the
null string was entered, a single ESC character (hex 1B) if the user
cancelled the prompt, a single ASCII 28 character (hex 1C) if the server
cancelled the prompt, or otherwise the user's input.


===getpos===


Requests a map location from the user (can be cancelled by the user, or the
server via a `play_game` response).

Request arguments:
* `boolean force`: if true, the client should make it difficult for the user
to cancel the prompt (TODO: the idea behind thies option is bad)
* `string goal`: a description of what the user is supposd to select
* `coordinate x`: the x coordinate to originally place the cursor at
* `coordinate y`: the y coordinate to originally place the cursor at

Response arguments:
* `enum nh_client_response return`: information on how the prompt was closed:
* `NHCR_ACCEPTED` = 0: the user accepted the location using the most
ordinary input (usually `.`);
* `NHCR_CLIENT_CANCEL` = 1: the user cancelled the location prompt
(e.g. via ESC);
* `NHCR_CONTINUE` = 2: the user accepted the location, requesting to
continue choosing locations (normally accomplished via `,`);
* `NHCR_MOREINFO` = 3: the user accepted the location, requesting more
information about it (normally accomplished via `:`);
* `NHCR_MOREINFO_CONTINUE` = 4: a combination of the two previous cases
(normally accomplished via `;`);
* `NHCR_SERVER_CANCEL` = 5: the server cancelled the prompt.
* `coordinate x`: the x coordinate chosen by the user
* `coordinate y`: the y coordinate chosen by the user


===query_key===


Inputs one ASCII code from the user, potentially with a repeat count
beforehand.  This is used for inventory queries, and in a few other cases.  As
always, can be cancelled by the user or the server.

Request arguments:
* `boolean allow_count`: whether to allow a repeat count
* `enum nh_query_key_flags flags`: information about the reason for the
query:
* `NQKF_INVENTORY_ITEM` = 0: an item from inventory
* `NQKF_INVENTORY_ITEM_NULLABLE` = 1: an item from inventory or "-" to
mean bare hands, no item, etc.
* `NQKF_INVENTORY_OR_FLOOR` = 2: an item from inventory or "," to mean an
item on the floor
* `NQKF_SYMBOL` = 3: an object or monster symbol
* `NQKF_LETTER_REASSIGNMENT` = 4: a new inventory or spell letter
* `string query`: what prompt to display to the user

Response arguments:
* `int count`: the repeat count, -1 if none was given; this is supplied
even if `allow_count` is false, but is always -1 in that case and should
be ignored
* `charcode return`: the key the user pressed; this is ESC if cancelled by
the user, ASCII 28 if cancelled by the server


===yn===


Requests the user to choose from a short list of choices represented by ASCII
characters.  As always, can be cancelled by the user or the server.

Request arguments:
* `string query`: the prompt to print to the user
* `string set`: a list of appropriate responses; if ESC is included in the
list, it does not mean that ESC is an appropriate response, but rather, it
means that all responses after the ESC should be hidden from the user
* `charcode def`: the default value to return in the case of a user cancel
(this will be shown to the user in many interfaces)

Response arguments:
* `charcode return`: the choice the user chose; this is `def` if cancelled
by the user, ASCII 28 if cancelled by the server


===load_progress===


Sent by the server periodically during time-consuming background operations in
order to prevent the connection dropping.  This will never have a display list
attached.

Request arguments:
* `int progress`: a number from 0 to 10000, proportional to the estimated
length of the background operation

Response arguments: no response is sent for this message


===server_error===


Called by the server if something goes unrecoverably wrong.  The server closes
the connection immediately after sending this, so sending a response is futile
and not particularly useful.  (For the same sort of message directed in the
opposite direction, see `exit_game`.)

Request arguments:
* `boolean error`: true if the error is caused by something that the client
did, false if the error is internal to the server
* `string message`: a description of what went wrong, which can be displayed
to the user

No response.


==Display elements==


Any message sent by the server, whether as a request or a response, might have
a `display` element attached, which specifies updates to the map.  The
exceptions are `auth`, `register`, and `cancel_server_request`, which never
carry map data.  The `display` element is an array of elements to draw; each
element can be one of the below types.


===delay_output===


Specifies that the client should wait for a short time at this point before
doing any further rendering.

Arguments: `nil`.


===display_buffer===


Specifies that the client should display text to the user.  (The text may be
quite long, and should be word-wrapped and tab-expanded.)

Arguments: an object:
* `string buf`: the text to display
* `boolean trymove`: appears to be unused


===level_changed===


Specifies that the client should change its level display mode.

TODO: make this an enum.

Arguments: an integer:
* `LDM_DEFAULT` = 0: normal display;
* `LDM_HELL` = 1: display appropriate for Gehennom;
* `LDM_QUEST` = 2: display appropriate for the Quest;
* `LDM_MINES` = 3: display appropriate for the Mines;
* `LDM_SOKOBAN` = 4: display appropriate for Sokoban;
* `LDM_ROGUE` = 5: display appropriate for the Rogue level;
* `LDM_KNOX` = 6: display appropriate for Fort Ludios


===list_items===


Specifies a list of items in inventory or on the floor.

TODO: The API of this is vulnerable to length mismatches.

Arguments: an object:
* `int icount`: length of `items`
* `boolean invent`: true means that this list is the player's inventory;
false means that this list is the list of items on the ground
* `struct nh_objitem[] items`: the list of items about which the client is
being informed


===outrip===


Shows an appropriate message to reflect character death (and similar
game-over situations like ascension).

TODO: The API of this is vulnerable to length mismatches.

Arguments: an object:
* `int gold`: amount of gold upon death
* `int how`: as `end_how` in `get_topten`
* `int icount`: length of `items`
* `struct nh_menuitem[] items`: list of messages to print; only the
`caption` field is used. TODO: There has to be a better API for this!
* `string killbuf`: the cause of the game over
* `string name`: the name of the character whose game ended
* `boolean tombstone`: true to request the drawing of a tombstone graphic;
false presents the information entirely as text
* `int year`: a year to draw on the tombstone


===pause===


Wait for user input in order to give the user a chance to read messages or
look at the map.

TODO: This has a pretty weird interaction with server cancel requests.  It
should probably be made a server request, not a display element.

Arguments: an `enum nh_pause_reason`:
* `P_MESSAGE` = 0: give the user a chance to read the message area
* `P_MAP` = 1: give the user a chance to look at the map


===print_message===


Print a message in the message area.

TODO: This API is badly designed and has caused several bugs.

Arguments: an object:
* `string msg`: the message to print
* `int turn`: the turn on which the message was sent


===print_message_nonblocking===


Print a message in the message area.  This message is not important enough to
ensure that the user sees it, and the client should aim to prevent this
forcing a --More-- or similar.

Arguments: as print_message


===raw_print===


Display a message to the user, attempting to bypass the standard rendering and
just displaying the message directly on a console, perhaps after the program
exits.  (This is typically used to make a record of error messages.)

Arguments: a string, the message to print


===update_screen===


Change what is displayed at a particular map location.

Arguments: an object:
* `mapdelta dbuf`: the map delta, in compressed form (see below)
* `coordinate ux`: the character's x location
* `coordinate uy`: the character's y location

A map delta can be an integer 0 if nothing at all has changed.  Otherwise it
is a list of column deltas.  A column delta of 0 means that column is empty,
and 1 means it is unchanged since last time.  Otherwise a column delta is a
list of cell deltas.  Again, 0 means empty, 1 means unchanged.  Otherwise the
cell delta is an `int[10]`, mostly of indexes into the arrays returned by
`get_drawing_info`:

* [0] encoded effect number: the encoding is quite complex, see `draw_map`
in `libnethack/src/map.c` for an example on how to decode it; it
eventually decodes into offsets into `effects`, `zapsyms`, `zaptypes`,
`swallowsyms`, `explsyms`, and/or `expltypes`
* [1] index into `bgelements`
* [2] index into `traps`
* [3] index into `objects`
* [4] index into `monsters`, representing the monster associated with an
object (e.g. "lichen" for "lichen corpse")
* [5] index into `monsters`, representing a monster on that square
* [6] a bitmask that represents details of a monster on the square:
* `MON_TAME` = 1: the monster is tame
* `MON_RIDDEN` = 2: this monster has the player riding it
* `MON_DETECTED` = 4: this monster is seen via monster detection
* `MON_WARNING` = 8: this is a warning symbol, not a monster
* `MON_PEACEFUL` = 16: the monster is peaceful
* [7] a bitmask that represents any branding of the square:
* `NH_BRANDING_STEPPED` = 1: the player has stepped on the square
* `NH_BRANDING_LOCKED` = 2: the player knows this door is locked
* `NH_BRANDING_UNLOCKED` = 4: the player knows this door is unlocked
* `NH_BRANDING_TRAPPED` = 8: the player knows this square is trapped
* `NH_BRANDING_UNTRAPPED` = 16: the player knows this door is untrapped
* [8] index into `invis`
* [9] a boolean, not an int; true if the character can see this square

Indexes have 1 added to them, so that 0 can represent the lack of the
appropriate sort of drawable entity on the square.


===update_status===


Updates the character's status information.

Arguments: an object:
* `int ac`: the character's AC (10 = unarmored, lower is better)
* `int align`: the character's alignment (TODO: what format?)
* `boolean can_enhance`: true if the #enhance command is usable
* `int ch`: the character's Charisma stat
* `int co`: the character's Constitution stat
* `charcode coinsym`: the character to use to represent money
* `int cur_monnum`: the species the character is polymorphed into (an index
into `monsters` returned from `get_drawing_info`)
* `int dx`: the character's Dexterity stat
* `int en`: the character's current Pw
* `int enmax`: the character's maximum Pw
* `int gold`: the character's gold in open inventory
* `int hp`: the character's current HP
* `int hpmax`: the character's maximum HP
* `int in`: the character's Intelligence stat
* `int level`: the character's experience level
* `string level_desc`: a textual description of the character's current
dungeon level
* `int max_rank_sz`: the maximum possible width of a character's
professional title, given their role, even if they change gender or level
* `int monnum`: the species that the character is naturally (an index
into `monsters` returned from `get_drawing_info`)
* `int moves`: the number of turns this game has lasted (1 for the first
turn)
* `int plname`: the character's name
* `string rank`: the character's professional title
* `string racename`: the character's unpolymorphed race (`human`, `dwarf`,
etc.)
* `string gender`: the character's unpolymorphed gender (`male`, `female`,
`neuter`); this is affected by permanent gender changes, but not by
polymorphing into a male/female-only monster
* `string rolename`: the character's current role (`Archaeologist`, etc.)
* `int score`: the character's current score
* `int st`: the integer part of the character's Strength stat
* `int st_extra`: the fractional part of the character's Strength stat
* `string[] statusitems`: a list of status lights currently affecting the
character
* `int wi`: the character's Wisdom stat
* `int x`: the character's x coordinate
* `int xp`: the character's total number of gained experience points (minus
any lost to level drain)
* `int y`: the character's y coordinate
* `int z`: the character's z coordinate




{{variant-343}}
[[Category:Annotations]]
[[Category:Variants]]}
&&%s&& %s Greyknight {78570 2012-06-26T13:49:46Z {831 Tjr} Redirected page to [[User:TPGreyKnight]] #REDIRECT [[User:TPGreyKnight]]}
&&%s&& %s Zorkmids {78632 2012-07-07T01:55:16Z {0 } Redirected page to [[Zorkmid]] #REDIRECT [[Zorkmid]]}
&&%s&& %s Spell resistance {78694 2012-07-14T21:10:51Z {0 } "Monster style" magic resistance is pretty much DnD "spell resistance." Since the similarity of the terms can cause confusion, a redirect page seems appropriate. #REDIRECT [[Magic resistance (monster)]]}
&&%s&& %s Qt {127155 2019-08-19T02:46:13Z {679 Ray Chason} Windows Qt build is broken [[Image:Sokoban-Qt.png|thumbnail|right|200px|NetHack 3.4.3's Qt port, showing a monk in [[Sokoban]].]]
'''Qt''' is a [[GUI]] toolkit developed by Trolltech and now controlled by [[wikipedia:Qt|the Qt Project]].  It is the native graphical API for [[wikipedia:KDE|KDE]] and as such is available for all of the main [[wikipedia:Linux|Linux]] distributions.

NetHack offers an interface based on Qt. [[NetHack 3.3.0]] through [[NetHack 3.6.0|3.6.0]] is compatible with Qt through version 3.  It is not compatible with Qt 4 or 5. Because Qt 5 is the current version, the older Qt interface is difficult to build on modern systems. Furthermore, the [[NetHack 3.6.0]] source has a corrupt version of include/qt_xpms.h ([[Bugs in NetHack 3.6.0#Build-from-source bugs|bug S360-2]]); the version of this file from [[NetHack 3.4.3]] must be substituted.

[[NetHack 3.6.1]] offers a revised interface compatible with Qt 4 and 5. With some modification, it can be made to build on [[Microsoft Windows]] and [[Mac OS X]]. [[NetHack 3.6.2]] has the necessary files to build with Qt 5 on OS X. Unfortunately, the Windows build is broken.

==Features of the Qt interface==
The Qt interface supports tiles and text display.  It uses tiled mode by default, but the text mode display can be enabled by setting the ascii_map [[option]].  Due to a bug in the older Qt interface, it is necessary to redraw the map (press control-R) after changing ascii_map; this is fixed in the Qt 4/5 interface.

{{todo|Note how to set item counts in the inventory display}}

==Special configuration options==
The Qt interface supports a number of unique options in the configuration file; as only Unix supports Qt, this will be ~/.nethackrc .  Some of these can be set from the Game|Qt Options... menu entry.

{|class="wikitable"
!Option!!Values!!Meaning
|-
|QT_TILEWIDTH||1 to 64||Width of tiles as displayed
|-
|QT_TILEHEIGHT||1 to 64||Height of tiles as displayed
|-
|QT_FONTSIZE||t, s, m, l, h||Size of fonts used on the screen:  '''t'''iny, '''s'''mall, '''m'''edium, '''l'''arge, '''h'''uge
|-
|QT_COMPACT||0 or 1||If 1, the message and status windows are on separate pages from the map, and the map is
enlarged to cover most of the screen except for a single line for the messages.
|}

Note that QT_TILEWIDTH and QT_TILEHEIGHT are the size of the tiles as displayed, not as stored in the [[tileset]].  If using [[The Absurd NetHack Tileset|Absurd64]], for example, you would set OPTIONS=tile_width:64,tile_height:64 as always, but QT_TILEWIDTH and QT_TILEHEIGHT can resize the tiles to whatever size you want.

{{todo|Get a screenshot of the compact mode}}

==Compiling==
===Linux===

Use the hints file hints/linux-qt4 or hints/linux-qt5. Depending on the distribution, it may be necessary to edit the hints file to set the MOC variable. Typical values include:
* MOC = moc
* MOC = moc-qt4
* MOC = moc -qt=4
* MOC = moc-qt5
* MOC = moc -qt=5

===Mac OS X===

Use the hints file hints/macosx-10.10-qt. This hints file works with a Qt 5 installation from [https://brew.sh/ Homebrew].

===Windows===

The build of NetHack with GCC is badly broken in 3.6.2, and the makefile for Visual Studio lacks instructions for building the Qt interface. No build instructions for Windows are available at this time.

{{nethack-362}}
[[Category:User interface]]}
&&%s&& %s Naga hatchling {78756 2012-07-27T09:50:45Z {0 } Redirected page to [[Naga#Hatchling]] #REDIRECT [[Naga#Hatchling]]}
&&%s&& %s OOF {78761 2012-07-30T14:30:36Z {4000259 RedFeather} Redirected page to [[The Orb of Fate]] #REDIRECT [[The Orb of Fate]]}
&&%s&& %s MediaWiki:Rumors.js {78763 2012-07-31T16:35:26Z {366 Ilmari Karonen} pick random rumor separately for each occurrence of the template; strip redundant comments /* Included from [[MediaWiki:Common.js]] on pages that use [[Template:Random true rumor]] */

var trueRumors =
[
 "A blindfold can be very useful if you're telepathic.",
 "A candelabrum affixed with seven candles shows the way with a magical light.",
 "A crystal plate mail will not rust.",
 "A katana might slice a worm in two.",
 "A magic vomit pump could be useful for gourmands.",
 "A nymph knows how to unlock chains.",
 "A potion of blindness lets you see invisible things.",
 "A priest can get the gods to listen easily.",
 "A priestess and a virgin you might be, but that unicorn won't care.",
 "A ring of conflict is a bad thing if there is a nurse in the room.",
 "A short sword is not as good as a long sword.",
 "A succubus will go farther than a nymph.",
 "A wand can exorcize a past explorer's ghost.",
 "Acid blobs should be attacked bare-handed.",
 "Affairs with nymphs are often very expensive.",
 "Afraid of nymphs?  Wear a ring of adornment.",
 "Afraid of your valuables being stolen?  Carry more junk!",
 "Always be aware of the phase of the moon!",
 "Always sweep the floor before engraving important messages.",
 "Amulets of Yendor are hard to make.  Even for a wand of wishing.",
 "An elven cloak protects against magic.",
 "An umber hulk can be a confusing sight.",
 "As Crom is my witness, I'll never go hungry again!",
 "Asking about monsters may be very useful.",
 "Attack long worms from the rear -- that is so much safer!",
 "Attacking an eel where there is none is usually a fatal mistake!",
 "Bandaging wounds helps keep up appearances.",
 "Bashing monsters with a bow is not such a good idea.",
 "Be careful!  The Wizard may plan an ambush!",
 "Be nice to a nurse:  Put away your weapon and take off your clothes.",
 "Being digested is a painfully slow process.",
 "Blank scrolls make more interesting reading.",
 "Blind?  Catch a floating eye!",
 "Booksellers never read scrolls; they might get carried away.",
 "Chemistry 101: Never pour water into acid.",
 "Concise conquest:  Control, confuse, conjure, condemn.",
 "Conserve energy, turn off the lights.",
 "Digging up a grave could be a bad idea...",
 "Dilithium crystals are rare indeed.",
 "Dogs are attracted by the smell of tripe.",
 "Dogs are superstitious; they never step on cursed items.",
 "Dogs of ghosts aren't angry, just hungry.",
 "Don't forget!  Large dogs are MUCH harder to kill than little dogs.",
 "Don't mess with shopkeepers, or you'll get the Guild after you.",
 "Dragons never whip their children; they wouldn't feel it!",
 "Eat your carrots.  They're good for your eyes.",
 "Eating a freezing sphere is like eating a yeti.",
 "Eating a killer bee is like eating a scorpion.",
 "Eating a tengu is like eating a nymph.",
 "Eating a wraith is a rewarding experience!",
 "Eating unpaid leprechauns may be advantageous.",
 "Elbereth has quite a reputation around these parts.",
 "Elf corpses are incompatible with the sandman, and at times the gods as well.",
 "Elven cloaks cannot rust.",
 "Even evil players have a guardian angel.",
 "Ever fought with an enchanted tooth?",
 "Ever tried reading while confused?",
 "Ever tried to put a troll into a large box?",
 "Ever wondered why one would want to dip something in a potion?",
 "Expensive cameras have penetrating flash lights.",
 "Extra staircases lead to extra levels.",
 "Fiery letters might deter monsters.",
 "For a good time engrave `Elbereth'.",
 "Gems are too precious to be thrown away carelessly.",
 "Getting hungry?  Stop wearing rings!",
 "Getting too warm?  Take off that Amulet of Yendor and stay away from the exit!",
 "Gods expect the best from their priesthood.",
 "Gods look down their noses at demigods.",
 "Got a question?  Try rec.games.roguelike.nethack.",
 "Grave robbers sometimes get rich.",
 "Guy Montag keeps his scrolls in a bag.",
 "Handle your flasks carefully -- there might be a ghost inside!",
 "Holy water has many uses.",
 "Horses trust their riders, even when not so deserved.",
 "Hunger is a confusing experience for a dog!",
 "I once knew a hacker who ate too fast and choked to death.",
 "I smell a maze of twisty little passages.",
 "I wish I never wished a wand of wishing.  (Wishful thinking.)",
 "I wouldn't advise playing catch with a giant.",
 "I'm watching you.  -- The Wizard of Yendor",
 "Ice boxes keep your food fresh.",
 "If you are being punished, it's done with a deadly weapon.",
 "If you kill the Wizard, you get promoted to demi-god.",
 "If you need a wand of digging, kindly ask the minotaur.",
 "If you want to hit, use a dagger.",
 "If you want to rob a shop, train your dog.",
 "If you're lost, try buying a map next time you're in a shop.",
 "Inside a shop you better take a look at the price tags before buying anything.",
 "It is bad manners to use a wand in a shop.",
 "It is dangerous to visit a graveyard at midnight.",
 "It is not always a good idea to whistle for your dog.",
 "It is rumored that the Wizard has hired some help.",
 "It is the letter 'c' and not 'e' that changes status to statue.",
 "It might be a good idea to offer the unicorn a ruby.",
 "It would be peculiarly sad were your dog turned to stone.",
 "It's a `d' eats `d' world.",
 "Keep your armors away from rust.",
 "Keep your weaponry away from acids.",
 "Kill a unicorn of your color and you kill your luck.",
 "Leather is waterproof.  Ever see a cow with an umbrella?",
 "Leprechauns are the most skilled cutpurses in this dungeon.",
 "Lizard corpses protect against cockatrices.",
 "Money lost, little lost; honor lost, much lost; pluck lost, all lost.",
 "Most monsters can't swim.",
 "Music hath charms to affect the stubborn drawbridge.",
 "Music hath charms to soothe the savage beast.",
 "Never attack a guard.",
 "Never ride a long worm.",
 "Never use your best weapon to engrave a curse.",
 "No easy fighting with a heavy load!",
 "Nurses are trained to touch naked persons:  they don't harm them.",
 "Nymphs can unlink more than your chain mail.",
 "Once your little dog will be a big dog, and you will be proud of it.",
 "Only female monsters can lay eggs.",
 "Opening a tin is difficult, especially when you attempt it bare handed!",
 "Orcs and killer bees share their lifestyle.",
 "Orcs do not procreate in dark rooms.",
 "Plain nymphs are harmless.",
 "Playing AD&D may be helpful.",
 "Playing Gauntlet might be enlightening in some situations.",
 "Playing billiards pays when you are in a shop.",
 "Polymorphing a shopkeeper might make you safer.",
 "Polymorphing your dog probably makes you safer.",
 "Potions don't usually mix, but sometimes...",
 "Psst!  It's done with mirrors!",
 "Put on a ring of teleportation:  it will take you away from onslaught.",
 "Rays aren't boomerangs, of course, but still...",
 "Read the manual before entering the cave -- you might get killed otherwise.",
 "Reading Herbert might be enlightening in one case.",
 "Reading Tolkien might help you.",
 "Reading scrolls after drinking booze can give confusing results.",
 "Riding a dragon can be an uplifting experience.",
 "Rust monsters love water.  There are potions they hate, however.",
 "Sacks protect contents from temperatures up to 452 degrees fahrenheit.",
 "Scrolls fading?  It's not the heat, it's the humidity.",
 "Shopkeepers accept credit cards, as long as you pay cash.",
 "Shopkeepers can spot a tourist a mile away with those Hawaiian shirts.",
 "Shopkeepers can't tell identical twins apart.",
 "Shopkeepers don't read, so what use is engraving in a shop?",
 "Shopkeepers have incredible patience.",
 "Shopkeepers might raise their prices for tourists.",
 "Shopkeepers value money more than revenge.",
 "Some monsters can be tamed.  I once saw a hacker with a tame dragon!",
 "Someone once said that what goes up < might come down >.",
 "Someone's been spiking the pits!",
 "Sometimes monsters are more likely to fight each other than attack you.",
 "Spinach, carrot, and jelly -- a meal fit for a nurse!",
 "Tainted meat is even more sickening than poison!",
 "Telepathy is just a trick:  once you know how to do it, it's easy.",
 "The Leprechaun Gold Tru$t is no division of the Magic Memory Vault.",
 "The Wizard finds death to be quite an experience.",
 "The best equipment for your work is, of course, the most expensive.",
 "The gods don't appreciate pesky priesthood.",
 "The gods will get angry if you kill your dog.",
 "The magic marker is mightier than the sword.",
 "The moon is not the only heavenly body to influence this game.",
 "The orc swings his orcish broadsword named Elfrist at you.  You die...",
 "The secret of wands of Nothing Happens:  try again!",
 "There has always been something mystical about mirrors.",
 "There is a Mastermind deep in the dungeon.",
 "There is a big treasure hidden in the zoo!",
 "There is more magic in this cave than meets the eye.",
 "There is no harm in praising a large dog.",
 "There is nothing like eating a mimic.",
 "There once was a Knight named Lancelot who liked to ride with his lance a lot.",
 "They say a gelatinous cube can paralyze you...",
 "They say that Juiblex is afraid of a wand of digging.",
 "They say that Medusa would like to put you on a pedestal.",
 "They say that Vlad lives!!! ... in the mazes.",
 "They say that `Elbereth' is often written about.",
 "They say that a bag of holding can't hold everything.",
 "They say that a blessed tin of quasit meat is a quick meal.",
 "They say that a cat avoids traps.",
 "They say that a cave spider will occasionally eat cave spider eggs.",
 "They say that a clever wizard can have stats:  18/** 24 18 24 24 24.",
 "They say that a clove of garlic makes a good talisman if handled right.",
 "They say that a cursed scroll of teleportation could land you in trouble.",
 "They say that a diamond is another kind of luck stone.",
 "They say that a dog can be trained to fetch objects.",
 "They say that a gelatinous cube makes a healthy breakfast.",
 "They say that a giant gets strong by eating right, try it!",
 "They say that a grid bug won't hit you when you cross it.",
 "They say that a lembas wafer is a very light snack.",
 "They say that a loadstone has a strange attraction and is not bad luck.",
