| class        = one or more custom class names (optional; used for CSS styling)
| icon_nr      = offset of the top icon (must be used if you have more than one top icon on a page)
| extra_offset = an additional offset in pixels (if you have >20px top icons in a row)
| width        = width of the image (defaults to 15)
| height       = height of the image (defaults to width)
| style        = add this to the style of the icon div (optional)
}}</pre>

Note that for <code>icon_nr</code> to work well, all uses of <code><nowiki>{{top icon}}</nowiki></code> on a page should have the same width. If they don't, you may be able to use <code>extra_offset</code>.

[[Category:Top icon templates|{{PAGENAME}}]]</noinclude>}
&&%s&& %s Template:Version icon {134636 2020-06-28T04:11:08Z {4000693 Phol ende wodan} there's no "nethack-36" template; use a real one in the example <noinclude>
This template is used to create [[NetHackWiki:Next version|version templates]].
==Example==
<pre>
{{version icon
| imagename        = nh360-icon.png
| description      = This article may require revision for the next version of NetHack.
| long description = contains information about [[NetHack 3.6.0]], and may require revision for future versions of NetHack
| icon_nr          = {{{offset|0}}}
| included         = <includeonly>1</includeonly>
}}
</pre>
</noinclude><includeonly>
{{top icon
| imagename    = {{{imagename}}}
| wikilink     = NetHackWiki:Next version
| description  = {{{description}}} Click here for more information.
| icon_nr      = {{{icon_nr}}}
| width        = 32
| style        = padding-bottom: 17px
}}{{#if:{{{included}}}||
This template places a small icon in the top right corner of an article to indicate that it {{{long description}}}. See [[NetHackWiki:Next version]] for more information. This template should be placed at the bottom of the article.

If this is one of multiple top icons on a single page, specify an offset like this:

<pre>
{{slashem-7E7}}
{{nethack-366|offset=1}}
</pre>

so that the tags do not appear on top of each other.

[[Category:Top icon templates|{{PAGENAME}}]]}}}
&&%s&& %s Knives {77938 2012-05-17T21:20:32Z {0 } Redirected page to [[Knife]] #REDIRECT [[Knife]]}
&&%s&& %s Nicehack {77940 2012-05-18T00:36:59Z {0 } Redirected page to [[NetHack 4]] #REDIRECT [[NetHack 4]]}
&&%s&& %s NiceHack {77942 2012-05-18T00:46:32Z {0 } this might as well redirect if [[Nicehack]] does #REDIRECT [[NetHack 4]]}
&&%s&& %s Demonia {144316 2022-02-02T11:46:09Z {4001279 Umbire the Phantom}  '''Demonia''' is a [[bot]] that plays on [[nethack.alt.org]]. Demonia explores the dungeon as no human player would ever do.

Observers have watched Demonia perform slow, repetitive tasks that no human player would do. One game during May 2012 (or was it April?) took attention in #nethack on the old Freenode network, as Demonia became stuck on a level, trying to find a secret door or passage. Demonia searched the entire perimeter, checking every [[wall]] or [[corridor]], and cycled around the map, continuing the search, without pause, for thousands of turns.

A significant milestone was achieved on February 3, 2015, where Demonia made it into the Castle's entrance and again grabbed the attention of #nethack. Having no code for entering the castle, Demonia fruitlessly spent thousands of turns wandering around the maze portion. Perhaps future coding of Demonia will rectify this issue and set the bot closer towards ascension.

Demonia typically plays as a [[Valkyrie]], perhaps because this is one of the easiest [[role]]s. Demonia's survival tactics include engraving [[Elbereth]], and [[pray]]ing to solve hunger after [[fainting]].

While Demonia has code for [[wish]]ing, it has never been tested; in April 2013, while [[dip]]ping a [[long sword]] to create [[Excalibur]], a [[water demon]] offered a [[wish]]. Demonia wished for "2", possibly an attempted movement command at an unexpected wish prompt.

==Links==
* {{NAOplayer|Demonia}}
* [https://github.com/TAEB/demonia Source code mirror]

[[Category:Bots]]}
&&%s&& %s Arachnid {78014 2012-05-22T13:31:22Z {366 Ilmari Karonen} #REDIRECT [[Spider]] #REDIRECT [[Spider]]}
&&%s&& %s Template:Aa {83147 2013-03-09T05:10:54Z {630 Paxed} link {{tl|va}} <includeonly><span id="{{{1}}}">{{sa|{{{1}}}|{{{2|{{{1}}}}}}}}</span></includeonly><noinclude>
This template creates an anchor in the text, so you can link to that location with <code><nowiki>[[#link|...]]</nowiki></code> syntax, or the {{tl|sa}} template. It also turns the text into a link to that anchor for easy external linking; if you don't want that, use {{tl|va}} or {{tl|anchor}}.

==Usage==
*<code><nowiki>{{aa|foo}}</nowiki></code> creates an anchor '''foo''' and shows text '''foo'''
*<code><nowiki>{{aa|foo|bar}}</nowiki></code> creates an anchor '''foo''' and shows text '''bar'''

==See also==
*{{tl|anchor}}
*{{tl|sa}}
*{{tl|va}}

[[Category:Templates|{{PAGENAME}}]]
</noinclude>}
&&%s&& %s Color alchemy {78036 2012-05-23T00:54:00Z {13 Aaxelb} Redirected page to [[Alchemy#Color alchemy]] #REDIRECT [[Alchemy#Color_alchemy]]}
&&%s&& %s Box {78052 2012-05-23T21:35:54Z {366 Ilmari Karonen} #REDIRECT [[Container#Large_box]] #REDIRECT [[Container#Large_box]]}
&&%s&& %s Teleport at will {78092 2012-05-25T16:10:38Z {13 Aaxelb} Redirected page to [[Teleportitis#Teleporting at will]] #REDIRECT [[Teleportitis#Teleporting_at_will]]}
&&%s&& %s Teleporting at will {78093 2012-05-25T16:11:09Z {13 Aaxelb} Redirected page to [[Teleportitis#Teleporting at will]] #REDIRECT [[Teleportitis#Teleporting_at_will]]}
&&%s&& %s Eroded {78132 2012-05-27T14:09:59Z {4000266 Bejonas} Redirected page to [[Erosion]] #REDIRECT [[Erosion]]}
&&%s&& %s MP {78133 2012-05-27T14:10:34Z {4000266 Bejonas} Redirected page to [[Energy]] #REDIRECT [[Energy]]}
&&%s&& %s Template:Sa {126312 2019-07-20T06:40:29Z {4001313 Ardub23} Added support for 'sectionsign' parameter; if true, a ยง is added to link text <includeonly>[[#{{{1}}}|{{#if:{{{sectionsign|}}}|ยง&nbsp;}}{{{2|{{{1}}}}}}]]</includeonly><noinclude>
This template creates a link to an anchor in the text. You can use eg. {{tl|anchor}} or {{tl|va}} to create the anchors.

==Usage==
*<code><nowiki>{{sa|foo}}</nowiki></code> creates a link to anchor '''foo''' with link text '''foo'''
**<code><nowiki>{{sa|foo|sectionsign=true}}</nowiki></code> creates a link to anchor '''foo''' with link text '''ยง foo'''
*<code><nowiki>{{sa|foo|bar}}</nowiki></code> creates a link to an anchor '''foo''' with link text '''bar'''

==See also==
*{{tl|anchor}}
*{{tl|aa}}
*{{tl|va}}

[[Category:Templates|{{PAGENAME}}]]
</noinclude>}
&&%s&& %s Eggs {78195 2012-05-29T14:43:17Z {0 } Created redirect to Egg. #REDIRECT [[Egg]]}
&&%s&& %s SLASH'EM 0.0.7E7F3 source code {78201 2012-05-29T23:15:30Z {663 Qazmlpok} Adding list of files. I think some are supposed to be filtered, but I don't know which. This page contains links to the '''source code''' of [[SLASH'EM 0.0.7E7F3]].

''For more files, see the previous version at [[SLASH'EM 0.0.7E7F2 source code]].''

{{todo|List all include/*.h and src/*.c files from 0.0.7E7F3. Upload those files, perhaps using a bot. When a file is identical in 0.0.7E7F2 and 0.0.7E7F3, perhaps move the file and leave a redirect?}}

{|style="width: 100%;"
|style="width: 50%; vertical-align: top;"|
=== Header files ===
* [[Source:SLASH'EM 0.0.7E7F3/align.h|align.h]]
* [[Source:SLASH'EM 0.0.7E7F3/amiconf.h|amiconf.h]]
* [[Source:SLASH'EM 0.0.7E7F3/artifact.h|artifact.h]]
* [[Source:SLASH'EM 0.0.7E7F3/artilist.h|artilist.h]]
* [[Source:SLASH'EM 0.0.7E7F3/attk.h|attk.h]]
* [[Source:SLASH'EM 0.0.7E7F3/attrib.h|attrib.h]]
* [[Source:SLASH'EM 0.0.7E7F3/beconf.h|beconf.h]]
* [[Source:SLASH'EM 0.0.7E7F3/bitmfile.h|bitmfile.h]]
* [[Source:SLASH'EM 0.0.7E7F3/color.h|color.h]]
* [[Source:SLASH'EM 0.0.7E7F3/config.h|config.h]]
* [[Source:SLASH'EM 0.0.7E7F3/config1.h|config1.h]]
* [[Source:SLASH'EM 0.0.7E7F3/coord.h|coord.h]]
* [[Source:SLASH'EM 0.0.7E7F3/decl.h|decl.h]]
* [[Source:SLASH'EM 0.0.7E7F3/def_os2.h|def_os2.h]]
* [[Source:SLASH'EM 0.0.7E7F3/dgn_file.h|dgn_file.h]]
* [[Source:SLASH'EM 0.0.7E7F3/display.h|display.h]]
* [[Source:SLASH'EM 0.0.7E7F3/dlb.h|dlb.h]]
* [[Source:SLASH'EM 0.0.7E7F3/dungeon.h|dungeon.h]]
* [[Source:SLASH'EM 0.0.7E7F3/edog.h|edog.h]]
* [[Source:SLASH'EM 0.0.7E7F3/egyp.h|egyp.h]]
* [[Source:SLASH'EM 0.0.7E7F3/emin.h|emin.h]]
* [[Source:SLASH'EM 0.0.7E7F3/engrave.h|engrave.h]]
* [[Source:SLASH'EM 0.0.7E7F3/epri.h|epri.h]]
* [[Source:SLASH'EM 0.0.7E7F3/eshk.h|eshk.h]]
* [[Source:SLASH'EM 0.0.7E7F3/extern.h|extern.h]]
* [[Source:SLASH'EM 0.0.7E7F3/file.h|file.h]]
* [[Source:SLASH'EM 0.0.7E7F3/flag.h|flag.h]]
* [[Source:SLASH'EM 0.0.7E7F3/func_tab.h|func_tab.h]]
* [[Source:SLASH'EM 0.0.7E7F3/gem_rsc.h|gem_rsc.h]]
* [[Source:SLASH'EM 0.0.7E7F3/global.h|global.h]]
* [[Source:SLASH'EM 0.0.7E7F3/hack.h|hack.h]]
* [[Source:SLASH'EM 0.0.7E7F3/lev.h|lev.h]]
* [[Source:SLASH'EM 0.0.7E7F3/load_img.h|load_img.h]]
* [[Source:SLASH'EM 0.0.7E7F3/mac-carbon.h|mac-carbon.h]]
* [[Source:SLASH'EM 0.0.7E7F3/mac-qt.h|mac-qt.h]]
* [[Source:SLASH'EM 0.0.7E7F3/mac-term.h|mac-term.h]]
* [[Source:SLASH'EM 0.0.7E7F3/macconf.h|macconf.h]]
* [[Source:SLASH'EM 0.0.7E7F3/macpopup.h|macpopup.h]]
* [[Source:SLASH'EM 0.0.7E7F3/mactty.h|mactty.h]]
* [[Source:SLASH'EM 0.0.7E7F3/macwin.h|macwin.h]]
* [[Source:SLASH'EM 0.0.7E7F3/mail.h|mail.h]]
* [[Source:SLASH'EM 0.0.7E7F3/md5.h|md5.h]]
* [[Source:SLASH'EM 0.0.7E7F3/mfndpos.h|mfndpos.h]]
* [[Source:SLASH'EM 0.0.7E7F3/micro.h|micro.h]]
* [[Source:SLASH'EM 0.0.7E7F3/mkroom.h|mkroom.h]]
* [[Source:SLASH'EM 0.0.7E7F3/monattk.h|monattk.h]]
* [[Source:SLASH'EM 0.0.7E7F3/mondata.h|mondata.h]]
* [[Source:SLASH'EM 0.0.7E7F3/monflag.h|monflag.h]]
* [[Source:SLASH'EM 0.0.7E7F3/monst.h|monst.h]]
* [[Source:SLASH'EM 0.0.7E7F3/monsym.h|monsym.h]]
* [[Source:SLASH'EM 0.0.7E7F3/mttypriv.h|mttypriv.h]]
* [[Source:SLASH'EM 0.0.7E7F3/nhlan.h|nhlan.h]]
* [[Source:SLASH'EM 0.0.7E7F3/nhxdr.h|nhxdr.h]]
* [[Source:SLASH'EM 0.0.7E7F3/ntconf.h|ntconf.h]]
* [[Source:SLASH'EM 0.0.7E7F3/obj.h|obj.h]]
* [[Source:SLASH'EM 0.0.7E7F3/objclass.h|objclass.h]]
* [[Source:SLASH'EM 0.0.7E7F3/os2conf.h|os2conf.h]]
* [[Source:SLASH'EM 0.0.7E7F3/patchlevel.h|patchlevel.h]]
* [[Source:SLASH'EM 0.0.7E7F3/pcconf.h|pcconf.h]]
* [[Source:SLASH'EM 0.0.7E7F3/permonst.h|permonst.h]]
* [[Source:SLASH'EM 0.0.7E7F3/prop.h|prop.h]]
* [[Source:SLASH'EM 0.0.7E7F3/proxycb.h|proxycb.h]]
* [[Source:SLASH'EM 0.0.7E7F3/proxycom.h|proxycom.h]]
* [[Source:SLASH'EM 0.0.7E7F3/prxyclnt.h|prxyclnt.h]]
* [[Source:SLASH'EM 0.0.7E7F3/qtext.h|qtext.h]]
* [[Source:SLASH'EM 0.0.7E7F3/qttableview.h|qttableview.h]]
* [[Source:SLASH'EM 0.0.7E7F3/qt_clust.h|qt_clust.h]]
* [[Source:SLASH'EM 0.0.7E7F3/qt_kde0.h|qt_kde0.h]]
* [[Source:SLASH'EM 0.0.7E7F3/qt_win.h|qt_win.h]]
* [[Source:SLASH'EM 0.0.7E7F3/qt_xpms.h|qt_xpms.h]]
* [[Source:SLASH'EM 0.0.7E7F3/quest.h|quest.h]]
* [[Source:SLASH'EM 0.0.7E7F3/rect.h|rect.h]]
* [[Source:SLASH'EM 0.0.7E7F3/region.h|region.h]]
* [[Source:SLASH'EM 0.0.7E7F3/rm.h|rm.h]]
* [[Source:SLASH'EM 0.0.7E7F3/skills.h|skills.h]]
* [[Source:SLASH'EM 0.0.7E7F3/spell.h|spell.h]]
* [[Source:SLASH'EM 0.0.7E7F3/sp_lev.h|sp_lev.h]]
* [[Source:SLASH'EM 0.0.7E7F3/system.h|system.h]]
* [[Source:SLASH'EM 0.0.7E7F3/tcap.h|tcap.h]]
* [[Source:SLASH'EM 0.0.7E7F3/tech.h|tech.h]]
* [[Source:SLASH'EM 0.0.7E7F3/tile2x11.h|tile2x11.h]]
* [[Source:SLASH'EM 0.0.7E7F3/timeout.h|timeout.h]]
* [[Source:SLASH'EM 0.0.7E7F3/tosconf.h|tosconf.h]]
* [[Source:SLASH'EM 0.0.7E7F3/tradstdc.h|tradstdc.h]]
* [[Source:SLASH'EM 0.0.7E7F3/trampoli.h|trampoli.h]]
* [[Source:SLASH'EM 0.0.7E7F3/trap.h|trap.h]]
* [[Source:SLASH'EM 0.0.7E7F3/unixconf.h|unixconf.h]]
* [[Source:SLASH'EM 0.0.7E7F3/vault.h|vault.h]]
* [[Source:SLASH'EM 0.0.7E7F3/vision.h|vision.h]]
* [[Source:SLASH'EM 0.0.7E7F3/vmsconf.h|vmsconf.h]]
* [[Source:SLASH'EM 0.0.7E7F3/wceconf.h|wceconf.h]]
* [[Source:SLASH'EM 0.0.7E7F3/winami.h|winami.h]]
* [[Source:SLASH'EM 0.0.7E7F3/wingem.h|wingem.h]]
* [[Source:SLASH'EM 0.0.7E7F3/winGL.h|winGL.h]]
* [[Source:SLASH'EM 0.0.7E7F3/winGnome.h|winGnome.h]]
* [[Source:SLASH'EM 0.0.7E7F3/winGTK.h|winGTK.h]]
* [[Source:SLASH'EM 0.0.7E7F3/winprocs.h|winprocs.h]]
* [[Source:SLASH'EM 0.0.7E7F3/winproxy.h|winproxy.h]]
* [[Source:SLASH'EM 0.0.7E7F3/wintty.h|wintty.h]]
* [[Source:SLASH'EM 0.0.7E7F3/wintype.h|wintype.h]]
* [[Source:SLASH'EM 0.0.7E7F3/winX.h|winX.h]]
* [[Source:SLASH'EM 0.0.7E7F3/xwindow.h|xwindow.h]]
* [[Source:SLASH'EM 0.0.7E7F3/xwindowp.h|xwindowp.h]]
* [[Source:SLASH'EM 0.0.7E7F3/you.h|you.h]]
* [[Source:SLASH'EM 0.0.7E7F3/youprop.h|youprop.h]]
|style="width: 50%; vertical-align: top;"|
=== Source files ===
* [[Source:SLASH'EM 0.0.7E7F3/allmain.c|allmain.c]]
* [[Source:SLASH'EM 0.0.7E7F3/alloc.c|alloc.c]]
* [[Source:SLASH'EM 0.0.7E7F3/apply.c|apply.c]]
* [[Source:SLASH'EM 0.0.7E7F3/artifact.c|artifact.c]]
* [[Source:SLASH'EM 0.0.7E7F3/attrib.c|attrib.c]]
* [[Source:SLASH'EM 0.0.7E7F3/ball.c|ball.c]]
* [[Source:SLASH'EM 0.0.7E7F3/bones.c|bones.c]]
* [[Source:SLASH'EM 0.0.7E7F3/borg.c|borg.c]]
* [[Source:SLASH'EM 0.0.7E7F3/botl.c|botl.c]]
* [[Source:SLASH'EM 0.0.7E7F3/cmd.c|cmd.c]]
* [[Source:SLASH'EM 0.0.7E7F3/dbridge.c|dbridge.c]]
* [[Source:SLASH'EM 0.0.7E7F3/decl.c|decl.c]]
* [[Source:SLASH'EM 0.0.7E7F3/detect.c|detect.c]]
* [[Source:SLASH'EM 0.0.7E7F3/dig.c|dig.c]]
* [[Source:SLASH'EM 0.0.7E7F3/display.c|display.c]]
* [[Source:SLASH'EM 0.0.7E7F3/dlb.c|dlb.c]]
* [[Source:SLASH'EM 0.0.7E7F3/do.c|do.c]]
* [[Source:SLASH'EM 0.0.7E7F3/dog.c|dog.c]]
* [[Source:SLASH'EM 0.0.7E7F3/dogmove.c|dogmove.c]]
* [[Source:SLASH'EM 0.0.7E7F3/dokick.c|dokick.c]]
* [[Source:SLASH'EM 0.0.7E7F3/dothrow.c|dothrow.c]]
* [[Source:SLASH'EM 0.0.7E7F3/do_name.c|do_name.c]]
* [[Source:SLASH'EM 0.0.7E7F3/do_wear.c|do_wear.c]]
* [[Source:SLASH'EM 0.0.7E7F3/drawing.c|drawing.c]]
* [[Source:SLASH'EM 0.0.7E7F3/dungeon.c|dungeon.c]]
* [[Source:SLASH'EM 0.0.7E7F3/eat.c|eat.c]]
* [[Source:SLASH'EM 0.0.7E7F3/end.c|end.c]]
* [[Source:SLASH'EM 0.0.7E7F3/engrave.c|engrave.c]]
* [[Source:SLASH'EM 0.0.7E7F3/exper.c|exper.c]]
* [[Source:SLASH'EM 0.0.7E7F3/explode.c|explode.c]]
* [[Source:SLASH'EM 0.0.7E7F3/extralev.c|extralev.c]]
* [[Source:SLASH'EM 0.0.7E7F3/files.c|files.c]]
* [[Source:SLASH'EM 0.0.7E7F3/fountain.c|fountain.c]]
* [[Source:SLASH'EM 0.0.7E7F3/gypsy.c|gypsy.c]]
* [[Source:SLASH'EM 0.0.7E7F3/hack.c|hack.c]]
* [[Source:SLASH'EM 0.0.7E7F3/hacklib.c|hacklib.c]]
* [[Source:SLASH'EM 0.0.7E7F3/invent.c|invent.c]]
* [[Source:SLASH'EM 0.0.7E7F3/light.c|light.c]]
* [[Source:SLASH'EM 0.0.7E7F3/lock.c|lock.c]]
* [[Source:SLASH'EM 0.0.7E7F3/mail.c|mail.c]]
* [[Source:SLASH'EM 0.0.7E7F3/makemon.c|makemon.c]]
* [[Source:SLASH'EM 0.0.7E7F3/mapglyph.c|mapglyph.c]]
* [[Source:SLASH'EM 0.0.7E7F3/mcastu.c|mcastu.c]]
* [[Source:SLASH'EM 0.0.7E7F3/mhitm.c|mhitm.c]]
* [[Source:SLASH'EM 0.0.7E7F3/mhitu.c|mhitu.c]]
* [[Source:SLASH'EM 0.0.7E7F3/minion.c|minion.c]]
* [[Source:SLASH'EM 0.0.7E7F3/mklev.c|mklev.c]]
* [[Source:SLASH'EM 0.0.7E7F3/mkmap.c|mkmap.c]]
* [[Source:SLASH'EM 0.0.7E7F3/mkmaze.c|mkmaze.c]]
* [[Source:SLASH'EM 0.0.7E7F3/mkobj.c|mkobj.c]]
* [[Source:SLASH'EM 0.0.7E7F3/mkroom.c|mkroom.c]]
* [[Source:SLASH'EM 0.0.7E7F3/mon.c|mon.c]]
* [[Source:SLASH'EM 0.0.7E7F3/mondata.c|mondata.c]]
* [[Source:SLASH'EM 0.0.7E7F3/monmove.c|monmove.c]]
* [[Source:SLASH'EM 0.0.7E7F3/monst.c|monst.c]]
* [[Source:SLASH'EM 0.0.7E7F3/mplayer.c|mplayer.c]]
* [[Source:SLASH'EM 0.0.7E7F3/mthrowu.c|mthrowu.c]]
* [[Source:SLASH'EM 0.0.7E7F3/muse.c|muse.c]]
* [[Source:SLASH'EM 0.0.7E7F3/music.c|music.c]]
* [[Source:SLASH'EM 0.0.7E7F3/objects.c|objects.c]]
* [[Source:SLASH'EM 0.0.7E7F3/objnam.c|objnam.c]]
* [[Source:SLASH'EM 0.0.7E7F3/options.c|options.c]]
* [[Source:SLASH'EM 0.0.7E7F3/o_init.c|o_init.c]]
* [[Source:SLASH'EM 0.0.7E7F3/pager.c|pager.c]]
* [[Source:SLASH'EM 0.0.7E7F3/pickup.c|pickup.c]]
* [[Source:SLASH'EM 0.0.7E7F3/pline.c|pline.c]]
* [[Source:SLASH'EM 0.0.7E7F3/polyself.c|polyself.c]]
* [[Source:SLASH'EM 0.0.7E7F3/potion.c|potion.c]]
* [[Source:SLASH'EM 0.0.7E7F3/pray.c|pray.c]]
* [[Source:SLASH'EM 0.0.7E7F3/priest.c|priest.c]]
* [[Source:SLASH'EM 0.0.7E7F3/quest.c|quest.c]]
* [[Source:SLASH'EM 0.0.7E7F3/questpgr.c|questpgr.c]]
* [[Source:SLASH'EM 0.0.7E7F3/read.c|read.c]]
* [[Source:SLASH'EM 0.0.7E7F3/rect.c|rect.c]]
* [[Source:SLASH'EM 0.0.7E7F3/region.c|region.c]]
* [[Source:SLASH'EM 0.0.7E7F3/restore.c|restore.c]]
* [[Source:SLASH'EM 0.0.7E7F3/rip.c|rip.c]]
* [[Source:SLASH'EM 0.0.7E7F3/rnd.c|rnd.c]]
* [[Source:SLASH'EM 0.0.7E7F3/role.c|role.c]]
* [[Source:SLASH'EM 0.0.7E7F3/rumors.c|rumors.c]]
* [[Source:SLASH'EM 0.0.7E7F3/save.c|save.c]]
* [[Source:SLASH'EM 0.0.7E7F3/shk.c|shk.c]]
* [[Source:SLASH'EM 0.0.7E7F3/shknam.c|shknam.c]]
* [[Source:SLASH'EM 0.0.7E7F3/sit.c|sit.c]]
* [[Source:SLASH'EM 0.0.7E7F3/sounds.c|sounds.c]]
* [[Source:SLASH'EM 0.0.7E7F3/spell.c|spell.c]]
* [[Source:SLASH'EM 0.0.7E7F3/sp_lev.c|sp_lev.c]]
* [[Source:SLASH'EM 0.0.7E7F3/steal.c|steal.c]]
* [[Source:SLASH'EM 0.0.7E7F3/steed.c|steed.c]]
* [[Source:SLASH'EM 0.0.7E7F3/tech.c|tech.c]]
* [[Source:SLASH'EM 0.0.7E7F3/teleport.c|teleport.c]]
* [[Source:SLASH'EM 0.0.7E7F3/timeout.c|timeout.c]]
* [[Source:SLASH'EM 0.0.7E7F3/topten.c|topten.c]]
* [[Source:SLASH'EM 0.0.7E7F3/track.c|track.c]]
* [[Source:SLASH'EM 0.0.7E7F3/trap.c|trap.c]]
* [[Source:SLASH'EM 0.0.7E7F3/uhitm.c|uhitm.c]]
* [[Source:SLASH'EM 0.0.7E7F3/u_init.c|u_init.c]]
* [[Source:SLASH'EM 0.0.7E7F3/vault.c|vault.c]]
* [[Source:SLASH'EM 0.0.7E7F3/version.c|version.c]]
* [[Source:SLASH'EM 0.0.7E7F3/vision.c|vision.c]]
* [[Source:SLASH'EM 0.0.7E7F3/weapon.c|weapon.c]]
* [[Source:SLASH'EM 0.0.7E7F3/were.c|were.c]]
* [[Source:SLASH'EM 0.0.7E7F3/wield.c|wield.c]]
* [[Source:SLASH'EM 0.0.7E7F3/windows.c|windows.c]]
* [[Source:SLASH'EM 0.0.7E7F3/wizard.c|wizard.c]]
* [[Source:SLASH'EM 0.0.7E7F3/worm.c|worm.c]]
* [[Source:SLASH'EM 0.0.7E7F3/worn.c|worn.c]]
* [[Source:SLASH'EM 0.0.7E7F3/write.c|write.c]]
* [[Source:SLASH'EM 0.0.7E7F3/zap.c|zap.c]]
|}

[[Category:SLASH'EM 0.0.7E7F3 source code| ]]}
&&%s&& %s SLASH'EM 0.0.7E7F2 {78221 2012-05-30T22:27:57Z {458 Kernigh} Redirect to section. #REDIRECT [[SLASH'EM 0.0.7#SLASH'EM 0.0.7E7F2]]}
&&%s&& %s SLASH'EM Vampire {82318 2013-01-18T09:06:32Z {4000045 Bulwersator}  SLASH'EM Vampire may refer to:

* The name for the series of [[SLASH'EM 0.0.7]] stable releases
* The [[Vampire (starting race in SLASH'EM)]]

{{disambig}}}
&&%s&& %s SLASH'EM 0.0.7E7F3 {78223 2012-05-30T22:32:15Z {458 Kernigh} #REDIRECT [[SLASH'EM 0.0.7#SLASH'EM 0.0.7E7F3]]; This redirect serves the links to "SLASH'EM 0.0.7E7F3" from the pages of [[SLASH'EM 0.0.7E7F3 source code]]. #REDIRECT [[SLASH'EM 0.0.7#SLASH'EM 0.0.7E7F3]]}
&&%s&& %s Torch {148447 2022-10-05T00:14:03Z {4001279 Umbire the Phantom} cat {{weapon
 |color=wood color
 |glyph=(
 |name=torch
 |appearance=torch
 |smalldmg=1d2+(1+(1d3))
 |largedmg=1d5+(1+(1d3))
 |tohit=<nowiki>+0</nowiki>
 |skill=club
 |size=one-handed
 |cost=8
 |weight=20
 |material=wood
}}
A '''torch''' is a new [[weapon-tool]] in [[SLASH'EM]]. A lit torch becomes your [[wield]]ed weapon, and does [[fire]] damage to monsters. A new torch can stay lit for 600 to 899 turns<ref>{{sourcecode|mkobj.c|530|version=SLASH'EM 0.0.7E7F3}}</ref> before it burns out.

When a lit torch hits a monster without [[fire resistance]], it deals 1 extra damage, plus an additional 1d3 damage if the monster resists cold.<ref>{{sourcecode|uhitm.c|1062|version=SLASH'EM 0.0.7E7F3}}</ref> It also has a chance of destroying [[potion]]s, [[scroll]]s or [[spellbook]]s in the monster's inventory.

== Usage ==
To light a torch, [[apply]] it with {{kbd|a}}. This wields the torch! A cursed torch will weld itself to your hand. You can't light a torch if you can't wield it (for example, when wielding a cursed weapon, or polymorphed into something without [[hand]]s).

To extinguish a wielded lit torch, either [[apply]] it again, or wield something else. You can't keep a lit torch in your [[pack]]; you will automatically extinguish the torch. However, you can [[drop]] or [[throw]] a lit torch, and it will stay lit. By dropping a lit torch, you can enjoy its light while you wield a better weapon. If you [[pick up]] a lit torch, you automatically extinguish it.

A lit torch shines for radius 3, same as a [[brass lantern]], [[oil lamp]] or [[magic candle]]. However, those light sources are more convenient because you can carry them without wielding them.

{{lightradius|r=3}}

== dNethack ==
In [[dNethack]], torches behave somewhat differently from SLASH'EM.

* Torches do not have to be wielded to be lit.
* Torches deal increased fire damage on hit, 1d6+enchantment, multiplied by 1.5 if the defender resists cold.
* A lit torch shines for radius 4, and burns down to radius 3 and 2 as it runs out of time. When it completely burns out, there's a small chance it will leave behind a burnt [[club]].

== History ==
{{patch
 |author=Malcolm Ryan
 |download=http://www.cse.unsw.edu.au/~malcolmr/nethack/3.4.0/torch-patch.diff
 |bilious=88
}}
The torch first appeared in a [[patch]] for NetHack 3.4.0. Then SLASH'EM 0.0.7E0 included this patch.<ref>history.txt in SLASH'EM</ref>

== References ==
<references />

{{slashem-7E7}}
[[Category:Patches]]
[[Category:SLASH'EM items]]
[[Category:SlashTHEM items]]}
&&%s&& %s Self polymorph {78292 2012-06-02T21:08:16Z {13 Aaxelb} Redirected page to [[Polymorph#Self-polymorph]] #REDIRECT [[Polymorph#Self-polymorph]]}
&&%s&& %s Iron bar {78305 2012-06-04T10:07:46Z {831 Tjr} Redirected page to [[Iron bars]] #redirect [[Iron_bars]]}
&&%s&& %s Why do I keep dying? {143457 2021-10-27T16:34:00Z {4001191 Vivit} /* Identifying */ This page is an attempt to provide basic tips for survival and it specifically describes typical beginner misconceptions regarding ''[[NetHack]]''. It is aimed at new players who feel like they can't get the hang of it and [[die]] early every game, so it will focus on the [[early game]] stage and deliberately ignore ''NetHack''<nowiki>'</nowiki>s abundant corner cases. Follow the links if you want a complete [[strategy]] overview.

It is assumed you have played (and died) a couple of dozen times and know how to open [[door]]s and do simple stuff like that. If you are still wondering what the funny {{white|@}} means, then first have a look at the excellent [[Guidebook]] that comes with ''NetHack'', play a few games to get the feel of it, ''read the Guidebook again''โpicking up the numerous hints you will have overlooked during the first readingโthen come back here.

== The one lucky game ==

You sometimes hear that ''NetHack'' is near impossible to [[win]], because of the amount of exceptional luck that is required to win: it takes years to get just one lucky game, with an early [[wand of wishing]] and having everything else work out just right. That is a myth!

'''If your survival depends on luck then you are following the wrong strategy.''' True, a few unavoidable deaths remain, like falling into a [[spiked pit|poisoned spiked pit]], or the proverbial [[Gnome With the Wand of Death]], but these are threatening only early, before [[property|countermeasures]] have been acquired. Truly outstanding players (such as [[Marvin]]) manage to [[ascend]] 80% of their games, and they do not get more wands of wishing than the rest of us. A large part of learning to play NetHack is acquiring safe habits.

(Note there is also the in-game stat of [[Luck]], which is entirely different.)

== Moving fast, typing slowly ==

'''Never explore while [[Burdened]] or worse.''' [[Speed]] is a major issue. When you are ''Stressed'', your average opponent can hit twice for your every chance to move, and your [[HP]] will just melt away. (If you do need to haul around heavy [[stash]]es of equipment, stick to known territory and be ready to shed weight at the sight of danger.) In such occasions, a [[wand of speed monster]] or [[speed boots]] are a big advantage, allowing ''you'' to hit (or escape) faster.

Do not use the arrow keys, because they provide only orthogonal [[direction|movement]], requiring twice as many steps to reach a diagonal destination. If the vi-like ([[yuhjklbn]]) keys do not suit you, make a habit of using the [[options#number_pad|number pad]] instead. [[Movement tactics#Diagonal movement|Take advantage of diagonal movement keys.]]

At the same time, type slowly and deliberately. You cannot run away more quickly from [[monster]]s by typing more quickly! Additionally, '''never hold down a key for autorepeat.''' When you hold down a key, you often stumble into something and try to attack or pass it faster than you can release the key. Instead, make use of the {{kbd|G}}, {{kbd|g}}, capital YUHJKLBN, and numpad {{kbd|5}} commands to go in one direction until you discover something interesting. Also useful is {{kbd|_}}. 

If you are running low on health and there are no monsters in the vicinity, rest and wait for your health to come back. The {{kbd|.}} command will let you rest for a number of turns that you can specify. You will stop resting as soon as anything dangerous (or interesting) comes along. 

You may also find it useful to [[Notetaking|take notes]] on what you are doing.  Besides the information's usefulness, it encourages you to be thoughtful.

Beginners should also play purposefully: "just exploring", in the long run, is the same as "just running around until you get killed". If you find yourself doing this, look at your equipment and status to see what your immediate [[Standard strategy#Goals|goals]] should be: "I need an effective projectile weapon", "I need to get my armor class down", "I need to identify this magic stuff I've collected", "I need fire/cold/magic resistance before I go much further" ... whatever's appropriate at the moment. Thinking this way will improve your game rapidly.

== Traps ==
On dungeon level 1, every deadly trap has an automatically generated corpse on it.{{refsrc|src/mklev.c|1391|version=NetHack 3.6.1}} This decreases by 25% with each Dlvl, meaning that Dlvl 5 and below will never have traps with an auto-corpse. However, while you're on the level a monster may stumble onto a trap and die, so if you see a mysterious corpse that you didn't kill, beware.

If you're caught in a [[bear trap]], you can escape five times faster by trying to move diagonally.{{refsrc|src/hack.c|1200|version=NetHack 3.6.1}}

Darts, arrows, and rocks on the ground. Beware, these may be traps.

If "you hear rumbling in the distance", there is a rolling boulder trap ready to do d20 damage to anything in its path.

Darts and spiked pits have a chance of being poisoned and can cause insta-death. Since it takes a while to gain intrinsic [[poison resistance]] or identify the necessary jewelry, an [[apron]] is a great find in the early game. (If this is a frequent problem for you, it may be worth trying playing a [[barbarian]] as your first role, since they get poison resistance at [[experience level|level]] 1.)

== Finding down ==

'''Every room has a way out.''' If none is apparent, [[search]] for it by hitting {{kbd|s}} on every step along the [[wall]] or at the dead end of a [[corridor]]โit may take you ten times or so before finding a secret door or passage, though. If all [[door]]s are [[locked]] and you have no other means to open them, [[kick]] them downโbut this is noisy and will wake sleeping monsters. If you kick down the door of a shop, the owner will attack. You can avoid kicking down shop doors by simply making sure that the dust in front of the door does not say "[[closed for inventory]]".

'''Every level has a way down.''' (There are exceptions, but not in the early dungeon.) Look on the map for a large, empty area where an additional, undiscovered [[room]] might fit and search (as above) along adjacent walls or suspiciously shaped corridors. Or the [[stairs]] could be covered by an [[item]]โyes, NetHack does have mighty big [[fortune cookie]]s! If a monster is sitting on top of the stairs, you will see them as soon as the monster is out of sight. If you're pretty sure you've explored the whole level and still don't see any stairs, use the #[[terrain]] command to view the map without monsters or objects. Pressing {{kbd|_}}{{kbd|>}} will also show the stairs since [[Nethack 3.6.0]] even if there are objects on top of them.

== Monsters too tough? ==
As you go deeper in the dungeon and level up, monsters that generate become more powerful. Monsters that can generate are determined by the average of your experience level and your dungeon level; see [[Monsters (by difficulty)]] for details. Even if you keep your experience level relatively low, you can still encounter difficult monsters as you venture deeper into the dungeon. If you are in a particularly deep area or a dangerous level such as the [[Oracle]] level, it may be in your best interest not to linger. Come back when you're more experienced or better equipped.

== Drinking water ==

'''Don't.''' A beginner who starved a couple of times might get the idea that drinking was also necessary. Unfortunately the Guidebook's advice on this matter is misleading ("Although creatures can survive long periods of time without food, there is a physiological need for water"). However, your character can in fact survive the whole game without drinking ''anything''.

There is no need to drink water. In fact, [[quaff]]ing [[potions of water]] is a big waste of resources; you are much better off saving them to turn into {{! of|holy water}}.

And drinking from [[fountain]]s is downright dangerous; many bad effects can occur. True, if you are exceptionally lucky you might get an early wish, or some other benefit, but the chances are tiny. Much more likely you will get nasty hostile monstersโ[[water nymph]]s, [[water demon]]s, or swarms of [[water moccasin]]s.

== Eating ==

Eating [[corpse]]s feels like Russian roulette. A [[kobold]] will poison you. A [[jackal]] "tastes terrible" but seems OK. But if you save another one for later, it'll give you deadly food poisoning. If you decide that eating corpses off the [[floor]] is uncivilized anyway and vow to stick to proper "people food", you'll probably starve before finding any.

First, understand that there are two separate kinds of poisoning that you can get from food. The first is [[food poisoning]] ("FoodPois"), contracted from eating old ("tainted") corpses. This will always kill you, but avoiding it is simple: '''Eat your corpses fresh.''' 60 [[turn]]s is the limit! Only [[lichen]]s, [[lizard]]s, and corpses kept in an [[ice box]] do not age. By the same logic, remember that [[zombie]]s and other [[undead]] died long before you met them: they are walking food poisoning. If your pet kills an enemy out of sight and leaves a dwarf corpse, it was probably a [[dwarf zombie]]; otherwise your pet would have eaten it.

The second kind is "regular" [[poison]], which is simply a property of some monster types (e.g. [[kobold]]s). '''Corpses your pet [[dog]] or [[cat]] will eat are safe''' (with very few exceptions). Eating a poisonous corpse will lower your [[attribute|stats]] and HP, though it won't kill you directly. Unlike food poisoning, you ''can'' become [[poison resistance|resistant]] to this type, and in fact you should as soon as possible. This will also protect against spiked pits, [[Mordor orc]]s' poisoned arrows and, other sudden deaths. [[Barbarian]]s, [[Healer]]s, and [[orc]]ish characters start out resistant; [[Monk]]s gain the resistance at level 3; all others are safe as soon as "you feel healthy". (Watch out for other "[[you feel]]" messages, too, and learn their sources and effects.)

Remember: [[NetHack is not real life|''NetHack'' is not real life]]. Though most of us would not eat a [[sewer rat]] or an uncooked jackal corpse, and would get ill if we did, it is not an issue for your character. Therefore, unless there is something intrinsically harmful about a particular corpse, such as the poisonous kobold or the instantly petrifying [[cockatrice]], and unless it is more than 60 turns dead, it will probably be safe for consumption.

Then of course there is also "proper" [[food]]. [[Egg]]s and [[tripe ration]]s are for pets; keep the rest for hard times. In the [[roguelike]] community, such food is called "permafood", because it never rots.

Finally, if you are already ''[[nutrition|Weak]]'' or ''[[nutrition|Fainting]]'' (not if you are merely ''Hungry''), you can also #[[pray]]. You must take care not to anger your [[god]], but if you really want to, [[Foodless|it is quite possible to survive on prayer alone]].

== Praying ==

Most real-life religions encourage you to pray regularly. But the Guidebook states clearly that you pray to the gods ''for help''. The ''NetHack'' gods will be perfectly happy never to hear from you. If they regard you as constantly whining, they might become [[anger|angry]] and eventually decide to [[wide-angle disintegration beam|put you out of your misery]] and send someone worthier to fetch the [[Amulet of Yendor]] for them.

'''Used sparingly, prayer can get you out of tight spots.''' Before praying again, wait around 700โ1400 turns, [[prayer timeout|the longer the better]]. [[Sacrifice]] can shorten the time, and it may also get you [[gifts]].

== Watching your pet ==

Watching what corpses your cats and dogs eat will help you figure out which are safeโ[[horse]]s will not eat meat, and they can help you figure out which ''vegetarian'' corpses are safe (see [[diet]]). But there is more that your pet can do for you:

Finding better equipment is vital (see "Leveling up" above), but you must not {{kbd|W}}[[wear|ear]], {{kbd|w}}[[wield|ield]] or {{kbd|P}}[[put on|ut on]] anything that might be [[BUC|cursed]], and [[altar]]s for ascertaining that are scarce. Fortunately, your pet can indicate whether an item is cursed: just drop it on the floor where you can see it and wait. '''Pets will step on cursed items only reluctantly, if at all.''' If a pet walks over or picks up an item without a message appearing, it is safe to try on. Early on, [[Curse-testing#Pet testing|pet-test]] most of the [[armor]] you find, to get your [[AC]] as low as you can.

Furthermore, your pet can kill a [[nymph]] before she can rob you or kill a peaceful coaligned [[unicorn]] that you must not desecrate yourself. Eventually, your pet's natural aggression may get it killed by the [[Minetown]] [[watch captain]] (a large dog or cat will attack watchmen) or a [[shopkeeper]] (warhorses attack these), so keep it away from these powerful monsters or [[Polymorph#Pets|polymorph it]].

== Identifying ==

Boldly {{kbd|r}}[[reading|eading]], {{kbd|q}}[[quaffing|uaffing]] and {{kbd|z}}[[zapping|apping]] everything you find is the obvious method of [[identification]]โand it is ridiculously, suicidally dangerous, so '''do not do it!''' Here is a quick summary of the item classes:

[[Armor]], [[weapon]]s and [[amulet]]s are actually quite safe to try on after [[curse-testing]] them with your pet. A few items will [[autocurse]], but they are rare and not life-threatening. Make sure you are capable of {{kbd|p}}[[paying|aying]] for the item if you decide to try it on in a shop, though.

[[Ring]]s are also safe if curse-tested, with three complications: {{ring of|conflict|polymorph|and=1|teleportation}}. Never try them near a [[shop]] or if your pet is powerful enough to kill you in one hit. If you're really afraid of a polymorph, take off your torso armor. Remove the ring immediately on the next turn to keep the chance of anything going wrong to a minimum, unless you think you can handle being polymorphed or teleported around. Often, putting on a ring will tell you nothing and you will have to identify it by some other means anyway.

[[Wand]]s are fun. Write ''Elbereth'' with your finger (to exercise [[Wisdom]]), then add to the engraving with a wand. Most will identify or at least give you hints. Six wands [[Engrave-test|give no message at all]], are not particularly powerful, and can be further identified with a few common items. '''Never, ever put wands that make engravings vanish in your [[bag of holding]]''' until you are absolutely sure the wand is a [[wand of teleportation]] or a [[wand of make invisible]], and not a [[wand of cancellation]]โotherwise you will blow up your bag of holding and all of its contents.

[[Potion]]s are trickier. [[Potions of water]] are clear. [[Potions of oil]] light up when [[apply|applied]]. By dipping some junk [[dart]]s or [[arrow]]s you may discover the [[potion of polymorph]] and the [[potion of sickness]]. Dipping a [[unicorn horn]] will turn [[unicorn horn#Potion identification|three other harmful potions]] into water. Finally, you have to rule out the potions of {{potion of|sleep|and=1|paralysis}}. Monsters may throw them at you, and you can also quaff-test them by being [[sleep resistance|sleep resistant]] and wearing a [[ring of free action]]. All other potions are safe to quaff, provided that they are not cursed.

[[Scroll]]s are candidates for [[price identification]], a complex and wearisome process. Fortunately, some of the most useful early-game scrolls are cheap and easy to price-identify. Drop the scroll at a [[shop]] (but don't actually sell it), and multiply the shopkeeper's offer by 2 (or 3 if you [[Shirt|look like a tourist]]) to get the ''base price''. (Some shopkeepers will offer only {{frac|3|4}} of the normal selling price for unidentified items, however.) The [[scroll of identify]] is the most easily recognizable, the most common, and the cheapest, with a base price of 20. The mostly useless [[scroll of light]] has a base price of 50, and the [[scroll of enchant weapon]] has a base price of 60. The [[scroll of remove curse]] and the [[scroll of enchant armor]] both have a base price of 80. Several other scrolls can be identified from other factors:
* Monsters will only ever read scrolls of {{scroll of|teleportation|create monster}}, and (rarely) {{scroll of|earth}}, which have obvious effects.
* The scroll of teleportation is the only one that will be generated in [[closet]]s, so it is the only one you may see lying on the ground outside a room.
* The two scrolls on the first level of [[Sokoban]] are [[scroll of earth|scrolls of earth]]. 
* A [[scroll of scare monster]] will be placed under the Sokoban prize, and it can also be observed from its effect on peaceful monsters. If a pet or a shopkeeper "turns to flee" for no apparent reason, you're standing on one.
The other scrolls are too complicated or risky to try out, so just read a blessed scroll of identify when you've collected enough.

==See also==
* [[Standard strategy]]
* [[Standard strategy (SLASH'EM)]]
* [[Role difficulty]]
* [[Game stages]]
* [[Notetaking]]

==External links==
* [https://www.nethack.org/v361/Guidebook.html Guidebook for ''NetHack'' 3.6.1]
[[Category:Articles for beginners]]
[[Category:Strategy]]
{{nethack-361}}}
&&%s&& %s Beginners' guide {78384 2012-06-10T18:47:36Z {0 } redirect #REDIRECT [[Why do I keep dying?]]}
&&%s&& %s Beginner's guide {78385 2012-06-10T18:50:56Z {0 } redirect #REDIRECT [[Why do I keep dying?]]}
&&%s&& %s Dying {78417 2012-06-10T21:08:49Z {4000047 Blackcustard} Created page as redirect to [[death]]. #REDIRECT [[death]]}
&&%s&& %s Early game {81291 2012-10-29T14:50:04Z {723 Scorchgeek} fix double redirect #REDIRECT [[Game stages#The Early Game]]}
&&%s&& %s Reading {78425 2012-06-10T21:37:09Z {4000047 Blackcustard} Created page as redirect to [[read]]. #REDIRECT [[read]]}
&&%s&& %s Zapping {78426 2012-06-10T21:37:34Z {4000047 Blackcustard} Created page as redirect to [[zap]]. #REDIRECT [[zap]]}
&&%s&& %s Paying {78429 2012-06-10T21:44:19Z {4000047 Blackcustard} Not thinking. I knew that wouldn't work. Got confused. #REDIRECT [[shop]]}
&&%s&& %s Dungeon compiler {78538 2012-06-17T06:04:10Z {679 Ray Chason} Redirected page to [[Dungeon.def format]] #REDIRECT [[Dungeon.def format]]}
&&%s&& %s Level compiler {78539 2012-06-17T06:06:47Z {679 Ray Chason} Redirected page to [[Des-file format]] #REDIRECT [[Des-file format]]}
&&%s&& %s NetHack 4 Network Protocol {94526 2015-06-03T21:41:09Z {4000573 Elronnd} Update to latest This is a description of the [[NetHack 4]] networking protocol.

Note: This page tends to get out of date quickly. A much more up-to-date version can be found [http://trac.nethack4.org/browser/doc/server_protocol.txt here].

The protocol is based on JSON. Each client command and each server response is a single, valid JSON object in UTF8 encoding.


==Basics==

The protocol is based on JSON.  Each command and each response is a single,
valid JSON object in UTF8 encoding. The server will insert a NUL character
between each command it sends, to allow clients to easily determine where one
ends and the next starts (NUL cannot appear in a JSON encoding). The client
does not currently insert such NULs. (TODO: It probably should, and the server
should probably respect them, in case the client needs to send `exit_game`
immediately after another command, without waiting for a response in between.)

The server protocol is an enhancement of the protocol used by a window port to
connect to a local game; the two are very similar, and so this documentation
may also be consulted to gain some amount of understanding of the behaviour of
a windowport.  There are a few commands that are specific to server use,
though, such as `auth`, and the API for map updates is different.  For a full
explanation of the various protocols in use, see `doc/mainloop.txt`.

The following types are all special cases of integers:
* All enumerated types
* bitflags
* boolean
* charcode
* connid
* coordinate
* gameid


==Interaction==

Once the client has connected to the server, it must send either an `auth` or
a `register` command.  If the client sends a successful `register` command, a
following `auth` command is not necessary.  When the client is authenticated
any other command may be sent to the server.

Normal flow is driven by the client and/or server sending commands and
receiving responses to them; a command can be sent from the client to the
server, or (more rarely) the other way round.  (Server commands are sent if
the server needs more information to fulfil a client command, or to inform the
client of unusual conditions, such as a retroactive cancel of a command in
progress.)  Server commands and responses can also carry an attached `display`
element with map updates (see later in this document).

In general, a command might be sent/received by the client and/or server at
any point after the authentication.  It is thus incorrect for a client to
block on user input, because it might have to handle a server command that
arrives unexpectedly.

It is also incorrect to block on the response to a command, because a command
might be followed up by another command rather than a response.  It is
acceptable, however, for the client to ignore user input after sending a
command, until either a command or a response is received; whenever a command
is sent, the client can assume that the server will react to it in some way,
either via responding or via sending a followup command.
70	Commands and responses are always well-nested; if a response is sent, it will
be to the most recent unresponded command sent by the other end of the
connection.  Additionally, messages usually alternate between client and
server.  Currently, the only exception to this is the `cancel_server_request`
command that the server uses to countermand a server request; it can be sent
by the server even if the previous message was also sent by the server.


==Client commands==

These commands are sent by the client, expecting a response from the server.


===auth===

Either `auth` or `register` must always be the first command sent, and no
other commands may be sent until the original `auth` or `register` command
receives a response.

This command is specific to client/server communication, and is not used for
local play.  It specifies which user is making the connection.

Upon creating a new connection, there will be no game loaded: `play_game` will
need to be used before commands that require a game to be loaded will work
(and those commands can only be given to follow up server requests that follow
up the `play_game` call).

Command arguments:
* `string username`: the username of the user who is making the connection
* `string password`: the password of the user who is making the connection

Response arguments:
* `enum authresult return`: whether the connection succeeded:
* [`NO_CONNECTION` = 0: not sent by the server, simulated by the client
library if the connection fails]
* `AUTH_FAILED_UNKNOWN_USER` = 1: the given user does not exist
* `AUTH_FAILED_BAD_PASSWORD` = 2: the given password is wrong
* `AUTH_SUCCESS_NEW` = 3: a new connection was created
* `int[3] version`: the version number of the server
* [0] The major version number (if it's not 4, this document is probably
inaccurate)
* [1] The minor version number (changes when save compatibility breaks)
* [2] The patchlevel version number (changes when a release is made that
does not break save compatibility)

TODO: What happens if this command is sent when a connection already exists?


===register===


Like `auth`, except it requires a nonexistent rather than existing username,
and will create an account.  This cannot re-establish an existing connection,
for obvious reasons.

Command arguments:
* `string username`: the username for the new account
* `string password`: the password to register the account with
* `string email`: (optional) an email address to store in the database; the
server admin can use this for password reset requests, etc.

Response arguments: same as `auth`, except `AUTH_FAILED_UNKNOWN_USER` means
that the user account already exists.


===describe_pos===


Returns farlook information for a given map square.  This command may only be
meaningfully sent while a game is running, and corresponds to the
`nh_describe_pos` API call in libnethack.  If the game is not running, all
string values in the response will be the null string, `objcount` will be -1,
and `in` will be false.

Command arguments:
* `boolean is_in`: Whether to return the `in` element in the response
* `coordinate x`: x coordinate of the map square to farlook
* `coordinate y`: y coordinate of the map square to farlook

Response arguments:
* `string bgdesc`: a description of the background
* `boolean feature_described`: true if `bgdesc` is redundant to other fields
* `string effectdesc`: a description of an effect
* `boolean in`: true if an object is "in" rather than "on" the background
* `string invisdesc`: a description of a remembered invisible monster
* `string mondesc`: a description of a monster
* `int objcount`: the number of object stacks on the square
* `string objdesc`: a description of an object
* `string trapdesc`: a description of a trap

Strings in the response are zero-length if they would describe something that
does not exist on the map square given by (x,y) (or that the character is
unaware of), e.g. `trapdesc` for a square with no known trap.  Otherwise, they
describe the map square given by (x,y).


===exit_game===


Causes the game to stop running, either via saving/suspending it, or via
quitting it.  `EXIT_SAVE` is equivalent to just dropping the connection in
terms of its user-visible effect, but is kinder on server resources than
dropping the connection would be.  This command can be sent if there is no
running game, but does nothing but return true in that situation.  It
corresponds to the `nh_exit_game` API call in libnethack.
178	If the game is running, this API call will typically return via `play_game`
response (see the documentation for `play_game`) rather than directly
(especially if it needs to get out of multiple nested contexts; it can be sent
at any time while the game is running and there is some server request pending
that the client could respond to).  Obviously, it must return directly if
there is no game running.

Command arguments:
* `enum nh_exit_types exit_type`: what sort of exit to perform
* `EXIT_SAVE` = 0: detach from the game and drop the connection; the
save file remains intact
* `EXIT_QUIT` = 1: delete the game's save file and enter the game over
sequence
* `EXIT_PANIC` = 2: like `EXIT_SAVE`, but record that there was a
problem in the panic log
* `EXIT_RESTART` = 3: like `EXIT_SAVE`, but the client will be told to
immediately reload the game (`CLIENT_RESTART`); clients use this to
change between play, watch and replay modes

Response arguments:
* `boolean return`: true if the game exited (whether due to a save, to a
quit, or to the process being panicked), or if no game was running; false
if the user cancelled the exit; true is rarely going to be observable
except in error conditions or if no game is running.


===get_commands===


This command lists which commands exist and can be used in a `request_command`
response, and corresponds to the `nh_get_commands` API call in libnethack.

In addition to information about the commands, it also returns default
keybindings for them; clients can choose to respect or ignore these.  This
means that minor changes to the game's commands can be made without needing to
alter clients.

This command can be used even when the game is not running; whether there is a
running game or not, it will return all commands that can be used by the user,
including debug mode commands. The client may want to hide debug mode commands
from non-debug-mode games.

Command arguments: none

Response arguments:
* `struct nh_cmd_desc[] cmdlist`: a list of the commands that exist:
* `string name`: the name of the command (`command` in
`request_command`);
* `string desc`: a human-readable description of the command;
* `unsigned flags`: information about the command, a bitmask of:
* `CMD_ARG_DIR` = 1: the command can accept a direction argument;
* `CMD_ARG_POS` = 2: the command can accept a position argument;
* `CMD_ARG_OBJ` = 4: the command can accept an inventory object
argument;
* `CMD_ARG_STR` = 8: the command can accept a string argument;
* `CMD_ARG_SPELL` = 16: the command can accept a spell argument;
* `CMD_ARG_LIMIT` = 32: the command can accept a numeric argument
that specifies a reduced maximum for things like multishot or item
stack size;
* `CMD_EXT` = 1024: it is recommended that by default, this command
should be available as an extended command (via `#`);
* `CMD_MOVE` = 2048: this is a movement command (and thus it is not
unreasonable to be able to keybind to individual direction
arguments to this command);
* `CMD_HELP` = 4096: it is recommended that by default, this command
should be available via the help menu on `?`;
* `CMD_NOTIME` = 8192: this command makes no changes to the
gamestate, and thus can be used while watching or replaying a
game;
* `CMD_DEBUG` = 16384: this command is only available in debug mode;
* `CMD_INTERNAL` = 32768: although commands with this flag set exist,
they are never returned from `nh_get_commands`.
* `charcode def`: a default keybinding for this command (ASCII,
control-ASCII, meta-ASCII);
* `charcode alt`: another, lower-priority, default keybinding for this
command


===get_obj_commands===


Requests a list of reasonable commands for use with a specified inventory
item.  (TODO: This is missing a check on whether the game is running.)  This
command is intended for use in response to an item being selected from the
inventory menu, itemactions-style; it will give more specific explanations of
what the commands do than `get_commands` does, because it is specialised to
one object.

Command arguments:
* `charcode invlet`: The inventory letter of the item to get commands for.

Response arguments: the same as `get_commands`.

Note that unlike `get_commands`, which can recommend control- or meta-modified
keys for its keybindings, `get_obj_commands` favours capital and lowercase
letters only, so that its keybindings can easily be placed in a menu.  This
means that the recommended keybindings may not be identical to those produced
via `get_commands`.


===get_drawing_info===


Requests information about what drawable entities exist in the game: most code
that communicates display information will return indexes into lists, and this
function returns those lists.  It contains both API names, and default ASCII
representations (these need to be available to the server anyway so that it
can produce dumplogs, so it may as well communicate these to the client in
case it wants to use them).  It is reasonable to call this even when the game
is not running.  This command corresponds to the `nh_get_drawing_info` API
call in libnethack.

TODO: Sending an array and its length separately over JSON is always a bad
idea; what if they don't match? There's currently a `int num_*` for each
`struct nh_symdef[]` in the response arguments, but I removed the
documentation for them in preparation for fixing this rather major issue.

Command arguments: none

Response arguments:
* `int feature_offset`:
* `struct nh_symdef[] bgelements`: Backgrounds.
* `struct nh_symdef[] effects`: Effects.
* `struct nh_symdef[] explsyms`: Explosion shape/locations.
* `struct nh_symdef[] expltypes`: Explosion appearances.
* `struct nh_symdef[] invis`: Memory of invisible monsters.
* `struct nh_symdef[] monsters`: Monsters.
* `struct nh_symdef[] objects`: Items.
* `struct nh_symdef[] swallowsyms`: The inside of an engulfing monster.
* `struct nh_symdef[] traps`: Traps.
* `struct nh_symdef[] warnings`: Warning symbols.
* `struct nh_symdef[] zapsyms`: Zap shape/locations.
* `struct nh_symdef[] zaptypes`: Zap appearances.

where `struct nh_symdef[]` is defined as follows (and sent as an array, with
its fields in this order):
* `string name`: The API name of a drawable entity.  Explosions and zaps
have two API names; one for the shape and location within the shape (the
`*syms` list), one for the appearance (the `*types` list).  Other drawable
entities have just the one API name.  Clients should feel free to hardcode
overrides for specific API names.  (Note that an API name is not always
the same as a tile name; use the functions in tilesequence.c if you need
to convert, e.g. to discover a tile number for a given API name.)
* `charcode character`: A recommended ASCII representation of this drawable
entity.  Clients can use this as a fallback if they encounter an
unrecognised API name.
* `colourcode colour`: A recommended color for this drawable entity.

When using the recommended ASCII representations, for explosions and zaps
(which have two API names), the character should be taken from the
shape/location field, and the color from the appearance field.


===get_options===


Currently under revision.  TODO: When we decide what the API call actually
does, document it properly.

Command arguments:
* `enum nh_option_list list`: what sort of options to list
* (values, semantics under revision)

Response arguments:
* `struct nh_option_desc[] options`:
* `string name`: short name of the option
* `string helptxt`: long desription of the option
* `enum nh_opttype type`: what type of values the option takes:
* `OPTTYPE_BOOL` = 0: booleans;
* `OPTTYPE_INT` = 1: integers;
* `OPTTYPE_ENUM` = 2: a fixed list of possibilities;
* `OPTTYPE_STRING` = 3: strings;
* `OPTTYPE_AUTOPICKUP_RULES` = 4: lists of autopickup rules
* `union nh_optvalue value`: the value (or default value? under revision)
of the option
* `union _ desc`: the legal values for the option:
* `nil` for `OPTTYPE_BOOL`;
* `struct {int min, int max}` for `OPTTYPE_INT`;
* list of strings for `OPTTYPE_ENUM`;
* an integer for strings (reflecting the maximum length);
* list of strings for autopickup rules (TODO: figure out what format
these are in)

An autopickup rule has the following structure:
* `enum autopickup action`: what action to take upon encountering this item:
* `AP_GRAB` = 0: pick it up regardless of `pickup_types`;
* `AP_LEAVE` = 1: leave it on the ground regardless of `pickup_types`.
* `enum nh_bucstatus buc`: a filter against beatitude:
* `B_UNKNOWN` = 0: match only items with unknown beatitude;
* `B_BLESSED` = 1: match only blessed items;
* `B_UNCURSED` = 2: match only non-blessed non-cursed items;
* `B_CURSED` = 3: match only cursed items;
* `B_DONT_CARE` = 4: do not filter items based on beatitude
* `int oclass`: an object class of items to match
* `string pattern`: a regular expression that matches items


===set_option===


Changes a (non-interface) option on the server.  This corresponds to the
`nh_set_option` API call in libnethack.  TODO: This command should only be
runnable if a followup to `request_command` is legal, except possibly for
setting birth options; this needs more thought.

Command arguments:
* `boolean isstr`: if true, allows sending the option value as a string
regardless of the option's actual type (the server will parse it into an
appropriate value for the option); if false, the client has already parsed
the option
* `string name`: the name of the option to set
* `union nh_optvalue value`: the value for the option, in a format depending
on the option's type and whether `isstr` is set (a string, integer, or
list of autopickup rules).

Response arguments:
* `struct nh_option_desc option`: TODO: work out if we need this and what
its semantics are
* `int return`: an integer treated as a boolean; nonzero if the option value
given was reasonable, zero if it was unreasonable (and thus the server did
not try to set it)


===get_roles===


Requests information on what roles, races, genders, and alignments exist in
the game, and what combinations of them are legal.  This command corresponds to
the `nh_get_roles` API call in libnethack.

TODO: This API is inherently prone to buffer length mismatches.  There should
not be separate `num_` fields.

Command arguments: none

Response arguments:
* `string[] alignnames`: the list of alignments that exist
* `string[] gendnames`: the list of genders that exist
* `string[] racenames`: the list of races that exist
* `string[] rolenames_f`: the list of roles that exist, using female names
such as "Cavewoman" (TODO: if a role has no separate female name, are
these a copy of the male name, or NULL?)
* `string[] rolenames_m`: the list of roles that exit, using male names such
as "Caveman"
* `int[] matrix`: Information on which combinations of role, race, gender,
and alignment are legal; each possible combination (legal or illegal) has
an entry in the list, at an index that can be calculated via the macro
`nh_cm_idx()`
* `int num_aligns`: length of `alignnames`
* `int num_genders`: length of `gendnames`
* `int num_races`: length of `racenames`
* `int num_roles`: length of `rolenames_[f,m]`


===get_topten===


Requests entries from the high score table.

Command arguments:
* `int around`: if there has been at least one game previously on this
connection (even if it was re-established), and the most recent such game
has since reached game over (death/quit/escape/ascension), and `player`
was playing, list this many games near that game on the high score table;
otherwise this value is ignored
* `boolean own`: whether to list all games of the given `player` name or not
* `string player`: the player name for `own` and `around`; a null string
will automatically pick the appropriate player for the most recent game
for use with `around`
* `int top`: list this many games at the top of the table

Response arguments:
* `string msg`: an appropriate heading for the high score table; if `around`
matches, this will talk about the most recent game (e.g. telling the
player what position on the list they are, or explaining that wizard mode
games are not eligible for the high score table); otherwise, this will be
an error message (if any), or else the null string
* `struct nh_topten_entry[] toplist`: the requested high score table
* `int birthdate`: seconds since the epoch that the game started (TODO:
Y2038 issue!)
* `string death`: the reason that the player died
* `int deathdate`: seconds since the epoch that the game ended
* `int deaths`: the number of times the player lifesaved, plus one if they
eventually died permanently
* `int end_how`: an internal code for the basic cause of death (drowning,
starving, etc.); this is currently not in any publicly accessible header
(TODO: which is probably a mistake), but is in libnethack's hack.h
* `string entrytxt`: a formatted representation of this high score entry
that can be output directly in a fixed-width font
* `boolean highlight`: true if this entry is the one that `around` is
measuring around
* `int hp`: the character's current hitpoints at death
* `int maxhp`: the character's maximum hitpoints at death
* `int maxlvl`: the deepest dungeon level the character reached
* `int moves`: the number of turns the charater spent
* `string name`: the name of the character
* `string plalign`: the character's alignment
* `string plgend`: the character's gender
* `string plrace`: the character's race
* `string plrole`: the character's role
* `int points`: the number of points the game scored
* `int rank`: the position of this game within the high score table (1 for
first place, 2 for second place, etc.); can be 0 or negative for games
that are disqualified from the high score table (due to, for instance,
playing in debug mode)
* `int ver_major`: the major version number of the engine this game was
played on
* `int ver_minor`: the minor version number of the engine this game was
played on
* `int patchlevel`: the patchlevel version number of the engine this game
was played on

===list_games===


Lists current and/or completed games on the server.

TODO: what format are plgend, etc., in? Abbreviation? Full name?

Command arguments:
* `boolean completed`: list only completed games if true, only current games
if false
* `int limit`: the maximum number of games to list
* `boolean show_all`: if true, list games for which user who authenticated
this connection has read but not write access; if false, only list games
to which the user has write access

