
Вы начинаете с 11 ОЗ, плюс бонус за расу: +2 для людей, +4 для дварфов, +1 для гномов.

Вы начинаете с 1 ОС, плюс бонус за расу: +2 для гномов, +1 для людей,.

==Квест==

{{main|Archeologist quest}}

Квестовый артефакт Археолога это[[The Orb of Detection| Сфера Обнаружения]], [[crystal ball|хрустальный шар]]. При ношении он дает [[magic resistance| сопротивление магии]], [[telepathy| телепатию]] и вполовину увеличивает урон при атаке заклинаниями. При использовании #[[invoke]], вкл/выкл [[invisibility| невидимость]].

==Gods==

{{main|Religion}}

*Lawful:  Quetzalcoatl
*Neutral: Camaxtli
*Chaotic: Huhetotl

==Ранги==

[[status line| Строка состояния]] отображает ваш ранг в соответствии с полученным уровнем:

*XL 1-2: Digger
*XL 3-5: Field Worker
*XL 6-9: Investigator
*XL 10-13: Exhumer
*XL 14-17: Excavator
*XL 18-21: Spelunker
*XL 22-25: Speleologist
*XL 26-29: Collector
*XL 30: Curator

==Происождение==

Наряд археолога навеян образом [[Wikipedia:Indiana Jones|Indiana Jones]] - вы начинаете с кожаным жакетом, фетровой шляпой и хлыстом.

==Стратегия==

Вначале Археологи ни хорошие воины, ни могучие волшебники, но могут - и должны стать искусным инструментом игрока.
Начинать игру нужно осторожно, примерно как [[Tourist|Туристом]] и [[Healer|Лекарем]].

Из тех всего, что может убить "юного" Археолога, голод наименее вероятен. Вы начинаете игру с кучей пайков и заряженным набором консервирования. Полезно консервировать больших низкоуровневых монстров на начальних уровнях подземелий и [[mines|шахт]].
Пробный камень, даже будучи непроклятым поможет мгновенно определить драгоценные камни, что сделает несколько первых этажей очень прибыльными. Используя возможность определять драгоценности и возможность выбраться из [[vault|сокровищницы]] с помощью [[pick-axe|кирки]], вы можете накопить богатство всего лишь за несколько первых уровней. You can aim to purchase protection as soon as you reach minetown, even without having to play a dangerous [[protection racket]] strategy.

[[Luck|Удача]] очень важна в начале игры, поэтому стоит оставить хотя бы один драгоценный камень, чтобы бросить его [[unicorn|единорогу]] одной с вами веры. Это хороший способ держать удачу на нужном уровне пока вы не найдете [[luckstone|камень удачи]].

Археологи должны приобрести [[poison resistance|иммунитет к яду]] перед прохождением квеста, поскольку он полон ядовитых змей

===Выбор оружия и скиллов===

<div class="thumb tright">{{Archeologist skill table}}</div>

Сначала, лучшее [[weapons|оружие]] [[pick-axe|кирка]] и хлыст (это касается только хлыста с бонусом +2, обычно хлысты плохи) 
Кнутом можно разоружать монстров, если [[Attribute#Dexterity|ловкость]] равна 6 или больше. Это часто спасет вам жизнь учитывая ваш начальный уровень защиты :). [[Dwarvish mattock|Мотыга]] - двуручная кирка, у которой урон больше чем у другого не-артефактного оружия.

Archeologists are particularly suited to take advantage of the intrinsics granted by [[black pudding]]s, and should be sure to kick a few sinks early in the game. First, ensure that the level has a loop you can have the pudding chase you around (you can dig one with your pick-axe if necessary). Then kick the sink until a pudding emerges, and hit it with your pick-axe or a junk metal weapon to get it to divide. Use your whip (which will not corrode) to hit it while it chases you around the loop. When you kill it, tin the corpse. Then hit the other pudding and get it to divide. Complete this until the last pudding fails to divide; you should have gained 3-4 levels and gotten at least as many tins of black pudding meat. Eat the tins for the intrinsics (poison resistance, shock resistance, and cold resistance).

A good [[artifact]] weapon for you is [[Grayswandir]], which does double-damage and [[silver damage]]. A normal [[silver saber]] is an excellent weapon - the [[watch captain]] in [[Minetown]] often carries one, so consider getting a pet to kill him for it. If you disarm him with your whip, that will help your pet, and will anger him but not anger other guards.

Archeologists have several decent options for melee weapons available in the early game, but the lack of a good ranged weapon will really hurt in the beginning. [[Boomerangs]] can be advanced to expert, but your chances of finding one without [[polypiling]] aren't very good and their flight pattern is unusual. [[Slings]] can be advanced to skilled, but they are weak and rocks are very heavy. [[Darts]] and [[daggers]] are your other two plentiful options in the early game, both of which can be advanced to basic. Of these, daggers are probably the better option because you will never lose them. However if you find a large stack of darts with +2 or better [[enchantment]], you might consider using those instead.

So you will definitely want to give a skill slot to daggers (or possibly darts). Advancing pick-axe to expert is probably also a good idea, as a [[dwarvish mattock]] may be your primary weapon until you get an [[artifact]]. That artifact will hopefully be [[Grayswandir]], so advance saber if you find one. That uses 12 [[skill slot]]s so far, which you will have available at [[experience level|XL]] 13 - before you do the quest.

Later on you may want expert (or skilled if you can get away with decent spell failure rates) divination for casting [[magic mapping]] and [[identify]], and basic in two weapon combat for supplementing your artifact sword with a [[silver saber]]. That uses 19 skill slots, for which you must be XL 20.

[[Boomerangs]] are a very powerful ranged weapon. They are probably the most powerful ranged weapon available to Archeologists in the game. Unfortunately they are also very rare. If you find one or two early on, it's probably worth advancing your skill to basic. Very late in the game (XL 20 or over) you might consider [[polypiling]] for them. A stack of +7 boomerangs can do a lot of damage if advanced to expert level. However, it's probably not worth advancing your skill in boomerangs past basic if you only have 1 or 2 of them--thus this is only a viable strategy late in the game.

===Actions specific to an archeologist===

The following actions abuse your [[alignment record]]:

* digging up graves, if you are lawful. You get the additional "You feel like a despicable grave robber." message in all cases, but you don't abuse your alignment if you're neutral, for example.
* breaking historically significant statues, like the ones on the [[Oracle]] level.

===Ascension kit===

{{main|Ascension kit}}

You should not rely on [[The Orb of Detection]] as a source of magic resistance; the [[Wizard of Yendor]] can easily steal it. Assuming you do not wish for another quest artifact or use [[Magicbane]], that essentially requires you to wear either [[gray dragon scale mail]] or a [[cloak of magic resistance]].

== SLASH'EM ==
In [[SLASH'EM]], Archeologists may be [[Doppelganger (starting race)|doppelgangers]], [[Elf (starting race)|elves]], or [[Hobbit (starting race)|hobbits]] in addition to the vanilla roles. They can use the [[research]] [[technique]] at level 1. The starting equipment has also changed.

They begin with a spellbook, one of {{Spell of|detect food}}, {{Spell of|detect monsters}}, {{Spell of|light}}, {{Spell of|knock}}, or {{Spell of|wizard lock}}, 2 random scrolls, a 25% chance of a blindfold, a 25% chance of a towel if they did not get a blindfold, 25% chance of a leash, a 25% chance of a tin opener or a 25% chance of either an oil lamp or a torch if they did not get the tin opener, and a 12.5% chance of a magic marker. The starting [[fedora]] has also changed in SLASH'EM and gives +1 charisma and acts as a luckstone when worn.

== Encyclopedia entry ==

{{encyclopedia|
Archeology is the search for fact, not truth. [...]
So forget any ideas you've got about lost cities, exotic travel,
and digging up the world. We do not follow maps to buried
treasure, and X never, ever, marks the spot.
|[ Indiana Jones and the Last Crusade ]
}}

{{DOD}}

{{nethack-343|offset=1}}
{{featured}}
[[Category:Roles]]}
&&%s&& %s You feel dead inside {81574 2012-11-20T21:19:49Z {630 Paxed} derp #REDIRECT [[Genocide#Restrictions_on_genocide]]}
&&%s&& %s Melee attack {81691 2012-11-25T19:01:09Z {630 Paxed} #REDIRECT [[Melee]] #REDIRECT [[Melee]]}
&&%s&& %s Nasty {81787 2012-11-28T18:09:15Z {4000180 Bcode} Make this a disambiguation, per talk. '''Nasty''' may refer to:
* a monster that can be created by the [[summon nasties#Nasties|summon nasties]] [[monster spell]]
* the [[M2_NASTY]] monster flag
{{disambig}}}
&&%s&& %s Noteworthy ascensions {82011 2012-12-18T21:28:29Z {0 } Redirected page to [[Notable ascensions]] #REDIRECT [[Notable ascensions]]}
&&%s&& %s Monsters with non-unique appearance {136453 2020-12-13T00:01:58Z {4001463 Actual-nh} Grammar/style This is a list of monsters whose appearance (i.e., combination of glyph and color) is non-unique. Variants may use different monster colors or allow you to change them (for example, using the [[MONSTERCOLOR]] option in [[UnNetHack]] and on [[nethack.alt.org]]).

It was originally stored in a [http://danceb.in/wkvMKONJ4hGEHVn4l9DNYg pastebin], but it might be more useful on the wiki.

Many of the {{white|@}} and {{magenta|@}} are quest leaders/nemeses; as there will only be one of each per game, the list will be somewhat shorter when considering just one individual game.

(Sorted by glyph, then color, then base level, then monster name.)

* {{gray|&}}: [[incubus]], [[succubus]], [[bone devil]], [[sandestin]]
* {{magenta|&}}: [[Death]], [[Famine]], [[Pestilence]], [[Yeenoghu]], [[Orcus]], [[Geryon]], [[Dispater]], [[Baalzebub]], [[Asmodeus]], [[Demogorgon]]
* {{red|&}}: [[erinys]], [[marilith]], [[barbed devil]], [[vrock]], [[hezrou]], [[nalfeshnee]], [[pit fiend]], [[Minion of Huhetotl]], [[Nalzok]], [[balrog]]
* {{brown|'}}: [[rope golem]], [[leather golem]], [[wood golem]], [[clay golem]]
* {{cyan|'}}: [[glass golem]], [[iron golem]]
* {{yellow|'}}: [[straw golem]], [[gold golem]]
* {{brown|:}}: [[iguana]], [[baby crocodile]], [[chameleon]], [[crocodile]]
* {{green|:}}: [[gecko]], [[lizard]]
* {{red|;}}: [[piranha]], [[kraken]]
* {{black|@}}: [[Dark One]], [[Grand Master]]
* {{blue|@}}: [[captain]], [[guard]]
* {{brightblue|@}}: [[elf-lord]], [[Oracle]]
* {{brightgreen|@}}: [[Green-elf]], [[Medusa]]
* {{gray|@}}: [[Grey-elf]], [[soldier]], [[watchman]]
* {{green|@}}: [[Woodland-elf]], [[lieutenant]], [[watch captain]], [[Neferet the Green]]
* {{magenta|@}}: [[Elvenking]], [[Ashikaga Takauji]], [[Master Assassin]], [[Thoth Amon]], [[Croesus]], [[Hippocrates]], [[King Arthur]], [[Lord Carnarvon]], [[Lord Sato]], [[Master of Thieves]], [[Norn]], [[Orion]], [[Pelias]], [[Shaman Karnov]], [[Master Kaen]], [[Wizard of Yendor]]
* {{red|@}}: [[werejackal (human)]], [[sergeant]]
* {{white|@}}: [[human]], [[abbot]], [[acolyte]], [[apprentice]], [[attendant]], [[chieftain]], [[guide]], [[hunter]], [[neanderthal]], [[ninja]], [[page]], [[roshi]], [[student]], [[thug]], [[warrior]], [[doppelganger]], [[archeologist]], [[barbarian]], [[caveman]], [[cavewoman]], [[elf]], [[healer]], [[knight]], [[monk]], [[priest]], [[priestess]], [[ranger]], [[rogue]], [[samurai]], [[tourist]], [[valkyrie]], [[wizard]], [[nurse]], [[aligned priest]], [[prisoner]], [[shopkeeper]], [[Twoflower]], [[Arch Priest]], [[high priest]]
* {{yellow|A}}: [[Aleax]], [[ki-rin]]
* {{black|B}}: [[raven]], [[vampire bat]]
* {{black|D}}: [[baby black dragon]], [[black dragon]]
* {{blue|D}}: [[baby blue dragon]], [[blue dragon]]
* {{gray|D}}: [[baby gray dragon]], [[gray dragon]]
* {{green|D}}: [[baby green dragon]], [[green dragon]]
* {{orange|D}}: [[baby orange dragon]], [[orange dragon]]
* {{red|D}}: [[baby red dragon]], [[Ixoth]], [[red dragon]]
* {{white|D}}: [[baby white dragon]], [[white dragon]]
* {{yellow|D}}: [[baby yellow dragon]], [[yellow dragon]]
* {{brightcyan|D}}: [[baby silver dragon]], [[silver dragon]]
* {{magenta|F}}: [[shrieker]], [[violet fungus]]
* {{brown|H}}: [[ettin]], [[minotaur]]
* {{gray|H}}: [[stone giant]], [[Cyclops]]
* {{magenta|H}}: [[Lord Surtur]], [[titan]]
* {{blue|K}}: [[Keystone Kop]], [[Kop Sergeant]]
* {{magenta|L}}: [[master lich]], [[arch-lich]]
* {{gray|M}}: [[orc mummy]], [[human mummy]]
* {{red|M}}: [[gnome mummy]], [[dwarf mummy]]
* {{black|N}}: [[black naga hatchling]], [[black naga]]
* {{green|N}}: [[guardian naga hatchling]], [[guardian naga]]
* {{red|N}}: [[red naga hatchling]], [[red naga]]
* {{yellow|N}}: [[golden naga hatchling]], [[golden naga]]
* {{blue|S}}: [[cobra]], [[pit viper]]
* {{brown|Y}}: [[ape]], [[owlbear]]
* {{gray|Y}}: [[monkey]], [[sasquatch]]
* {{brown|Z}}: [[kobold zombie]], [[gnome zombie]]
* {{white|Z}}: [[human zombie]], [[skeleton]]
* {{brown|d}}: [[jackal]], [[coyote]], [[werejackal (animal)]], [[werewolf (animal)]], [[wolf]], [[warg]]
* {{cyan|d}}: [[winter wolf cub]], [[winter wolf]]
* {{red|d}}: [[fox]], [[hell hound pup]], [[hell hound]]
* {{white|d}}: [[little dog]], [[dog]], [[large dog]]
* {{white|f}}: [[kitten]], [[housecat]], [[large cat]]
* {{magenta|h}}: [[dwarf king]], [[mind flayer]], [[master mind flayer]]
* {{red|i}}: [[manes]], [[imp]]
* {{gray|q}}: [[mumak]], [[titanothere]], [[baluchitherium]]
* {{brown|r}}: [[sewer rat]], [[giant rat]], [[rabid rat]], [[wererat (animal)]], [[woodchuck]]
* {{magenta|s}}: [[giant spider]], [[Scorpius]]
* {{brown|u}}: [[pony]], [[horse]], [[warhorse]]
* {{brown|w}}: [[baby long worm]], [[long worm]]
* {{magenta|w}}: [[baby purple worm]], [[purple worm]]

== See also ==
* [[Monster]]
[[Category:Monsters| ]]
{{nethack-343}}}
&&%s&& %s MONSTERCOLOR {82028 2012-12-19T19:29:15Z {4000045 Bulwersator} Redirected page to [[Options#MONSTERCOLOR]] #REDIRECT[[Options#MONSTERCOLOR]]}
&&%s&& %s Wererat (animal) {82032 2012-12-20T06:30:52Z {4000045 Bulwersator} Redirected page to [[Werecreature]] #REDIRECT[[Werecreature]]}
&&%s&& %s Werewolf (animal) {82033 2012-12-20T06:30:57Z {4000045 Bulwersator} Redirected page to [[Werecreature]] #REDIRECT[[Werecreature]]}
&&%s&& %s Werejackal (animal) {82034 2012-12-20T06:31:02Z {4000045 Bulwersator} Redirected page to [[Werecreature]] #REDIRECT[[Werecreature]]}
&&%s&& %s Category:Encyclopedia {131557 2020-01-27T05:11:40Z {4000978 Aximili} Add category This category lists all articles with an [[encyclopedia]] entry.

[[Category:Articles]]}
&&%s&& %s Wide awake {82073 2012-12-27T16:27:27Z {4000045 Bulwersator} Redirected page to [[Sleep resistance]] #redirect[[Sleep resistance]]}
&&%s&& %s Caveperson {82090 2012-12-29T22:41:02Z {4000180 Bcode} Redirect to [[caveman]]. #REDIRECT [[Caveman]]}
&&%s&& %s Dungeon Crawl Stone Soup {82123 2012-12-31T06:46:46Z {4000345 Neil} add redirect #REDIRECT [[Linley's Dungeon Crawl]]}
&&%s&& %s Chardump {82138 2013-01-01T19:29:21Z {630 Paxed} #REDIRECT [[Dumplog]] #REDIRECT [[Dumplog]]}
&&%s&& %s Dump {82139 2013-01-01T19:29:39Z {630 Paxed} #REDIRECT [[Dumplog]] #REDIRECT [[Dumplog]]}
&&%s&& %s Dwarven cloak {82178 2013-01-07T00:51:03Z {13 Aaxelb} I make redirects based on my brain farts. #REDIRECT [[Dwarvish cloak]]}
&&%s&& %s Des-file format (UnNetHack) {123560 2018-08-10T19:22:29Z {4000251 Netzhack} (x,y) is a *pair* of coordinates (plural) which represent a point (singular) on a two-dimensional map. {{DISPLAYTITLE:des-file format (UnNetHack)}}
{{tocright}}
This documents the [[des-file format]] used by [[UnNetHack]].

UnNethack (like [[Sporkhack]]) started with the [http://bilious.alt.org/?20 new level compiler patch], and then added most of the changes from Spork.

A des-file consists of any number of {{sa|Header statements}}, and one or more of {{sa|Level definitions}}.

Unlike vanilla format, the UnNetHack one is closer to a real programming language, the statements are executed in order, and there is some flow control.

==Comments==
All lines beginning with <tt>#</tt> are comments and are ignored by the level compiler, except between {{sa|MAP}} and [[#MAP|ENDMAP]].

Example:
 # This is a comment.

==Header statements==

===FUNCTION===
 FUNCTION name() { {{sa|Level statements}} }
 FUNCTION name([$paramname:paramtype [, ...]]) { {{sa|Level statements}} }
Defines a function.
The level statements defined inside the function body will be executed when the function is called.
Function must be defined before it can be called. Function name can contain alphanumeric characters (a-z, A-Z and 0-9) and full stops (.)
Call the function by using it's name, for example <tt>name()</tt>
Variables defined outside the function cannot be accessed, and variables defined inside the function are gone when the function finishes.
Functions can have any number of named parameters separated by commas. Supported parameter types are "string" and "integer".

Example:
 FUNCTION foobar() {
   OBJECT:'?', random
 }
 foobar()
 FUNCTION bazqux($foo:integer, $bar:string) {
   MESSAGE: $bar
   OBJECT:'$', random, quantity: $foo
 }
 bazqux(12345, "Fee Fie Foe Foo")

===INCLUDE===
 INCLUDE "filename.des"
Includes the contents of the file in the current file.

==Level definitions==

A level definition consists of {{sa|LEVEL}}, followed by an optional {{sa|FLAGS}} and any number of {{sa|Level statements}}.

===LEVEL===
 LEVEL:"name"
The level is saved as <tt>name.lev</tt> file. The name can be up to 14 characters long.

Using a <tt>%i</tt> in the filename will be replaced with a sequential number, starting from 1, and counting upwards, for every LEVEL in that des-file that has a such variable.
Allows number characters between the <tt>'%'</tt> and <tt>'i'</tt> - those will be handled as per printf formatting.

For example:
 LEVEL:"bigrm-%i"

===FLAGS===
 FLAGS:noteleport,mazelevel
Defines special flags for the whole level. Parameters are a comma-separated list of flags:
*<tt>noteleport</tt>: Player cannot teleport within the level.
*<tt>sheol</tt>: Level is a [[Sheol]]-type level, with special rules.
*<tt>hardfloor</tt>: The floor is too hard to dig. 
*<tt>nommap</tt>: [[magic mapping]] does not work.
*<tt>arboreal</tt>: supposedly an outdoor map. Solid walls and secret corridors will be shown as trees, digging makes floor instead of corridor and randomly created corridors are made out of floor instead of corridor.
*<tt>shortsighted</tt>: Monsters cannot see you from far away. 
*<tt>noflipx</tt>, <tt>noflipy</tt> and <tt>noflip</tt> prevent the level from being flipped horizontally, vertically and both.
*<tt>mazelevel</tt>: level is a "maze" type level. Digging a wall turns it into room floor and mimics prefer mimicing a statue.
*<tt>premapped</tt>: The level map is automatically known by player (a la [[Sokoban]]).
*<tt>shroud</tt>: Magic mapping doesn't reveal the map permanently.
*<tt>stormy</tt>: Clouds randomly emit lightning bolts, a la [[Plane of Air]].
*<tt>graveyard</tt>: Reduced chances of undead corpses.
*<tt>sky</tt>: Level is open to the sky, so has no ceiling.

==Level statements==

Level statements include the following commands, {{sa|variable}} definitions, {{sa|FUNCTION}} definitions, function calls, and {{sa|Flow control}} commands.

===MESSAGE===
 MESSAGE:"string"

The message string is shown when player first enters the level. Each message line gets separated with a <tt>--more--</tt> -prompt in the game.

Example:
 MESSAGE: "Well done, mortal!"
 $foo = "Hello, World!"
 MESSAGE: $foo

===INIT_MAP===
 INIT_MAP:solidfill, terrain_type
 INIT_MAP:mazegrid,'-'
 INIT_MAP:sheollev
 INIT_MAP:rogue
 INIT_MAP:mines, '.' , ' ', true, true, random, true
Initializes the map with different algorithm.
*<tt>solidfill</tt>: Fills the level with the specified map character. Can also take a map character with light-state wrapped in parenthesis: <tt>('.', lit)</tt>
*<tt>mazegrid</tt>: Generates a grid of solid walls and the specified map characters. Use {{sa|MAZEWALK}} to carve a maze into it.
*<tt>sheollev</tt>: Generates a Sheol level. No parameters.
*<tt>rogue</tt>: Generates a [[Rogue level]]. No parameters.
*<tt>mines</tt>: Creates [[Gnomish Mines]]-style levels. Takes several parameters: <tt>foreground, background, smoothed, joined, light_state, walled [, filling ]</tt>
**<tt>foreground</tt>: The "foreground" fill {{sa|map character}}. This should be something the player can walk on, as the walkable part will be made out of this.
**<tt>background</tt>: The "background" fill {{sa|map character}}. This will surround the foreground area, so can be solid or harmful to player.
**<tt>smoothed</tt>: is either <tt>true</tt> or <tt>false</tt>, and denotes whether the level will be "smoothed". This means that any foreground character surrounded by fewer than 3 foreground characters is changed to background character.
**<tt>joined</tt>: is either <tt>true</tt> or <tt>false</tt>, and denotes whether the level will be "joined", so that all parts are accessible by walking.
**<tt>light_state</tt>: is either <tt>lit</tt>, <tt>unlit</tt>, or <tt>random</tt>.
**<tt>walled</tt>: is either <tt>true</tt> or <tt>false</tt>. This is equivalent of using a {{sa|WALLIFY}} -command.
**<tt>filling</tt>: optional [[#Map characters|fill map character]]. The "outside" parts of the level will be filled with this.

===ALTAR===
 ALTAR:{{sa|coord or variable}}, alignment, altartype
Create an altar.
*alignment is one of <tt>law</tt>, <tt>noalign</tt>, <tt>neutral</tt>, <tt>chaos</tt>, <tt>coaligned</tt>, <tt>noncoaligned</tt>, <tt>align[0]</tt>, <tt>align[1]</tt>, <tt>align[2]</tt> or <tt>random</tt>.
*altartype is one of <tt>sanctum</tt> (with a [[high priest]]), <tt>shrine</tt> (with an [[aligned priest]]), <tt>altar</tt> or <tt>random</tt>.

Example:
 ALTAR:(50,14),chaos,altar

===GRAVE===
 GRAVE:{{sa|coord or variable}}, "Any epitaph message"
 GRAVE:{{sa|coord or variable}}, random
 GRAVE:{{sa|coord or variable}}
Creates a grave at given location, with a given epitaph, a random epitaph, or with no text.

===MON_GENERATION===
Change the monster generation chances for this level.

 MON_GENERATION:75%, (9, 'a'), (1, "fire giant")
75% of randomly generated monsters are either ants (90% chance), or fire giants (10% chance).

===SOUNDS===
Random sounds on this level.
 SOUNDS:200, (hear, "falling rocks."), (pline, "Kaboom!"), (verbal, "Mwahahah!"), (feel, "hot!")
1/200 chance each turn to get one of the sounds defined. In this case, "You hear falling rocks.", "Kaboom!", "Mwahahah!", or "You feel hot!"

===BRANCH===
 BRANCH:(x1,y1,x2,y2), (x3,y3,x4,y4)
 BRANCH:levregion(x1,y1,x2,y2), levregion(x3,y3,x4,y4)
Places stairs or a magical portal to a dungeon branch within an area covered by (x1,y1,x2,y2) and not covered by (x3,y3,x4,y4).
If the area is prefixed with <tt>levregion</tt> then the coordinates are relative to the whole level, otherwise the coordinates are relative to the last-defined {{sa|MAP}}.

Example:
 BRANCH:levregion(51,2,77,18),(0,0,40,20)

===CORRIDOR===
 CORRIDOR:(room_number, direction, door_position), (room_number, direction, door_position)
 CORRIDOR:(room_number, direction, door_position), any_integer
Create a corridor from room to another room. direction is one of <tt>north</tt>, <tt>south</tt>, <tt>west</tt>, or <tt>east</tt> and tells which wall the corridor starts from and ends to. door_position is an integer value and tells how far from the top left of the room the corridor starts/ends. any_integer is a room number. There must be a door (or at least a doorway) in the starting wall position.

===SHUFFLE===
 SHUFFLE:any_array_variable
Shuffles the array elements. The predefined alignment array <tt>align</tt> is shuffled automatically at the start of the level code, and cannot be reshuffled.

Example:
 $foo = monster:{ 'd', 'T', 'e', 'L' }
 SHUFFLE: $foo

===NON_DIGGABLE===
 NON_DIGGABLE:region_or_variable
Sets the walls inside the region as non-diggable. 

Example:
 NON_DIGGABLE:(00,00,13,12)

===NON_PASSWALL===
 NON_PASSWALL:region_or_variable
Players and monsters cannot phase through the walls inside the region.

Example:
 NON_PASSWALL:(00,00,13,12)

===ROOMDOOR===
 ROOMDOOR:secret, door_state, door_wall, door_pos
Creates a door with certain state on the previously defined {{sa|ROOM}} or {{sa|SUBROOM}}.

*secret can be one of <tt>true</tt>, <tt>false</tt>, or <tt>random</tt>.
*door_state can be one of <tt>open</tt>, <tt>closed</tt>, <tt>locked</tt>, <tt>nodoor</tt>, <tt>broken</tt>, <tt>secret</tt>, or <tt>random</tt>.
*door_wall can be one of <tt>north</tt>, <tt>south</tt>, <tt>west</tt>, or <tt>east</tt>, a pipe-delimited list of those, or <tt>random</tt>, and tells on what wall of the room the door will be created.
*door_pos is a positive integer value and tells how far from the top or left the door will be.

Example:
 ROOMDOOR: false, closed, north|south, random

===DOOR===
 DOOR:door_state, {{sa|selection}}
Puts a door on the map.

*door_state can be one of <tt>open</tt>, <tt>closed</tt>, <tt>locked</tt>, <tt>nodoor</tt>, <tt>broken</tt>, <tt>secret</tt>, or <tt>random</tt>.

===WALLWALK===
 WALLWALK:{{sa|coord or variable}}, map character or variable
 WALLWALK:{{sa|coord or variable}}, map character or variable, 50%
 WALLWALK:{{sa|coord or variable}}, map character or variable, map character or variable
 WALLWALK:{{sa|coord or variable}}, map character or variable, map character or variable, 50%

===DRAWBRIDGE===
 DRAWBRIDGE:{{sa|coord or variable}}, dir, state

*<tt>dir</tt> is one of the following: <tt>north</tt>, <tt>east</tt>, <tt>south</tt> or <tt>west</tt>
*<tt>state</tt> is either <tt>closed</tt>, <tt>open</tt> or <tt>random</tt>.

Note that the drawbridge placement is different from door placement; the coordinates must be a place where the drawbridge would be when it's open, and from that place towards the direction there should be a wall, where the portcullis will be.

Example:
 DRAWBRIDGE:(25,18), north, closed

===ENGRAVING===
 ENGRAVING:{{sa|coord or variable}}, engraving_type, "string"
 ENGRAVING:{{sa|coord or variable}}, engraving_type, $stringvariable
Creates an engraving on the floor.
engraving_type can be one of <tt>dust</tt>, <tt>engrave</tt>, <tt>burn</tt>, <tt>mark</tt>, <tt>blood</tt>, or <tt>random</tt>.

For example:
 ENGRAVING:(12,03), engrave, "You are now entering the Gnome King's wine cellar."

===FOUNTAIN===
 FOUNTAIN:{{sa|selection}}
Create a fountain at each pair of coordinates in the selection.

===POOL===
 POOL:{{sa|selection}}
Create a pool at each pair of coordinates in the selection.

===SINK===
 SINK:{{sa|selection}}
Create a sink at each pair of coordinates in the selection.

===TERRAIN===
 TERRAIN:{{sa|selection}}, map_character_or_variable
Set the terrain at each pair of coordinates in the selection.

Example:
 TERRAIN:random, 'L'
 TERRAIN:line(1,1)-(40,11), ('T', lit)

===REPLACE_TERRAIN===
 REPLACE_TERRAIN:region_or_variable, map_character_or_variable, map_character_or_variable, percentage
Replace percentage amount of the first terrain in the region to the second terrain.

For example, replace 25% of '.' in the area with 'L':
 REPLACE_TERRAIN:(1,1,50,20), '.', 'L', 25%

===SPILL===
 SPILL:{{sa|coord or variable}}, terrain_type, direction, length
Create random "pool-like" globs of terrain, starting from coordinates, generally moving towards direction, and at a maximum of length positions.
Coordinates, terrain_type and length can be variables of the appropriate type.

For example:
 SPILL: random, 'L', north, 20
 SPILL: random, ('.', lit), north, 10

===PORTAL===
 PORTAL:(x1,y1,x2,y2), (x3,y3,x4,y4), "levelname"
 PORTAL:levregion(x1,y1,x2,y2), levregion(x3,y3,x4,y4), "levelname"
Places a magical portal within an area covered by (x1,y1,x2,y2) and not covered by (x3,y3,x4,y4). The portal will level teleport player to the level with the name "levelname".
If the area is prefixed with <tt>levregion</tt> then the coordinates are relative to the whole level, otherwise the coordinates are relative to the last-defined {{sa|MAP}}.

Example:
 PORTAL:levregion(57,01,78,19),(0,0,0,0),"fire"
 PORTAL:(0,0,75,19),(65,13,75,19),"air"

===RANDOM_CORRIDORS===
 RANDOM_CORRIDORS
 RANDOM_CORRIDORS:style
Create random corridors joining the rooms.

style is <tt>random</tt>, or one of the following values:
*1 = at least one corridor leaves from each room and goes to random room
*2 = circular path: room1 -> room2 -> room3 -> ... -> room1
*3 = all roads lead to rome. or to the first room.
*any other value (or leaving style off) will generate normal style corridors.

===MINERALIZE===
 MINERALIZE
 MINERALIZE: kelp_pool, kelp_moat, gold_prob, gem_prob
Puts kelp in pools and moats, and gold and gems in solid walls.
Without parameters uses the same chances as normal Dungeons of Doom mineralize.
*<tt>kelp_pool</tt> and <tt>kelp_moat</tt> are integer values and is the 1-in-n chances of a pool or a moat having kelp in it. Using -1 or below uses the default chances.
*<tt>gold_prob</tt> and <tt>gem_prob</tt> are integer values and is the n/1000 chances of a diggable solid wall containing gold and gems. Using -1 or below uses the default chances.

Example:
 MINERALIZE:0,0,0,1000  # Put gems in every solid wall

===REGION===
 REGION:region_or_variable, lightstate, roomtype [, filled][, irregular][, joined]
 REGION:region_or_variable, lightstate, roomtype [, filled][, irregular][, joined] { {{sa|Level statements}} }
Define a region on the map with certain light-state and type. This allows defining irregularly-shaped rooms. See also {{sa|ROOM}} and {{sa|SUBROOM}}. {{sa|BREAK}} is allowed within the level statements.

*lightstate is <tt>lit</tt>, <tt>unlit</tt>, or <tt>random</tt>.
*roomtype is either <tt>random</tt>, or one of the {{sa|Room types|special room names}}, eg. <tt>"morgue"</tt>
*filled is optional, either <tt>filled</tt> or <tt>unfilled</tt>, and tells whether the room should get stocked with random stuff.
*irregular is optional, either <tt>irregular</tt> or <tt>regular</tt> and tells whether the room is irregularly shaped. If the room is irregular, only the first pair of coordinates defining the region must be inside the room, and the room must be closed off from other areas with non-floor {{sa|map characters}}. Use the boundary symbol <tt>'B'</tt> in the {{sa|MAP}} to enclose an irregular room; it will be converted to floor symbol <tt>'.'</tt> after the level has been created.
*joined is an optional <tt>joined</tt> or <tt>unjoined</tt>, and tells whether any randomly generated corridors connect to the region.

Example:
 REGION:(01,04,09,05),lit,"barracks"

===ROOM===
 ROOM:roomtype, [ chance, ] lightstate, pos, align, size [, filled] [, joined] { {{sa|Level statements}} }
Creates a room, with walls and floor. The room will be placed on a position defined both by pos and align. pos defines the rough position (in a 5-by-5 grid on the screen), and align defines the room position within that. {{sa|BREAK}} is allowed within the level statements.

NOTE: Creation of a randomly located room may fail, especially if there's little free space to fit it on the level. The level statements of a failed room won't be executed.

*roomtype is either <tt>random</tt>, or one of the {{sa|Room types|special room names}}, eg. <tt>"morgue"</tt>
*chance is optional percentage of the room being the special room; otherwise the room is ordinary.
*lightstate is <tt>lit</tt>, <tt>unlit</tt>, or <tt>random</tt>.
*pos can be either <tt>random</tt> or an approximate location in the form of <tt>(1,3)</tt> - this is not an absolute position, but an approximate position on the map - the number ranges are 1..5
*align is either <tt>random</tt> or an approximate adjustment to the location in the form of <tt>(horiz, vert)</tt>, where
**horiz is one of <tt>left</tt>, <tt>half-left</tt>, <tt>center</tt>, <tt>half-right</tt>, or <tt>right</tt>.
**vert is one of <tt>top</tt>, <tt>center</tt>, or <tt>bottom</tt>.
*size is either <tt>random</tt> or an exact width and height in the form of <tt>(3,5)</tt>.
*filled is an optional <tt>filled</tt> or <tt>unfilled</tt>. <tt>unfilled</tt> means the room should get stocked with random stuff.
*joined is an optional <tt>joined</tt> or <tt>unjoined</tt>, and tells whether any randomly generated corridors connect to the room.

The contents (and SUBROOMs) of the room can be defined using the level statements.

See also {{sa|SUBROOM}} and {{sa|REGION}}.

===SUBROOM===
 SUBROOM:"roomtype", [ chance, ] lightstate, position, size [, filled] [, joined] { {{sa|Level statements}} }
Creates a room within a {{sa|ROOM}}, with walls and floor. {{sa|BREAK}} is allowed within the level statements block.

*roomtype is either <tt>random</tt>, or one of the {{sa|Room types|special room names}}, eg. <tt>"morgue"</tt>
*chance is optional percentage of the room being the special room; otherwise the room is ordinary.
*lightstate is <tt>lit</tt>, <tt>unlit</tt>, or <tt>random</tt>.
*position is either <tt>random</tt>, or an exact position of the room inside the outer room in the form of <tt>(4,3)</tt>.
*size is either <tt>random</tt> or an exact width and height in the form of <tt>(3,5)</tt>.
*filled is an optional <tt>filled</tt> or <tt>unfilled</tt>. <tt>unfilled</tt> means the room should get stocked with random stuff.
*joined is an optional <tt>joined</tt> or <tt>unjoined</tt>, and tells whether any randomly generated corridors connect to the room.

The contents (and SUBROOMs) of the room can be defined using the level statements.

See also {{sa|ROOM}} and {{sa|REGION}}.

===GOLD===
 GOLD:{{sa|mathematical expression}}, {{sa|coord or variable}}
Create a pile of gold.

Example:
 GOLD: 400 + 10d100, (01,05)

===LADDER===
 LADDER:{{sa|coord or variable}}, direction
Creates a ladder.
direction is one of <tt>up</tt> or <tt>down</tt>.

===STAIR===
 STAIR:{{sa|coord or variable}}, direction
Creates stairs.
direction is one of <tt>up</tt> or <tt>down</tt>.

===TELEPORT_REGION===
 TELEPORT_REGION:(x1,y1,x2,y2), (x3,y3,x4,y4) [, up_or_down ]

Restricts the area where player can end up on the level when he [[level teleport]]s or falls in there. Player will end up within an area covered by (x1,y1,x2,y2) and not covered by (x3,y3,x4,y4).
If the area is prefixed with <tt>levregion</tt> then the coordinates are relative to the whole level, otherwise the coordinates are relative to the last-defined {{sa|MAP}}.
You can also add an optional direction parameter, either <tt>up</tt> or <tt>down</tt>, which will tell when this rule is applied; when player is coming from below or above.

Example:
 TELEPORT_REGION:(69,16,69,16),(0,0,0,0)
 TELEPORT_REGION:levregion(56,00,79,20),levregion(01,00,55,20),down

===TRAP===
 TRAP:"{{sa|Trap names|falling rock}}", {{sa|coord or variable}}
 TRAP:random, {{sa|coord or variable}}
Create a trap at the given location.

===WALLIFY===
 WALLIFY
 WALLIFY:selection
Turns walls (in the whole map, or in the defined {{sa|selection}}) completely surrounded by other walls into solid stone <tt>' '</tt>.

Example:
 WALLIFY:fillrect(5,5, 40,15)

===NOMAP===
 NOMAP
Instead of {{sa|GEOMETRY}} and {{sa|MAP}}, you use this if you think that {{sa|INIT_MAP}} creates a good enough random map and you don't want to use any fixed map-parts.

See also {{sa|MAP}}

===GEOMETRY===
This must be immediately followed by a {{sa|MAP}} definition. It tells the location of the MAP-part on the level.
Two types of GEOMETRY, one takes an approximation of MAP alignment, the other takes an exact coordinate or variable.
 GEOMETRY:horiz,vert
 GEOMETRY:{{sa|coord or variable}}
*horiz is one of <tt>left</tt>, <tt>half-left</tt>, <tt>center</tt>, <tt>half-right</tt>, or <tt>right</tt>.
*vert is one of <tt>top</tt>, <tt>center</tt>, or <tt>bottom</tt>.

Both types take an optional boolean value. If it's true, the commands following the map are restricted into that map.
 GEOMETRY:center,center,true

===MAP===
{{anchor|ENDMAP}}
 MAP
 ...
 ...
 ...
 ENDMAP

This must be immediately preceded by a {{sa|GEOMETRY}} definition.
You define a map-part by "drawing" with [[#Map characters|map characters]] between the MAP and ENDMAP. The map can be up to 21 lines high and each line can be up to 76 chars long. Each line must also be the same length. You can also use numbers inside the map, but those will be ignored; they're considered as line numbers.

The top left point of the MAP is represented by the coordinates (0,0).

See also {{sa|NOMAP}}.

===MAZEWALK===
 MAZEWALK:{{sa|coord or variable}}, direction
 MAZEWALK:{{sa|coord or variable}}, direction, stocked
 MAZEWALK:{{sa|coord or variable}}, direction, stocked, '.'
Creates a random maze, starting from the coordinates.

stocked is an optional boolean value and tells whether the maze should get stocked with random loot and monsters.
The optional map character is used to "draw" the maze.

Mazewalk turns map grids with solid stone (<tt>' '</tt>) into floor (<tt>'.'</tt>), or the given map character. From the starting position, it checks the mapgrid in the direction given, and if it's solid stone, it will move there, and turn that place into floor. Then it will choose a random direction, jump over the nearest mapgrid in that direction, and check the next mapgrid for solid stone. If there is solid stone, mazewalk will move that direction, changing that place and the intervening mapgrid to floor. Normally the generated maze will not have any loops.
For example
 MAP
 TTTTTTT
 T T T T
 TTTTTTT
 T T T T
 TTTTTTT
 ENDMAP
Pointing mazewalk at that will create a small maze of trees, but unless the map (at the place where it's put into the level) is surrounded by something else than solid stone, mazewalk will get out of that MAP.  Substituting floor characters for some of the trees "in the maze" will make loops in the maze, which are not otherwise possible. Substituting floor characters for some of the trees at the edges of the map will make maze entrances and exits at those places.

If the total area NOT covered by all maze-parts in the level is greater than 1/10 of the total area of the level, then the mazes in the level will get stocked with maze-specific stuff, such as [[minotaur]]s, traps and items, proportionally to the amount of space not covered by MAPs.

Mazewalk will only work if the solid stone mapgrids in the level (where the MAP was put down) are on odd-numbered squares, both horizontally and vertically. You don't have to worry about this unless your MAP is 21 rows high or 76 columns wide, in which case you'll have to either make the MAP smaller, or move the places where the solid stone squares are.

Also, MAZEWALK will fail in certain types of MAP-parts if you use {{sa|WALLIFY}} before MAZEWALK.

Example:
 MAZEWALK:(00,06),west

===MONSTER===
 MONSTER:'d', {{sa|coord or variable}}
 MONSTER:"hill giant", {{sa|coord or variable}}
 MONSTER:('i', "imp"), {{sa|coord or variable}}
 MONSTER:random, {{sa|coord or variable}}
 $foo = monster:'d'
 MONSTER:$foo, (5,5)
 $arr = monster:{ 'd', 'T', 'y' }
 MONSTER:$arr[0], (5,5)

The monster definition can also take a number of optional parameters, separated by commas:
 MONSTER:'d', (4,4), "Idefix", peaceful, asleep, law, m_feature "boulder", female, invisible, cancelled, revived, avenge, stunned, confused, fleeing: 40, blinded: 20, paralyzed: 10, seen_traps: all
*"Idefix" is the name of the monster.
*Instead of <tt>peaceful</tt>, could use <tt>hostile</tt>.
*Instead of <tt>asleep</tt>, could use <tt>awake</tt>.
*Instead of <tt>law</tt>, could use <tt>noalign</tt>, <tt>neutral</tt>, <tt>chaos</tt>, <tt>coaligned</tt>, <tt>noncoaligned</tt>, <tt>align[0]</tt>, <tt>align[1]</tt>, <tt>align[2]</tt> or <tt>align:random</tt>.
*<tt>m_feature</tt> tells the monster to mimic a dungeon feature, a boulder in this case. could also use <tt>m_monster</tt> or <tt>m_object</tt>.
*<tt>female</tt>, <tt>invisible</tt>, <tt>cancelled</tt>, <tt>revived</tt>, <tt>avenge</tt>, <tt>stunned</tt> and <tt>confused</tt> set monster status bits.
*<tt>fleeing</tt>, <tt>blinded</tt> and <tt>paralyzed</tt> set the number of turns the monster will flee, is blinded or is paralyzed, respectively. Parameter is an integer value in the range of 0-127.
*<tt>seen_traps</tt> tells which traps the monster has seen; parameter is either <tt>all</tt> or quoted strings of trap names separated by pipe characters (eg. <tt>"falling boulder"</tt>, or <tt>"arrow"|"dart"|"bear"</tt>)

===OBJECT===
 OBJECT:"elven cloak", (5,5)
 OBJECT:'?', (5,5)
 OBJECT:('/', "wishing"), (5,5)
 OBJECT:random, (5,5)
 $foo = object:'/'
 OBJECT:$foo, (5,5)
 $arr = object:{ '/', '?', '!' }
 OBJECT:$arr[2], (5,5)

The object definition can also take a number of optional parameters, separated by commas:
 OBJECT:'?', (5,5), blessed, montype:('d', "little dog"), +4, name:"foobar", quantity: 20, buried, invisible, lit, greased, locked, trapped, eroded:2, erodeproof, recharged:3
*<tt>blessed</tt> can be replaced with <tt>uncursed</tt> or <tt>cursed</tt>.
*<tt>montype</tt> tells eg. what monster statue it is.
*any integer value sets the plusses or minuses for eg. armor or weapon.
*<tt>name</tt> gives the item a name. can also take a variable of string type as a parameter.
*<tt>quantity</tt> set the number of items.
*<tt>buried</tt>, <tt>trapped</tt>, <tt>invisible</tt>, <tt>greased</tt> set object states.
*<tt>lit</tt> or <tt>unlit</tt> for lamps.
*<tt>eroded</tt> sets the erosion. Don't use with <tt>erodeproof</tt>.
*<tt>locked</tt> (or <tt>broken</tt>) set the lock state for lockable objects.
*<tt>recharged</tt> sets the number of times eg. a wand has been recharged.

===CONTAINER===
 CONTAINER:"large chest", (5,5) { {{sa|Level statements}} }
Takes the same parameters as {{sa|OBJECT}}, but allows defining the contents inside the curly braces.
For the contents, use a subset of level statements: OBJECTs, CONTAINERs and flow control commands; anything else causes undefined behaviour.

==Flow control==

The following commands affect the order in which commands are executed.

===SWITCH===
{{anchor|CASE|DEFAULT}}
 SWITCH [ integer_or_variable ] {
   CASE integer:
      {{sa|Level statements}}
   DEFAULT:
      {{sa|Level statements}}
 } 
The SWITCH behaviour is modeled after the C switch-statement.
Using the {{sa|BREAK}} keyword is allowed; without it the execution falls through to the next case.

If the integer value in the switch is a static number, it is automatically wrapped in rnd(). If a dice-notation or a variable is used, then the value is used as-is. For example the statements below are functionally the same:
 SWITCH [ 3 ] { ... }
 SWITCH [ rnd(3) ] { ... }
 SWITCH [ 1d3 - 1 ] { ... }

===FOR===
 FOR $x = math_expr TO math_expr { {{sa|Level statements}} }
Executes the level statements as many times as it takes to increase (or decrease) the variable from the first integer value to the second. {{sa|BREAK}} is allowed within the loop.

Example:
 FOR $x = 2 TO 40 {
   FOR $y = 2+1 TO 2*10 {
     OBJECT:random, coord($x, $y)
   }
 }

===LOOP===
 LOOP [ integer_or_variable ] { {{sa|Level statements}} }
Executes the level statements as many times (but at least once) as the value inside square brackets says. If an integer variable is used, the value of the variable does not change. {{sa|BREAK}} is allowed within the loop.

Example:
 LOOP [ 10 ] { OBJECT:random,random }

===IF===
{{anchor|ELSE}}
 IF [ percentage ] { {{sa|Level statements}} }
 IF [ math_expression_or_variable compare_operator math_expression_or_variable ] { {{sa|Level statements}} }
 IF [ math_expression_or_variable ] { {{sa|Level statements}} }
Execute the level statements, but only if matching some condition. You can also add an optional <tt>ELSE { {{sa|Level statements}} }</tt> block.
In the third form the statements will be executed if the math expression or variable is non-zero. Using {{sa|BREAK}} is not allowed within the statements, unless the IF-block is inside a command where BREAK is allowed. In that case the BREAK will make the execution jump to the end of the containing command.

There's also a degenerate case <tt>[50%]: one_level_statement</tt>.

For example:
 IF [ 25% ] { {{sa|Level statements}} }
 IF [ 25% ] { {{sa|Level statements}} } ELSE { {{sa|Level statements}} }
 IF [ 2*2 == 4 ] { {{sa|Level statements}} }
 IF [ 0 ] { {{sa|Level statements}} }
 [50%]: MONSTER: random, random

===EXIT===
 EXIT
Immediately finishes the level script.

===BREAK===
 BREAK
The BREAK keyword will make the script skip the rest of the statement block. Breaks can be used within {{sa|LOOP}}s, {{sa|FOR}}-loops, {{sa|SWITCH}}es,
{{sa|ROOM}} and {{sa|SUBROOM}} contents, {{sa|CONTAINER}} contents, {{sa|MONSTER}} inventories, and {{sa|REGION}} contents.

Example:
 FOR $x = 5 TO 60 {
  OBJECT:'$',coord($x,10)
  IF [ $x > 30 ] { BREAK }
 }

==Variables and Types==

===variable===
Variable names start with a dollar sign, and can contain any alphanumeric characters. Variables must be defined before they can be used.
Some variable definitions must have the variable type: <tt>terrain</tt>, <tt>monster</tt>, <tt>object</tt> and <tt>{{sa|selection}}</tt>.

 $foo = 123
 $foo = "any string"
 $foo = {{sa|mathematical expression}}
 $bar = $foo
 $foo = terrain:'T'
 $foo = terrain:('.', lit)
 $foo = monster:'d'
 $foo = monster:"little dog"
 $foo = monster:('d', "little dog")
 $foo = monster:random
 $foo = object:'/'
 $foo = object:"elven cloak"
 $foo = object:('?', "identify")
 $foo = (40, 12)
 $foo = (5,5, 40,12)
 $foo = selection:{{sa|selection}}

===array variable===
 $foo = { 1, 2, 3, 4, 5 }
 $foo = { "string a", "bcdef", "and something" }
 $foo = { (1,2), (40,12) }
 $foo = { (5,5,40,12), (1,1,20,18), (40,10,50,12) }
 $foo = terrain: { 'T', 'L', ('.', unlit) }
 $foo = monster: { 'n', "newt", ('d', "little dog") }
 $foo = object: { '/', "elven cloak", ('?', "identify") }

To access one element of an array variable, use eg. <tt>$foo[0]</tt> to access variable $foo's first element.

Array length can be accessed with the <tt>.length</tt> method:
 $foo = { 1, 2, 4 }
 MESSAGE: "length is " . string($foo.length)

===coord or variable===
This parameter can be either a pair of coordinates, or a variable of the type coord. For example: 
 GRAVE: (10,5)
 $foo = (4,10)
 $bar = { (4,10), (3,12), (50,2) }
 GRAVE: $foo
 GRAVE: $bar[1]

 GRAVE: rndcoord({{sa|selection}})
A random pair of coordinates selected from within the {{sa|selection}}

The x and y coordinates can be accessed (but not set) separately:
 $foo = (4, 10)
 IF [ $foo.x == 4 ] {
   MESSAGE: " y = " . string($foo.y)
 }

===strings===
 $foo = "This is a string"
 MESSAGE: $foo . " and another"
Strings are any characters surrounded by double quotes. Strings can be concatenated with full stop. If you wish to concatenate an integer value, it must be first converted to string with the {{sa|Predefined_functions_and_constants|<tt>string()</tt> function}}.

===region or variable===
This parameter can be either a region, or a variable of the region type. For example:
 NON_DIGGABLE:(5,5, 40,12)
 $foo = (5,5, 40,12)
 NON_DIGGABLE:$foo

===map character or variable===
This parameter can be either a {{sa|Map characters|map character}}, a map character and lightstate combination, or a variable of terrain type:
 TERRAIN:(5,5), 'L'
 TERRAIN:(6,6), ('.', unlit)
 $lava = terrain:'L'
 TERRAIN:(7,7), $lava
 $floor = terrain:('.', lit)
 TERRAIN:(8,8), $floor

===mathematical expression===

A mathematical expression can consist of plain integer values, [[D-notation]]s, variables of integer type, and the operands '+', '-', '*', '/', and '%'. For example: <tt>1 + 2</tt>, or <tt>3d6 * (2 + 3)</tt>.
Negative integer values should be enclosed inside parenthesis: <tt>(-1) * (-3)</tt>

===selection===
A selection is a collection of points, represented by map coordinates. The <tt>selection</tt> keyword is only needed when defining a variable of selection type.

Selections can be added together with the '&' operator, for example <tt>rect(5,5, 50,18) & rect(10,2, 40,13)</tt>:
 $foo = selection:rect(5,5, 50,18) & rect(10,2, 40,13)

====coordinate====
 $foo = selection:{{sa|coord or variable}}
The selection contains a single point on the map.

Example:
 $foo = selection:(55,12)
 $bar = (4,10)
 $baz = selection:$bar

====rectangle====
 $foo = selection:rect {{sa|region or variable}}
The selection includes the border of the rectangle.

Example:
 $foo = selection: rect(5,3, 72,18)

====filled rectangle====
 $foo = selection:fillrect {{sa|region or variable}}
The selection contains a rectangular area.

Example:
 $foo = selection: fillrect(5,3, 72,18)

====line====
 $foo = selection:line {{sa|coord or variable}}-{{sa|coord or variable}}
The selection contains a straight line between the points.

Example:
 $foo = selection: line(1,1)-(76,21)

====random line====
 $foo = selection:randline {{sa|coord or variable}}-{{sa|coord or variable}},{{sa|mathematical expression}}
The selection contains a meandering line between the points. The integer value is the "roughness" of the line.

Example:
 $foo = selection: randline(1,1)-(76,21), 4

====grow====
 $foo = selection:grow ({{sa|selection}})
 $foo = selection:grow ({{sa|list of directions}}, {{sa|selection}})
Grow a selection by adding the surrounding map points to it. The second form can take a list of directions, and the growth will pick points from those directions to grow into.

Example:
 $foo = selection:grow(line(1,1)-(76,21))
 $bar = selection:grow(north|south, rect(5,3, 72,18))

====filter====
 $foo = selection:filter (50%, {{sa|selection}})
 $foo = selection:filter ({{sa|selection}}, {{sa|selection}})
 $foo = selection:filter ({{sa|map character or variable}}, {{sa|selection}})
Remove points from the selection. The first form picks (at random) 50% of the points in the selection, the second chooses points that are common to both selections, third one leaves only places that match the map character.

Example:
 $foo = selection: filter(20%, fillrect(5,3, 72,18))
 $foo = selection: filter('L', fillrect(1,1, 76,21))

====floodfill====
 $foo = selection:floodfill {{sa|coord or variable}}
"Floodfill" from the point, adding all connected points with the same terrain type to the selection.

====circle====
 $foo = selection:circle ({{sa|coord or variable}}, {{sa|mathematical expression}})
 $foo = selection:circle ({{sa|coord or variable}}, {{sa|mathematical expression}}, filled)
 $foo = selection:circle ({{sa|coord or variable}}, {{sa|mathematical expression}}, unfilled)
Circle shape. Parameters are center point, radius, and optional <tt>filled</tt> or <tt>unfilled</tt>.
Creates an unfilled circle by default.

For example:
 $foo = selection: circle((5,10), 3) &
                   circle((15,10), 3, unfilled) &
                   circle((25,10), 3, filled)
 TERRAIN:$foo, 'L'

====ellipse====
 $foo = selection:ellipse ({{sa|coord or variable}}, {{sa|mathematical expression}}, {{sa|mathematical expression}})
 $foo = selection:ellipse ({{sa|coord or variable}}, {{sa|mathematical expression}}, {{sa|mathematical expression}}, filled)
 $foo = selection:ellipse ({{sa|coord or variable}}, {{sa|mathematical expression}}, {{sa|mathematical expression}}, unfilled)
Ellipse shape. Parameters are center point, horizontal and vertical radius, and optional <tt>filled</tt> or <tt>unfilled</tt>.
Creates an unfilled ellipse by default.

For example:
 $foo = selection: ellipse((35,10), 3,5) &
                   ellipse((45,10), 3,5, unfilled) &
                   ellipse((55,10), 3,5, filled)
 TERRAIN:$foo, 'L'

====gradient====
 $foo = selection: gradient(grad_type, (min_dist - max_dist [, limited]), coord [, coord2 ])
Selects random points with distance from coord between min_dist and max_dist, with higher probability closer to max_dist.
No points closer than min_dist will be included. All points at max_dist will be included.
Using the optional "limited" will make the selection stop at max_dist.
Leaving the "limited" out, or using "unlimited", will select all points outside the max_dist radius.

grad_type can be one of "radial" or "square", and affects the distance calculation from the center.

If the optional second pair of coordinates is given, the "center" of the area is a line segment between the two pairs of coordinates.

For example:
 $r = selection: gradient(radial, (1 - 9, limited), (11,10))
 TERRAIN:$r,'L'

====complement====
 $foo = selection: complement({{sa|selection}})
Returns a bitwise not, or complement, of the selection.

====rndcoord====
To select a random pair of coordinates from a selection, use <tt>rndcoord({{sa|selection}})</tt>:
 $bar = rndcoord(rect(5,5, 50,18) & rect(10,2, 40,13))

==Predefined functions and constants==
These are internal functions from the game's code that are available during level creation:

{|class="prettytable striped"
!name
!return value
!
|-
|time.discordian_holiday
|integer, 0 or 1
|
|-
|time.pirateday
|integer, 0 or 1
|
|-
|time.aprilfoolsday
|integer, 0 or 1
|
|-
|time.piday
|integer, 0 or 1
|
|-
|time.towelday
|integer, 0 or 1
|
|-
|time.midnight
|integer, 0 or 1
|
|-
|time.night
|integer, 0 or 1
|
|-
|time.friday_13th
|integer, 0 or 1
|
|-
|time.phase_of_the_moon
|integer, 0..7, where 0=new, 4=full
|
|-
|time.yyyymmdd
|integer
|Current date in the YYYYMMDD format, eg. 20120418
|-
|level.depth
|integer
|Returns the level depth from surface.
|-
|level.difficulty
|integer
|
|-
|level.obj_at(obj, coord)
|integer, 0 or 1
